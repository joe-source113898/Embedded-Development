
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .text:

080000bc <__udivsi3>:
 80000bc:	2900      	cmp	r1, #0
 80000be:	d034      	beq.n	800012a <.udivsi3_skip_div0_test+0x6a>

080000c0 <.udivsi3_skip_div0_test>:
 80000c0:	2301      	movs	r3, #1
 80000c2:	2200      	movs	r2, #0
 80000c4:	b410      	push	{r4}
 80000c6:	4288      	cmp	r0, r1
 80000c8:	d32c      	bcc.n	8000124 <.udivsi3_skip_div0_test+0x64>
 80000ca:	2401      	movs	r4, #1
 80000cc:	0724      	lsls	r4, r4, #28
 80000ce:	42a1      	cmp	r1, r4
 80000d0:	d204      	bcs.n	80000dc <.udivsi3_skip_div0_test+0x1c>
 80000d2:	4281      	cmp	r1, r0
 80000d4:	d202      	bcs.n	80000dc <.udivsi3_skip_div0_test+0x1c>
 80000d6:	0109      	lsls	r1, r1, #4
 80000d8:	011b      	lsls	r3, r3, #4
 80000da:	e7f8      	b.n	80000ce <.udivsi3_skip_div0_test+0xe>
 80000dc:	00e4      	lsls	r4, r4, #3
 80000de:	42a1      	cmp	r1, r4
 80000e0:	d204      	bcs.n	80000ec <.udivsi3_skip_div0_test+0x2c>
 80000e2:	4281      	cmp	r1, r0
 80000e4:	d202      	bcs.n	80000ec <.udivsi3_skip_div0_test+0x2c>
 80000e6:	0049      	lsls	r1, r1, #1
 80000e8:	005b      	lsls	r3, r3, #1
 80000ea:	e7f8      	b.n	80000de <.udivsi3_skip_div0_test+0x1e>
 80000ec:	4288      	cmp	r0, r1
 80000ee:	d301      	bcc.n	80000f4 <.udivsi3_skip_div0_test+0x34>
 80000f0:	1a40      	subs	r0, r0, r1
 80000f2:	431a      	orrs	r2, r3
 80000f4:	084c      	lsrs	r4, r1, #1
 80000f6:	42a0      	cmp	r0, r4
 80000f8:	d302      	bcc.n	8000100 <.udivsi3_skip_div0_test+0x40>
 80000fa:	1b00      	subs	r0, r0, r4
 80000fc:	085c      	lsrs	r4, r3, #1
 80000fe:	4322      	orrs	r2, r4
 8000100:	088c      	lsrs	r4, r1, #2
 8000102:	42a0      	cmp	r0, r4
 8000104:	d302      	bcc.n	800010c <.udivsi3_skip_div0_test+0x4c>
 8000106:	1b00      	subs	r0, r0, r4
 8000108:	089c      	lsrs	r4, r3, #2
 800010a:	4322      	orrs	r2, r4
 800010c:	08cc      	lsrs	r4, r1, #3
 800010e:	42a0      	cmp	r0, r4
 8000110:	d302      	bcc.n	8000118 <.udivsi3_skip_div0_test+0x58>
 8000112:	1b00      	subs	r0, r0, r4
 8000114:	08dc      	lsrs	r4, r3, #3
 8000116:	4322      	orrs	r2, r4
 8000118:	2800      	cmp	r0, #0
 800011a:	d003      	beq.n	8000124 <.udivsi3_skip_div0_test+0x64>
 800011c:	091b      	lsrs	r3, r3, #4
 800011e:	d001      	beq.n	8000124 <.udivsi3_skip_div0_test+0x64>
 8000120:	0909      	lsrs	r1, r1, #4
 8000122:	e7e3      	b.n	80000ec <.udivsi3_skip_div0_test+0x2c>
 8000124:	0010      	movs	r0, r2
 8000126:	bc10      	pop	{r4}
 8000128:	4770      	bx	lr
 800012a:	b501      	push	{r0, lr}
 800012c:	2000      	movs	r0, #0
 800012e:	f000 f80b 	bl	8000148 <__aeabi_idiv0>
 8000132:	bd02      	pop	{r1, pc}

08000134 <__aeabi_uidivmod>:
 8000134:	2900      	cmp	r1, #0
 8000136:	d0f8      	beq.n	800012a <.udivsi3_skip_div0_test+0x6a>
 8000138:	b503      	push	{r0, r1, lr}
 800013a:	f7ff ffc1 	bl	80000c0 <.udivsi3_skip_div0_test>
 800013e:	bc0e      	pop	{r1, r2, r3}
 8000140:	4342      	muls	r2, r0
 8000142:	1a89      	subs	r1, r1, r2
 8000144:	4718      	bx	r3
 8000146:	46c0      	nop			@ (mov r8, r8)

08000148 <__aeabi_idiv0>:
 8000148:	4770      	bx	lr
 800014a:	46c0      	nop			@ (mov r8, r8)

0800014c <__do_global_dtors_aux>:
 800014c:	b510      	push	{r4, lr}
 800014e:	4c06      	ldr	r4, [pc, #24]	@ (8000168 <__do_global_dtors_aux+0x1c>)
 8000150:	7823      	ldrb	r3, [r4, #0]
 8000152:	2b00      	cmp	r3, #0
 8000154:	d107      	bne.n	8000166 <__do_global_dtors_aux+0x1a>
 8000156:	4b05      	ldr	r3, [pc, #20]	@ (800016c <__do_global_dtors_aux+0x20>)
 8000158:	2b00      	cmp	r3, #0
 800015a:	d002      	beq.n	8000162 <__do_global_dtors_aux+0x16>
 800015c:	4804      	ldr	r0, [pc, #16]	@ (8000170 <__do_global_dtors_aux+0x24>)
 800015e:	e000      	b.n	8000162 <__do_global_dtors_aux+0x16>
 8000160:	bf00      	nop
 8000162:	2301      	movs	r3, #1
 8000164:	7023      	strb	r3, [r4, #0]
 8000166:	bd10      	pop	{r4, pc}
 8000168:	2000001c 	.word	0x2000001c
 800016c:	00000000 	.word	0x00000000
 8000170:	080033ec 	.word	0x080033ec

08000174 <frame_dummy>:
 8000174:	4b04      	ldr	r3, [pc, #16]	@ (8000188 <frame_dummy+0x14>)
 8000176:	b510      	push	{r4, lr}
 8000178:	2b00      	cmp	r3, #0
 800017a:	d003      	beq.n	8000184 <frame_dummy+0x10>
 800017c:	4903      	ldr	r1, [pc, #12]	@ (800018c <frame_dummy+0x18>)
 800017e:	4804      	ldr	r0, [pc, #16]	@ (8000190 <frame_dummy+0x1c>)
 8000180:	e000      	b.n	8000184 <frame_dummy+0x10>
 8000182:	bf00      	nop
 8000184:	bd10      	pop	{r4, pc}
 8000186:	46c0      	nop			@ (mov r8, r8)
 8000188:	00000000 	.word	0x00000000
 800018c:	20000020 	.word	0x20000020
 8000190:	080033ec 	.word	0x080033ec

08000194 <main>:

// LCD_HandleTypeDef hlcd; /* Structure to handle the LCD */


int main(void)
{
 8000194:	b510      	push	{r4, lr}
    /* Initialize debugging monitor */
    // initialise_monitor_handles();

    /* Initialize hardware abstraction layer */
    HAL_Init();
 8000196:	f000 f91f 	bl	80003d8 <HAL_Init>

    /* Initialize serial communication */
    Serial_Init();
 800019a:	f002 fbfd 	bl	8002998 <Serial_Init>

    /* Initialize clock functionality */
    Clock_Init();
 800019e:	f002 ff43 	bl	8003028 <Clock_Init>
    /* Add more initializations as needed */

    while (1)
    {
        /* Execute serial communication task */
        Serial_Task();
 80001a2:	f002 fc4f 	bl	8002a44 <Serial_Task>

        /* Execute clock task */
        Clock_Task();
 80001a6:	f002 ff7f 	bl	80030a8 <Clock_Task>

        /* Execute the display task */
        // Display_Task();

        /* Execute the CAN task */
        CAN_Task();
 80001aa:	f003 f84f 	bl	800324c <CAN_Task>
        Serial_Task();
 80001ae:	46c0      	nop			@ (mov r8, r8)
 80001b0:	e7f7      	b.n	80001a2 <main+0xe>

080001b2 <NMI_Handler>:
Brief.- Punto de entrada del programa
-------------------------------------------------------------------------------------------------*/
void NMI_Handler( void )
{

}
 80001b2:	46c0      	nop			@ (mov r8, r8)
 80001b4:	4770      	bx	lr

080001b6 <HardFault_Handler>:
Brief.- Punto de entrada del programa
-------------------------------------------------------------------------------------------------*/
void HardFault_Handler( void )
{
    assert_param( 0u );
}
 80001b6:	46c0      	nop			@ (mov r8, r8)
 80001b8:	4770      	bx	lr

080001ba <SVC_Handler>:
Brief.- Punto de entrada del programa
-------------------------------------------------------------------------------------------------*/
void SVC_Handler( void )
{

}
 80001ba:	46c0      	nop			@ (mov r8, r8)
 80001bc:	4770      	bx	lr

080001be <PendSV_Handler>:
Brief.- Punto de entrada del programa
-------------------------------------------------------------------------------------------------*/
void PendSV_Handler( void )
{

}
 80001be:	46c0      	nop			@ (mov r8, r8)
 80001c0:	4770      	bx	lr

080001c2 <SysTick_Handler>:

/**------------------------------------------------------------------------------------------------
Brief.- Punto de entrada del programa
-------------------------------------------------------------------------------------------------*/
void SysTick_Handler( void )
{
 80001c2:	b510      	push	{r4, lr}
    HAL_IncTick( );
 80001c4:	f000 f972 	bl	80004ac <HAL_IncTick>
}
 80001c8:	46c0      	nop			@ (mov r8, r8)
 80001ca:	bd10      	pop	{r4, pc}

080001cc <TIM16_FDCAN_IT0_IRQHandler>:

/**
 * @brief Declare CAN interrupt service rutine as it is declare in startup_stm32g0b1xx.s file
 */    
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 80001cc:	b510      	push	{r4, lr}
    /* HAL library functions that attend interrupt on CAN */
    HAL_FDCAN_IRQHandler(&CANHandler);
 80001ce:	4b03      	ldr	r3, [pc, #12]	@ (80001dc <TIM16_FDCAN_IT0_IRQHandler+0x10>)
 80001d0:	0018      	movs	r0, r3
 80001d2:	f001 faa7 	bl	8001724 <HAL_FDCAN_IRQHandler>
 80001d6:	46c0      	nop			@ (mov r8, r8)
 80001d8:	bd10      	pop	{r4, pc}
 80001da:	46c0      	nop			@ (mov r8, r8)
 80001dc:	2000003c 	.word	0x2000003c

080001e0 <HAL_MspInit>:
 * @brief HAL MspInit function override
 */
void HAL_MspInit(void)
{
    /* TODO: Implement your MspInit configuration here */
}
 80001e0:	46c0      	nop			@ (mov r8, r8)
 80001e2:	4770      	bx	lr

080001e4 <HAL_FDCAN_MspInit>:
/**
 * @brief HAL_FDCAN MspInit function override
 * @param hfdcan FDCAN handle
 */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef *hfdcan)
{
 80001e4:	b500      	push	{lr}
 80001e6:	b08b      	sub	sp, #44	@ 0x2c
 80001e8:	9001      	str	r0, [sp, #4]
    GPIO_InitTypeDef GpioCanStruct;

    /* Enable clocks for GPIO and CAN peripherals */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80001ea:	4b28      	ldr	r3, [pc, #160]	@ (800028c <HAL_FDCAN_MspInit+0xa8>)
 80001ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80001ee:	4b27      	ldr	r3, [pc, #156]	@ (800028c <HAL_FDCAN_MspInit+0xa8>)
 80001f0:	2180      	movs	r1, #128	@ 0x80
 80001f2:	0149      	lsls	r1, r1, #5
 80001f4:	430a      	orrs	r2, r1
 80001f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80001f8:	4b24      	ldr	r3, [pc, #144]	@ (800028c <HAL_FDCAN_MspInit+0xa8>)
 80001fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80001fc:	2380      	movs	r3, #128	@ 0x80
 80001fe:	015b      	lsls	r3, r3, #5
 8000200:	4013      	ands	r3, r2
 8000202:	9304      	str	r3, [sp, #16]
 8000204:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000206:	4b21      	ldr	r3, [pc, #132]	@ (800028c <HAL_FDCAN_MspInit+0xa8>)
 8000208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800020a:	4b20      	ldr	r3, [pc, #128]	@ (800028c <HAL_FDCAN_MspInit+0xa8>)
 800020c:	2108      	movs	r1, #8
 800020e:	430a      	orrs	r2, r1
 8000210:	635a      	str	r2, [r3, #52]	@ 0x34
 8000212:	4b1e      	ldr	r3, [pc, #120]	@ (800028c <HAL_FDCAN_MspInit+0xa8>)
 8000214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000216:	2208      	movs	r2, #8
 8000218:	4013      	ands	r3, r2
 800021a:	9303      	str	r3, [sp, #12]
 800021c:	9b03      	ldr	r3, [sp, #12]

    /* Configure Pin 0 (Rx) and Pin 1 (Tx) in alternate mode for FDCAN1 */
    GpioCanStruct.Mode = GPIO_MODE_AF_PP;
 800021e:	ab05      	add	r3, sp, #20
 8000220:	2202      	movs	r2, #2
 8000222:	605a      	str	r2, [r3, #4]
    GpioCanStruct.Alternate = GPIO_AF3_FDCAN1;
 8000224:	ab05      	add	r3, sp, #20
 8000226:	2203      	movs	r2, #3
 8000228:	611a      	str	r2, [r3, #16]
    GpioCanStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800022a:	ab05      	add	r3, sp, #20
 800022c:	2203      	movs	r2, #3
 800022e:	601a      	str	r2, [r3, #0]
    GpioCanStruct.Pull = GPIO_NOPULL;
 8000230:	ab05      	add	r3, sp, #20
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
    GpioCanStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000236:	ab05      	add	r3, sp, #20
 8000238:	2202      	movs	r2, #2
 800023a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOD, &GpioCanStruct);
 800023c:	ab05      	add	r3, sp, #20
 800023e:	4a14      	ldr	r2, [pc, #80]	@ (8000290 <HAL_FDCAN_MspInit+0xac>)
 8000240:	0019      	movs	r1, r3
 8000242:	0010      	movs	r0, r2
 8000244:	f000 fd86 	bl	8000d54 <HAL_GPIO_Init>

    /* Configure Pin 14 (Rx) and Pin 15 (Tx) in alternate mode for FDCAN2 */
    GpioCanStruct.Mode = GPIO_MODE_AF_PP;
 8000248:	ab05      	add	r3, sp, #20
 800024a:	2202      	movs	r2, #2
 800024c:	605a      	str	r2, [r3, #4]
    GpioCanStruct.Alternate = GPIO_AF3_FDCAN2;
 800024e:	ab05      	add	r3, sp, #20
 8000250:	2203      	movs	r2, #3
 8000252:	611a      	str	r2, [r3, #16]
    GpioCanStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 8000254:	ab05      	add	r3, sp, #20
 8000256:	22c0      	movs	r2, #192	@ 0xc0
 8000258:	0212      	lsls	r2, r2, #8
 800025a:	601a      	str	r2, [r3, #0]
    GpioCanStruct.Pull = GPIO_NOPULL;
 800025c:	ab05      	add	r3, sp, #20
 800025e:	2200      	movs	r2, #0
 8000260:	609a      	str	r2, [r3, #8]
    GpioCanStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000262:	ab05      	add	r3, sp, #20
 8000264:	2202      	movs	r2, #2
 8000266:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOD, &GpioCanStruct);
 8000268:	ab05      	add	r3, sp, #20
 800026a:	4a09      	ldr	r2, [pc, #36]	@ (8000290 <HAL_FDCAN_MspInit+0xac>)
 800026c:	0019      	movs	r1, r3
 800026e:	0010      	movs	r0, r2
 8000270:	f000 fd70 	bl	8000d54 <HAL_GPIO_Init>


    /* Enable vector interrupt to handle CAN IRQs */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 2, 0);
 8000274:	2200      	movs	r2, #0
 8000276:	2102      	movs	r1, #2
 8000278:	2015      	movs	r0, #21
 800027a:	f000 f9dd 	bl	8000638 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 800027e:	2015      	movs	r0, #21
 8000280:	f000 f9ee 	bl	8000660 <HAL_NVIC_EnableIRQ>
}
 8000284:	46c0      	nop			@ (mov r8, r8)
 8000286:	b00b      	add	sp, #44	@ 0x2c
 8000288:	bd00      	pop	{pc}
 800028a:	46c0      	nop			@ (mov r8, r8)
 800028c:	40021000 	.word	0x40021000
 8000290:	50000c00 	.word	0x50000c00

08000294 <HAL_RTC_MspInit>:
/**
 * @brief HAL_RTC MspInit function override
 * @param hrtc RTC handle
 */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8000294:	b500      	push	{lr}
 8000296:	b0a9      	sub	sp, #164	@ 0xa4
 8000298:	9001      	str	r0, [sp, #4]
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	ab19      	add	r3, sp, #100	@ 0x64
 800029c:	0018      	movs	r0, r3
 800029e:	233c      	movs	r3, #60	@ 0x3c
 80002a0:	001a      	movs	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	f003 f876 	bl	8003394 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002a8:	ab06      	add	r3, sp, #24
 80002aa:	0018      	movs	r0, r3
 80002ac:	234c      	movs	r3, #76	@ 0x4c
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f003 f86f 	bl	8003394 <memset>

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002b6:	4b31      	ldr	r3, [pc, #196]	@ (800037c <HAL_RTC_MspInit+0xe8>)
 80002b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80002ba:	4b30      	ldr	r3, [pc, #192]	@ (800037c <HAL_RTC_MspInit+0xe8>)
 80002bc:	2101      	movs	r1, #1
 80002be:	430a      	orrs	r2, r1
 80002c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80002c2:	4b2e      	ldr	r3, [pc, #184]	@ (800037c <HAL_RTC_MspInit+0xe8>)
 80002c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c6:	2201      	movs	r2, #1
 80002c8:	4013      	ands	r3, r2
 80002ca:	9305      	str	r3, [sp, #20]
 80002cc:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_PWR_CLK_ENABLE();
 80002ce:	4b2b      	ldr	r3, [pc, #172]	@ (800037c <HAL_RTC_MspInit+0xe8>)
 80002d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80002d2:	4b2a      	ldr	r3, [pc, #168]	@ (800037c <HAL_RTC_MspInit+0xe8>)
 80002d4:	2180      	movs	r1, #128	@ 0x80
 80002d6:	0549      	lsls	r1, r1, #21
 80002d8:	430a      	orrs	r2, r1
 80002da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80002dc:	4b27      	ldr	r3, [pc, #156]	@ (800037c <HAL_RTC_MspInit+0xe8>)
 80002de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80002e0:	2380      	movs	r3, #128	@ 0x80
 80002e2:	055b      	lsls	r3, r3, #21
 80002e4:	4013      	ands	r3, r2
 80002e6:	9304      	str	r3, [sp, #16]
 80002e8:	9b04      	ldr	r3, [sp, #16]

    /* Enable backup domain */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ea:	2380      	movs	r3, #128	@ 0x80
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	0018      	movs	r0, r3
 80002f0:	f002 fa94 	bl	800281c <HAL_PWREx_ControlVoltageScaling>
    HAL_PWR_EnableBkUpAccess();
 80002f4:	f002 fa86 	bl	8002804 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002f8:	4b20      	ldr	r3, [pc, #128]	@ (800037c <HAL_RTC_MspInit+0xe8>)
 80002fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80002fc:	4b1f      	ldr	r3, [pc, #124]	@ (800037c <HAL_RTC_MspInit+0xe8>)
 80002fe:	2118      	movs	r1, #24
 8000300:	438a      	bics	r2, r1
 8000302:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Reset previous RTC source clock */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000304:	ab06      	add	r3, sp, #24
 8000306:	2280      	movs	r2, #128	@ 0x80
 8000308:	0292      	lsls	r2, r2, #10
 800030a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_NONE;
 800030c:	ab06      	add	r3, sp, #24
 800030e:	2200      	movs	r2, #0
 8000310:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000312:	ab06      	add	r3, sp, #24
 8000314:	0018      	movs	r0, r3
 8000316:	f001 fc63 	bl	8001be0 <HAL_RCCEx_PeriphCLKConfig>

    /* Configure LSE/LSI as RTC clock source */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 800031a:	ab19      	add	r3, sp, #100	@ 0x64
 800031c:	220c      	movs	r2, #12
 800031e:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000320:	ab19      	add	r3, sp, #100	@ 0x64
 8000322:	2200      	movs	r2, #0
 8000324:	621a      	str	r2, [r3, #32]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000326:	ab19      	add	r3, sp, #100	@ 0x64
 8000328:	2201      	movs	r2, #1
 800032a:	609a      	str	r2, [r3, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 800032c:	ab19      	add	r3, sp, #100	@ 0x64
 800032e:	2200      	movs	r2, #0
 8000330:	619a      	str	r2, [r3, #24]
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000332:	ab19      	add	r3, sp, #100	@ 0x64
 8000334:	0018      	movs	r0, r3
 8000336:	f000 f9af 	bl	8000698 <HAL_RCC_OscConfig>

    /* Set LSE as source clock */
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800033a:	ab06      	add	r3, sp, #24
 800033c:	2280      	movs	r2, #128	@ 0x80
 800033e:	0052      	lsls	r2, r2, #1
 8000340:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000342:	ab06      	add	r3, sp, #24
 8000344:	0018      	movs	r0, r3
 8000346:	f001 fc4b 	bl	8001be0 <HAL_RCCEx_PeriphCLKConfig>

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800034a:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <HAL_RTC_MspInit+0xe8>)
 800034c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800034e:	4b0b      	ldr	r3, [pc, #44]	@ (800037c <HAL_RTC_MspInit+0xe8>)
 8000350:	2180      	movs	r1, #128	@ 0x80
 8000352:	0209      	lsls	r1, r1, #8
 8000354:	430a      	orrs	r2, r1
 8000356:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000358:	4b08      	ldr	r3, [pc, #32]	@ (800037c <HAL_RTC_MspInit+0xe8>)
 800035a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800035c:	4b07      	ldr	r3, [pc, #28]	@ (800037c <HAL_RTC_MspInit+0xe8>)
 800035e:	2180      	movs	r1, #128	@ 0x80
 8000360:	00c9      	lsls	r1, r1, #3
 8000362:	430a      	orrs	r2, r1
 8000364:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000366:	4b05      	ldr	r3, [pc, #20]	@ (800037c <HAL_RTC_MspInit+0xe8>)
 8000368:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800036a:	2380      	movs	r3, #128	@ 0x80
 800036c:	00db      	lsls	r3, r3, #3
 800036e:	4013      	ands	r3, r2
 8000370:	9303      	str	r3, [sp, #12]
 8000372:	9b03      	ldr	r3, [sp, #12]
}
 8000374:	46c0      	nop			@ (mov r8, r8)
 8000376:	b029      	add	sp, #164	@ 0xa4
 8000378:	bd00      	pop	{pc}
 800037a:	46c0      	nop			@ (mov r8, r8)
 800037c:	40021000 	.word	0x40021000

08000380 <Reset_Handler>:
 8000380:	480d      	ldr	r0, [pc, #52]	@ (80003b8 <LoopForever+0x2>)
 8000382:	4685      	mov	sp, r0
 8000384:	f000 f825 	bl	80003d2 <SystemInit>
 8000388:	480c      	ldr	r0, [pc, #48]	@ (80003bc <LoopForever+0x6>)
 800038a:	490d      	ldr	r1, [pc, #52]	@ (80003c0 <LoopForever+0xa>)
 800038c:	4a0d      	ldr	r2, [pc, #52]	@ (80003c4 <LoopForever+0xe>)
 800038e:	2300      	movs	r3, #0
 8000390:	e002      	b.n	8000398 <LoopCopyDataInit>

08000392 <CopyDataInit>:
 8000392:	58d4      	ldr	r4, [r2, r3]
 8000394:	50c4      	str	r4, [r0, r3]
 8000396:	3304      	adds	r3, #4

08000398 <LoopCopyDataInit>:
 8000398:	18c4      	adds	r4, r0, r3
 800039a:	428c      	cmp	r4, r1
 800039c:	d3f9      	bcc.n	8000392 <CopyDataInit>
 800039e:	4a0a      	ldr	r2, [pc, #40]	@ (80003c8 <LoopForever+0x12>)
 80003a0:	4c0a      	ldr	r4, [pc, #40]	@ (80003cc <LoopForever+0x16>)
 80003a2:	2300      	movs	r3, #0
 80003a4:	e001      	b.n	80003aa <LoopFillZerobss>

080003a6 <FillZerobss>:
 80003a6:	6013      	str	r3, [r2, #0]
 80003a8:	3204      	adds	r2, #4

080003aa <LoopFillZerobss>:
 80003aa:	42a2      	cmp	r2, r4
 80003ac:	d3fb      	bcc.n	80003a6 <FillZerobss>
 80003ae:	f002 fff9 	bl	80033a4 <__libc_init_array>
 80003b2:	f7ff feef 	bl	8000194 <main>

080003b6 <LoopForever>:
 80003b6:	e7fe      	b.n	80003b6 <LoopForever>
 80003b8:	20024000 	.word	0x20024000
 80003bc:	20000000 	.word	0x20000000
 80003c0:	2000001c 	.word	0x2000001c
 80003c4:	08003464 	.word	0x08003464
 80003c8:	2000001c 	.word	0x2000001c
 80003cc:	200001dc 	.word	0x200001dc

080003d0 <ADC1_COMP_IRQHandler>:
 80003d0:	e7fe      	b.n	80003d0 <ADC1_COMP_IRQHandler>

080003d2 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d2:	46c0      	nop			@ (mov r8, r8)
 80003d4:	4770      	bx	lr
	...

080003d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003d8:	b500      	push	{lr}
 80003da:	b083      	sub	sp, #12
  HAL_StatusTypeDef  status = HAL_OK;
 80003dc:	466b      	mov	r3, sp
 80003de:	3307      	adds	r3, #7
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <HAL_Init+0x40>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <HAL_Init+0x40>)
 80003ea:	2180      	movs	r1, #128	@ 0x80
 80003ec:	0049      	lsls	r1, r1, #1
 80003ee:	430a      	orrs	r2, r1
 80003f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80003f2:	2000      	movs	r0, #0
 80003f4:	f000 f812 	bl	800041c <HAL_InitTick>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d004      	beq.n	8000406 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80003fc:	466b      	mov	r3, sp
 80003fe:	3307      	adds	r3, #7
 8000400:	2201      	movs	r2, #1
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	e001      	b.n	800040a <HAL_Init+0x32>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000406:	f7ff feeb 	bl	80001e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800040a:	466b      	mov	r3, sp
 800040c:	3307      	adds	r3, #7
 800040e:	781b      	ldrb	r3, [r3, #0]
}
 8000410:	0018      	movs	r0, r3
 8000412:	b003      	add	sp, #12
 8000414:	bd00      	pop	{pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	40022000 	.word	0x40022000

0800041c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800041c:	b510      	push	{r4, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	9001      	str	r0, [sp, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000422:	230f      	movs	r3, #15
 8000424:	446b      	add	r3, sp
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800042a:	4b1d      	ldr	r3, [pc, #116]	@ (80004a0 <HAL_InitTick+0x84>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d02b      	beq.n	800048a <HAL_InitTick+0x6e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000432:	4b1c      	ldr	r3, [pc, #112]	@ (80004a4 <HAL_InitTick+0x88>)
 8000434:	681c      	ldr	r4, [r3, #0]
 8000436:	4b1a      	ldr	r3, [pc, #104]	@ (80004a0 <HAL_InitTick+0x84>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	0019      	movs	r1, r3
 800043c:	23fa      	movs	r3, #250	@ 0xfa
 800043e:	0098      	lsls	r0, r3, #2
 8000440:	f7ff fe3c 	bl	80000bc <__udivsi3>
 8000444:	0003      	movs	r3, r0
 8000446:	0019      	movs	r1, r3
 8000448:	0020      	movs	r0, r4
 800044a:	f7ff fe37 	bl	80000bc <__udivsi3>
 800044e:	0003      	movs	r3, r0
 8000450:	0018      	movs	r0, r3
 8000452:	f000 f915 	bl	8000680 <HAL_SYSTICK_Config>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d112      	bne.n	8000480 <HAL_InitTick+0x64>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800045a:	9b01      	ldr	r3, [sp, #4]
 800045c:	2b03      	cmp	r3, #3
 800045e:	d80a      	bhi.n	8000476 <HAL_InitTick+0x5a>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000460:	9901      	ldr	r1, [sp, #4]
 8000462:	2301      	movs	r3, #1
 8000464:	425b      	negs	r3, r3
 8000466:	2200      	movs	r2, #0
 8000468:	0018      	movs	r0, r3
 800046a:	f000 f8e5 	bl	8000638 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800046e:	4b0e      	ldr	r3, [pc, #56]	@ (80004a8 <HAL_InitTick+0x8c>)
 8000470:	9a01      	ldr	r2, [sp, #4]
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	e00d      	b.n	8000492 <HAL_InitTick+0x76>
      }
      else
      {
        status = HAL_ERROR;
 8000476:	230f      	movs	r3, #15
 8000478:	446b      	add	r3, sp
 800047a:	2201      	movs	r2, #1
 800047c:	701a      	strb	r2, [r3, #0]
 800047e:	e008      	b.n	8000492 <HAL_InitTick+0x76>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000480:	230f      	movs	r3, #15
 8000482:	446b      	add	r3, sp
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
 8000488:	e003      	b.n	8000492 <HAL_InitTick+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 800048a:	230f      	movs	r3, #15
 800048c:	446b      	add	r3, sp
 800048e:	2201      	movs	r2, #1
 8000490:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000492:	230f      	movs	r3, #15
 8000494:	446b      	add	r3, sp
 8000496:	781b      	ldrb	r3, [r3, #0]
}
 8000498:	0018      	movs	r0, r3
 800049a:	b004      	add	sp, #16
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	20000008 	.word	0x20000008
 80004a4:	20000000 	.word	0x20000000
 80004a8:	20000004 	.word	0x20000004

080004ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80004ac:	4b04      	ldr	r3, [pc, #16]	@ (80004c0 <HAL_IncTick+0x14>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	001a      	movs	r2, r3
 80004b2:	4b04      	ldr	r3, [pc, #16]	@ (80004c4 <HAL_IncTick+0x18>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	18d2      	adds	r2, r2, r3
 80004b8:	4b02      	ldr	r3, [pc, #8]	@ (80004c4 <HAL_IncTick+0x18>)
 80004ba:	601a      	str	r2, [r3, #0]
}
 80004bc:	46c0      	nop			@ (mov r8, r8)
 80004be:	4770      	bx	lr
 80004c0:	20000008 	.word	0x20000008
 80004c4:	20000038 	.word	0x20000038

080004c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004c8:	4b01      	ldr	r3, [pc, #4]	@ (80004d0 <HAL_GetTick+0x8>)
 80004ca:	681b      	ldr	r3, [r3, #0]
}
 80004cc:	0018      	movs	r0, r3
 80004ce:	4770      	bx	lr
 80004d0:	20000038 	.word	0x20000038

080004d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004d4:	b082      	sub	sp, #8
 80004d6:	0002      	movs	r2, r0
 80004d8:	466b      	mov	r3, sp
 80004da:	3307      	adds	r3, #7
 80004dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80004de:	466b      	mov	r3, sp
 80004e0:	3307      	adds	r3, #7
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80004e6:	d80a      	bhi.n	80004fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004e8:	466b      	mov	r3, sp
 80004ea:	3307      	adds	r3, #7
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	001a      	movs	r2, r3
 80004f0:	231f      	movs	r3, #31
 80004f2:	401a      	ands	r2, r3
 80004f4:	4b03      	ldr	r3, [pc, #12]	@ (8000504 <__NVIC_EnableIRQ+0x30>)
 80004f6:	2101      	movs	r1, #1
 80004f8:	4091      	lsls	r1, r2
 80004fa:	000a      	movs	r2, r1
 80004fc:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	b002      	add	sp, #8
 8000502:	4770      	bx	lr
 8000504:	e000e100 	.word	0xe000e100

08000508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000508:	b510      	push	{r4, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	0002      	movs	r2, r0
 800050e:	9100      	str	r1, [sp, #0]
 8000510:	466b      	mov	r3, sp
 8000512:	3307      	adds	r3, #7
 8000514:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000516:	466b      	mov	r3, sp
 8000518:	3307      	adds	r3, #7
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b7f      	cmp	r3, #127	@ 0x7f
 800051e:	d82c      	bhi.n	800057a <__NVIC_SetPriority+0x72>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000520:	4a32      	ldr	r2, [pc, #200]	@ (80005ec <__NVIC_SetPriority+0xe4>)
 8000522:	466b      	mov	r3, sp
 8000524:	3307      	adds	r3, #7
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b25b      	sxtb	r3, r3
 800052a:	089b      	lsrs	r3, r3, #2
 800052c:	33c0      	adds	r3, #192	@ 0xc0
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	589b      	ldr	r3, [r3, r2]
 8000532:	466a      	mov	r2, sp
 8000534:	3207      	adds	r2, #7
 8000536:	7812      	ldrb	r2, [r2, #0]
 8000538:	0011      	movs	r1, r2
 800053a:	2203      	movs	r2, #3
 800053c:	400a      	ands	r2, r1
 800053e:	00d2      	lsls	r2, r2, #3
 8000540:	21ff      	movs	r1, #255	@ 0xff
 8000542:	4091      	lsls	r1, r2
 8000544:	000a      	movs	r2, r1
 8000546:	43d2      	mvns	r2, r2
 8000548:	401a      	ands	r2, r3
 800054a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800054c:	9b00      	ldr	r3, [sp, #0]
 800054e:	019b      	lsls	r3, r3, #6
 8000550:	22ff      	movs	r2, #255	@ 0xff
 8000552:	401a      	ands	r2, r3
 8000554:	466b      	mov	r3, sp
 8000556:	3307      	adds	r3, #7
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	0018      	movs	r0, r3
 800055c:	2303      	movs	r3, #3
 800055e:	4003      	ands	r3, r0
 8000560:	00db      	lsls	r3, r3, #3
 8000562:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000564:	4821      	ldr	r0, [pc, #132]	@ (80005ec <__NVIC_SetPriority+0xe4>)
 8000566:	466b      	mov	r3, sp
 8000568:	3307      	adds	r3, #7
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	b25b      	sxtb	r3, r3
 800056e:	089b      	lsrs	r3, r3, #2
 8000570:	430a      	orrs	r2, r1
 8000572:	33c0      	adds	r3, #192	@ 0xc0
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000578:	e035      	b.n	80005e6 <__NVIC_SetPriority+0xde>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800057a:	4a1d      	ldr	r2, [pc, #116]	@ (80005f0 <__NVIC_SetPriority+0xe8>)
 800057c:	466b      	mov	r3, sp
 800057e:	3307      	adds	r3, #7
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	0019      	movs	r1, r3
 8000584:	230f      	movs	r3, #15
 8000586:	400b      	ands	r3, r1
 8000588:	3b08      	subs	r3, #8
 800058a:	089b      	lsrs	r3, r3, #2
 800058c:	3306      	adds	r3, #6
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	18d3      	adds	r3, r2, r3
 8000592:	3304      	adds	r3, #4
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	466a      	mov	r2, sp
 8000598:	3207      	adds	r2, #7
 800059a:	7812      	ldrb	r2, [r2, #0]
 800059c:	0011      	movs	r1, r2
 800059e:	2203      	movs	r2, #3
 80005a0:	400a      	ands	r2, r1
 80005a2:	00d2      	lsls	r2, r2, #3
 80005a4:	21ff      	movs	r1, #255	@ 0xff
 80005a6:	4091      	lsls	r1, r2
 80005a8:	000a      	movs	r2, r1
 80005aa:	43d2      	mvns	r2, r2
 80005ac:	401a      	ands	r2, r3
 80005ae:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005b0:	9b00      	ldr	r3, [sp, #0]
 80005b2:	019b      	lsls	r3, r3, #6
 80005b4:	22ff      	movs	r2, #255	@ 0xff
 80005b6:	401a      	ands	r2, r3
 80005b8:	466b      	mov	r3, sp
 80005ba:	3307      	adds	r3, #7
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	0018      	movs	r0, r3
 80005c0:	2303      	movs	r3, #3
 80005c2:	4003      	ands	r3, r0
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005c8:	4809      	ldr	r0, [pc, #36]	@ (80005f0 <__NVIC_SetPriority+0xe8>)
 80005ca:	466b      	mov	r3, sp
 80005cc:	3307      	adds	r3, #7
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	001c      	movs	r4, r3
 80005d2:	230f      	movs	r3, #15
 80005d4:	4023      	ands	r3, r4
 80005d6:	3b08      	subs	r3, #8
 80005d8:	089b      	lsrs	r3, r3, #2
 80005da:	430a      	orrs	r2, r1
 80005dc:	3306      	adds	r3, #6
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	18c3      	adds	r3, r0, r3
 80005e2:	3304      	adds	r3, #4
 80005e4:	601a      	str	r2, [r3, #0]
}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	b002      	add	sp, #8
 80005ea:	bd10      	pop	{r4, pc}
 80005ec:	e000e100 	.word	0xe000e100
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005f4:	b500      	push	{lr}
 80005f6:	b083      	sub	sp, #12
 80005f8:	9001      	str	r0, [sp, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005fa:	9b01      	ldr	r3, [sp, #4]
 80005fc:	1e5a      	subs	r2, r3, #1
 80005fe:	2380      	movs	r3, #128	@ 0x80
 8000600:	045b      	lsls	r3, r3, #17
 8000602:	429a      	cmp	r2, r3
 8000604:	d301      	bcc.n	800060a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000606:	2301      	movs	r3, #1
 8000608:	e010      	b.n	800062c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <SysTick_Config+0x40>)
 800060c:	9a01      	ldr	r2, [sp, #4]
 800060e:	3a01      	subs	r2, #1
 8000610:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000612:	2301      	movs	r3, #1
 8000614:	425b      	negs	r3, r3
 8000616:	2103      	movs	r1, #3
 8000618:	0018      	movs	r0, r3
 800061a:	f7ff ff75 	bl	8000508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800061e:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <SysTick_Config+0x40>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000624:	4b03      	ldr	r3, [pc, #12]	@ (8000634 <SysTick_Config+0x40>)
 8000626:	2207      	movs	r2, #7
 8000628:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800062a:	2300      	movs	r3, #0
}
 800062c:	0018      	movs	r0, r3
 800062e:	b003      	add	sp, #12
 8000630:	bd00      	pop	{pc}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	e000e010 	.word	0xe000e010

08000638 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000638:	b500      	push	{lr}
 800063a:	b085      	sub	sp, #20
 800063c:	9102      	str	r1, [sp, #8]
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	230f      	movs	r3, #15
 8000642:	446b      	add	r3, sp
 8000644:	1c02      	adds	r2, r0, #0
 8000646:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000648:	9a02      	ldr	r2, [sp, #8]
 800064a:	230f      	movs	r3, #15
 800064c:	446b      	add	r3, sp
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b25b      	sxtb	r3, r3
 8000652:	0011      	movs	r1, r2
 8000654:	0018      	movs	r0, r3
 8000656:	f7ff ff57 	bl	8000508 <__NVIC_SetPriority>
}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	b005      	add	sp, #20
 800065e:	bd00      	pop	{pc}

08000660 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000660:	b500      	push	{lr}
 8000662:	b083      	sub	sp, #12
 8000664:	0002      	movs	r2, r0
 8000666:	466b      	mov	r3, sp
 8000668:	3307      	adds	r3, #7
 800066a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800066c:	466b      	mov	r3, sp
 800066e:	3307      	adds	r3, #7
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b25b      	sxtb	r3, r3
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff ff2d 	bl	80004d4 <__NVIC_EnableIRQ>
}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	b003      	add	sp, #12
 800067e:	bd00      	pop	{pc}

08000680 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000680:	b500      	push	{lr}
 8000682:	b083      	sub	sp, #12
 8000684:	9001      	str	r0, [sp, #4]
  return SysTick_Config(TicksNumb);
 8000686:	9b01      	ldr	r3, [sp, #4]
 8000688:	0018      	movs	r0, r3
 800068a:	f7ff ffb3 	bl	80005f4 <SysTick_Config>
 800068e:	0003      	movs	r3, r0
}
 8000690:	0018      	movs	r0, r3
 8000692:	b003      	add	sp, #12
 8000694:	bd00      	pop	{pc}
	...

08000698 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000698:	b500      	push	{lr}
 800069a:	b089      	sub	sp, #36	@ 0x24
 800069c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800069e:	9b01      	ldr	r3, [sp, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d102      	bne.n	80006aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	f000 fb4f 	bl	8000d48 <HAL_RCC_OscConfig+0x6b0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006aa:	9b01      	ldr	r3, [sp, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2201      	movs	r2, #1
 80006b0:	4013      	ands	r3, r2
 80006b2:	d100      	bne.n	80006b6 <HAL_RCC_OscConfig+0x1e>
 80006b4:	e07c      	b.n	80007b0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80006b6:	4bc3      	ldr	r3, [pc, #780]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	2238      	movs	r2, #56	@ 0x38
 80006bc:	4013      	ands	r3, r2
 80006be:	9306      	str	r3, [sp, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80006c0:	4bc0      	ldr	r3, [pc, #768]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	2203      	movs	r2, #3
 80006c6:	4013      	ands	r3, r2
 80006c8:	9305      	str	r3, [sp, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80006ca:	9b06      	ldr	r3, [sp, #24]
 80006cc:	2b10      	cmp	r3, #16
 80006ce:	d102      	bne.n	80006d6 <HAL_RCC_OscConfig+0x3e>
 80006d0:	9b05      	ldr	r3, [sp, #20]
 80006d2:	2b03      	cmp	r3, #3
 80006d4:	d002      	beq.n	80006dc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80006d6:	9b06      	ldr	r3, [sp, #24]
 80006d8:	2b08      	cmp	r3, #8
 80006da:	d10b      	bne.n	80006f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006dc:	4bb9      	ldr	r3, [pc, #740]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	2380      	movs	r3, #128	@ 0x80
 80006e2:	029b      	lsls	r3, r3, #10
 80006e4:	4013      	ands	r3, r2
 80006e6:	d062      	beq.n	80007ae <HAL_RCC_OscConfig+0x116>
 80006e8:	9b01      	ldr	r3, [sp, #4]
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d15e      	bne.n	80007ae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e329      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006f4:	9b01      	ldr	r3, [sp, #4]
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	2380      	movs	r3, #128	@ 0x80
 80006fa:	025b      	lsls	r3, r3, #9
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d107      	bne.n	8000710 <HAL_RCC_OscConfig+0x78>
 8000700:	4bb0      	ldr	r3, [pc, #704]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4baf      	ldr	r3, [pc, #700]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000706:	2180      	movs	r1, #128	@ 0x80
 8000708:	0249      	lsls	r1, r1, #9
 800070a:	430a      	orrs	r2, r1
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	e020      	b.n	8000752 <HAL_RCC_OscConfig+0xba>
 8000710:	9b01      	ldr	r3, [sp, #4]
 8000712:	685a      	ldr	r2, [r3, #4]
 8000714:	23a0      	movs	r3, #160	@ 0xa0
 8000716:	02db      	lsls	r3, r3, #11
 8000718:	429a      	cmp	r2, r3
 800071a:	d10e      	bne.n	800073a <HAL_RCC_OscConfig+0xa2>
 800071c:	4ba9      	ldr	r3, [pc, #676]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4ba8      	ldr	r3, [pc, #672]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000722:	2180      	movs	r1, #128	@ 0x80
 8000724:	02c9      	lsls	r1, r1, #11
 8000726:	430a      	orrs	r2, r1
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	4ba6      	ldr	r3, [pc, #664]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4ba5      	ldr	r3, [pc, #660]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000730:	2180      	movs	r1, #128	@ 0x80
 8000732:	0249      	lsls	r1, r1, #9
 8000734:	430a      	orrs	r2, r1
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	e00b      	b.n	8000752 <HAL_RCC_OscConfig+0xba>
 800073a:	4ba2      	ldr	r3, [pc, #648]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4ba1      	ldr	r3, [pc, #644]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000740:	49a1      	ldr	r1, [pc, #644]	@ (80009c8 <HAL_RCC_OscConfig+0x330>)
 8000742:	400a      	ands	r2, r1
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	4b9f      	ldr	r3, [pc, #636]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b9e      	ldr	r3, [pc, #632]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 800074c:	499f      	ldr	r1, [pc, #636]	@ (80009cc <HAL_RCC_OscConfig+0x334>)
 800074e:	400a      	ands	r2, r1
 8000750:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000752:	9b01      	ldr	r3, [sp, #4]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d014      	beq.n	8000784 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800075a:	f7ff feb5 	bl	80004c8 <HAL_GetTick>
 800075e:	0003      	movs	r3, r0
 8000760:	9304      	str	r3, [sp, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000762:	e008      	b.n	8000776 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000764:	f7ff feb0 	bl	80004c8 <HAL_GetTick>
 8000768:	0002      	movs	r2, r0
 800076a:	9b04      	ldr	r3, [sp, #16]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	2b64      	cmp	r3, #100	@ 0x64
 8000770:	d901      	bls.n	8000776 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000772:	2303      	movs	r3, #3
 8000774:	e2e8      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000776:	4b93      	ldr	r3, [pc, #588]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	2380      	movs	r3, #128	@ 0x80
 800077c:	029b      	lsls	r3, r3, #10
 800077e:	4013      	ands	r3, r2
 8000780:	d0f0      	beq.n	8000764 <HAL_RCC_OscConfig+0xcc>
 8000782:	e015      	b.n	80007b0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000784:	f7ff fea0 	bl	80004c8 <HAL_GetTick>
 8000788:	0003      	movs	r3, r0
 800078a:	9304      	str	r3, [sp, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800078c:	e008      	b.n	80007a0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800078e:	f7ff fe9b 	bl	80004c8 <HAL_GetTick>
 8000792:	0002      	movs	r2, r0
 8000794:	9b04      	ldr	r3, [sp, #16]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	2b64      	cmp	r3, #100	@ 0x64
 800079a:	d901      	bls.n	80007a0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800079c:	2303      	movs	r3, #3
 800079e:	e2d3      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80007a0:	4b88      	ldr	r3, [pc, #544]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	2380      	movs	r3, #128	@ 0x80
 80007a6:	029b      	lsls	r3, r3, #10
 80007a8:	4013      	ands	r3, r2
 80007aa:	d1f0      	bne.n	800078e <HAL_RCC_OscConfig+0xf6>
 80007ac:	e000      	b.n	80007b0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007b0:	9b01      	ldr	r3, [sp, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2202      	movs	r2, #2
 80007b6:	4013      	ands	r3, r2
 80007b8:	d100      	bne.n	80007bc <HAL_RCC_OscConfig+0x124>
 80007ba:	e099      	b.n	80008f0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80007bc:	4b81      	ldr	r3, [pc, #516]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	2238      	movs	r2, #56	@ 0x38
 80007c2:	4013      	ands	r3, r2
 80007c4:	9306      	str	r3, [sp, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80007c6:	4b7f      	ldr	r3, [pc, #508]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	2203      	movs	r2, #3
 80007cc:	4013      	ands	r3, r2
 80007ce:	9305      	str	r3, [sp, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80007d0:	9b06      	ldr	r3, [sp, #24]
 80007d2:	2b10      	cmp	r3, #16
 80007d4:	d102      	bne.n	80007dc <HAL_RCC_OscConfig+0x144>
 80007d6:	9b05      	ldr	r3, [sp, #20]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d002      	beq.n	80007e2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80007dc:	9b06      	ldr	r3, [sp, #24]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d135      	bne.n	800084e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80007e2:	4b78      	ldr	r3, [pc, #480]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	2380      	movs	r3, #128	@ 0x80
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	4013      	ands	r3, r2
 80007ec:	d005      	beq.n	80007fa <HAL_RCC_OscConfig+0x162>
 80007ee:	9b01      	ldr	r3, [sp, #4]
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d101      	bne.n	80007fa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e2a6      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007fa:	4b72      	ldr	r3, [pc, #456]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	4a74      	ldr	r2, [pc, #464]	@ (80009d0 <HAL_RCC_OscConfig+0x338>)
 8000800:	4013      	ands	r3, r2
 8000802:	0019      	movs	r1, r3
 8000804:	9b01      	ldr	r3, [sp, #4]
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	021a      	lsls	r2, r3, #8
 800080a:	4b6e      	ldr	r3, [pc, #440]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 800080c:	430a      	orrs	r2, r1
 800080e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000810:	9b06      	ldr	r3, [sp, #24]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d112      	bne.n	800083c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000816:	4b6b      	ldr	r3, [pc, #428]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a6e      	ldr	r2, [pc, #440]	@ (80009d4 <HAL_RCC_OscConfig+0x33c>)
 800081c:	4013      	ands	r3, r2
 800081e:	0019      	movs	r1, r3
 8000820:	9b01      	ldr	r3, [sp, #4]
 8000822:	691a      	ldr	r2, [r3, #16]
 8000824:	4b67      	ldr	r3, [pc, #412]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000826:	430a      	orrs	r2, r1
 8000828:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800082a:	4b66      	ldr	r3, [pc, #408]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	0adb      	lsrs	r3, r3, #11
 8000830:	2207      	movs	r2, #7
 8000832:	4013      	ands	r3, r2
 8000834:	4a68      	ldr	r2, [pc, #416]	@ (80009d8 <HAL_RCC_OscConfig+0x340>)
 8000836:	40da      	lsrs	r2, r3
 8000838:	4b68      	ldr	r3, [pc, #416]	@ (80009dc <HAL_RCC_OscConfig+0x344>)
 800083a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800083c:	4b68      	ldr	r3, [pc, #416]	@ (80009e0 <HAL_RCC_OscConfig+0x348>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff fdeb 	bl	800041c <HAL_InitTick>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d051      	beq.n	80008ee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e27c      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800084e:	9b01      	ldr	r3, [sp, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d030      	beq.n	80008b8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000856:	4b5b      	ldr	r3, [pc, #364]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a5e      	ldr	r2, [pc, #376]	@ (80009d4 <HAL_RCC_OscConfig+0x33c>)
 800085c:	4013      	ands	r3, r2
 800085e:	0019      	movs	r1, r3
 8000860:	9b01      	ldr	r3, [sp, #4]
 8000862:	691a      	ldr	r2, [r3, #16]
 8000864:	4b57      	ldr	r3, [pc, #348]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000866:	430a      	orrs	r2, r1
 8000868:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800086a:	4b56      	ldr	r3, [pc, #344]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	4b55      	ldr	r3, [pc, #340]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	0049      	lsls	r1, r1, #1
 8000874:	430a      	orrs	r2, r1
 8000876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000878:	f7ff fe26 	bl	80004c8 <HAL_GetTick>
 800087c:	0003      	movs	r3, r0
 800087e:	9304      	str	r3, [sp, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000880:	e008      	b.n	8000894 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000882:	f7ff fe21 	bl	80004c8 <HAL_GetTick>
 8000886:	0002      	movs	r2, r0
 8000888:	9b04      	ldr	r3, [sp, #16]
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	2b02      	cmp	r3, #2
 800088e:	d901      	bls.n	8000894 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000890:	2303      	movs	r3, #3
 8000892:	e259      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000894:	4b4b      	ldr	r3, [pc, #300]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	2380      	movs	r3, #128	@ 0x80
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4013      	ands	r3, r2
 800089e:	d0f0      	beq.n	8000882 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008a0:	4b48      	ldr	r3, [pc, #288]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	4a4a      	ldr	r2, [pc, #296]	@ (80009d0 <HAL_RCC_OscConfig+0x338>)
 80008a6:	4013      	ands	r3, r2
 80008a8:	0019      	movs	r1, r3
 80008aa:	9b01      	ldr	r3, [sp, #4]
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	021a      	lsls	r2, r3, #8
 80008b0:	4b44      	ldr	r3, [pc, #272]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80008b2:	430a      	orrs	r2, r1
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	e01b      	b.n	80008f0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80008b8:	4b42      	ldr	r3, [pc, #264]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b41      	ldr	r3, [pc, #260]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80008be:	4949      	ldr	r1, [pc, #292]	@ (80009e4 <HAL_RCC_OscConfig+0x34c>)
 80008c0:	400a      	ands	r2, r1
 80008c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008c4:	f7ff fe00 	bl	80004c8 <HAL_GetTick>
 80008c8:	0003      	movs	r3, r0
 80008ca:	9304      	str	r3, [sp, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80008cc:	e008      	b.n	80008e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008ce:	f7ff fdfb 	bl	80004c8 <HAL_GetTick>
 80008d2:	0002      	movs	r2, r0
 80008d4:	9b04      	ldr	r3, [sp, #16]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d901      	bls.n	80008e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80008dc:	2303      	movs	r3, #3
 80008de:	e233      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80008e0:	4b38      	ldr	r3, [pc, #224]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	2380      	movs	r3, #128	@ 0x80
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	4013      	ands	r3, r2
 80008ea:	d1f0      	bne.n	80008ce <HAL_RCC_OscConfig+0x236>
 80008ec:	e000      	b.n	80008f0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80008ee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008f0:	9b01      	ldr	r3, [sp, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2208      	movs	r2, #8
 80008f6:	4013      	ands	r3, r2
 80008f8:	d047      	beq.n	800098a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80008fa:	4b32      	ldr	r3, [pc, #200]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	2238      	movs	r2, #56	@ 0x38
 8000900:	4013      	ands	r3, r2
 8000902:	2b18      	cmp	r3, #24
 8000904:	d10a      	bne.n	800091c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000906:	4b2f      	ldr	r3, [pc, #188]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090a:	2202      	movs	r2, #2
 800090c:	4013      	ands	r3, r2
 800090e:	d03c      	beq.n	800098a <HAL_RCC_OscConfig+0x2f2>
 8000910:	9b01      	ldr	r3, [sp, #4]
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d138      	bne.n	800098a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	e215      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800091c:	9b01      	ldr	r3, [sp, #4]
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d019      	beq.n	8000958 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000924:	4b27      	ldr	r3, [pc, #156]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000926:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000928:	4b26      	ldr	r3, [pc, #152]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 800092a:	2101      	movs	r1, #1
 800092c:	430a      	orrs	r2, r1
 800092e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000930:	f7ff fdca 	bl	80004c8 <HAL_GetTick>
 8000934:	0003      	movs	r3, r0
 8000936:	9304      	str	r3, [sp, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000938:	e008      	b.n	800094c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800093a:	f7ff fdc5 	bl	80004c8 <HAL_GetTick>
 800093e:	0002      	movs	r2, r0
 8000940:	9b04      	ldr	r3, [sp, #16]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	2b02      	cmp	r3, #2
 8000946:	d901      	bls.n	800094c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000948:	2303      	movs	r3, #3
 800094a:	e1fd      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800094c:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 800094e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000950:	2202      	movs	r2, #2
 8000952:	4013      	ands	r3, r2
 8000954:	d0f1      	beq.n	800093a <HAL_RCC_OscConfig+0x2a2>
 8000956:	e018      	b.n	800098a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000958:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 800095a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800095c:	4b19      	ldr	r3, [pc, #100]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 800095e:	2101      	movs	r1, #1
 8000960:	438a      	bics	r2, r1
 8000962:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000964:	f7ff fdb0 	bl	80004c8 <HAL_GetTick>
 8000968:	0003      	movs	r3, r0
 800096a:	9304      	str	r3, [sp, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800096c:	e008      	b.n	8000980 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800096e:	f7ff fdab 	bl	80004c8 <HAL_GetTick>
 8000972:	0002      	movs	r2, r0
 8000974:	9b04      	ldr	r3, [sp, #16]
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	2b02      	cmp	r3, #2
 800097a:	d901      	bls.n	8000980 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800097c:	2303      	movs	r3, #3
 800097e:	e1e3      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000980:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 8000982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000984:	2202      	movs	r2, #2
 8000986:	4013      	ands	r3, r2
 8000988:	d1f1      	bne.n	800096e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800098a:	9b01      	ldr	r3, [sp, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2204      	movs	r2, #4
 8000990:	4013      	ands	r3, r2
 8000992:	d100      	bne.n	8000996 <HAL_RCC_OscConfig+0x2fe>
 8000994:	e0c6      	b.n	8000b24 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000996:	231f      	movs	r3, #31
 8000998:	446b      	add	r3, sp
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	2238      	movs	r2, #56	@ 0x38
 80009a4:	4013      	ands	r3, r2
 80009a6:	2b20      	cmp	r3, #32
 80009a8:	d11e      	bne.n	80009e8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_RCC_OscConfig+0x32c>)
 80009ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009ae:	2202      	movs	r2, #2
 80009b0:	4013      	ands	r3, r2
 80009b2:	d100      	bne.n	80009b6 <HAL_RCC_OscConfig+0x31e>
 80009b4:	e0b6      	b.n	8000b24 <HAL_RCC_OscConfig+0x48c>
 80009b6:	9b01      	ldr	r3, [sp, #4]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d000      	beq.n	80009c0 <HAL_RCC_OscConfig+0x328>
 80009be:	e0b1      	b.n	8000b24 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e1c1      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
 80009c4:	40021000 	.word	0x40021000
 80009c8:	fffeffff 	.word	0xfffeffff
 80009cc:	fffbffff 	.word	0xfffbffff
 80009d0:	ffff80ff 	.word	0xffff80ff
 80009d4:	ffffc7ff 	.word	0xffffc7ff
 80009d8:	00f42400 	.word	0x00f42400
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000004 	.word	0x20000004
 80009e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80009e8:	4bb5      	ldr	r3, [pc, #724]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 80009ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009ec:	2380      	movs	r3, #128	@ 0x80
 80009ee:	055b      	lsls	r3, r3, #21
 80009f0:	4013      	ands	r3, r2
 80009f2:	d101      	bne.n	80009f8 <HAL_RCC_OscConfig+0x360>
 80009f4:	2301      	movs	r3, #1
 80009f6:	e000      	b.n	80009fa <HAL_RCC_OscConfig+0x362>
 80009f8:	2300      	movs	r3, #0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d011      	beq.n	8000a22 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	4bb0      	ldr	r3, [pc, #704]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000a00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a02:	4baf      	ldr	r3, [pc, #700]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	0549      	lsls	r1, r1, #21
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a0c:	4bac      	ldr	r3, [pc, #688]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000a0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a10:	2380      	movs	r3, #128	@ 0x80
 8000a12:	055b      	lsls	r3, r3, #21
 8000a14:	4013      	ands	r3, r2
 8000a16:	9303      	str	r3, [sp, #12]
 8000a18:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8000a1a:	231f      	movs	r3, #31
 8000a1c:	446b      	add	r3, sp
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000a22:	4ba8      	ldr	r3, [pc, #672]	@ (8000cc4 <HAL_RCC_OscConfig+0x62c>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	2380      	movs	r3, #128	@ 0x80
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d11a      	bne.n	8000a64 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000a2e:	4ba5      	ldr	r3, [pc, #660]	@ (8000cc4 <HAL_RCC_OscConfig+0x62c>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	4ba4      	ldr	r3, [pc, #656]	@ (8000cc4 <HAL_RCC_OscConfig+0x62c>)
 8000a34:	2180      	movs	r1, #128	@ 0x80
 8000a36:	0049      	lsls	r1, r1, #1
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000a3c:	f7ff fd44 	bl	80004c8 <HAL_GetTick>
 8000a40:	0003      	movs	r3, r0
 8000a42:	9304      	str	r3, [sp, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000a44:	e008      	b.n	8000a58 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a46:	f7ff fd3f 	bl	80004c8 <HAL_GetTick>
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	9b04      	ldr	r3, [sp, #16]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d901      	bls.n	8000a58 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8000a54:	2303      	movs	r3, #3
 8000a56:	e177      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000a58:	4b9a      	ldr	r3, [pc, #616]	@ (8000cc4 <HAL_RCC_OscConfig+0x62c>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	2380      	movs	r3, #128	@ 0x80
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	d0f0      	beq.n	8000a46 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a64:	9b01      	ldr	r3, [sp, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d106      	bne.n	8000a7a <HAL_RCC_OscConfig+0x3e2>
 8000a6c:	4b94      	ldr	r3, [pc, #592]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000a6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000a70:	4b93      	ldr	r3, [pc, #588]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000a72:	2101      	movs	r1, #1
 8000a74:	430a      	orrs	r2, r1
 8000a76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000a78:	e01c      	b.n	8000ab4 <HAL_RCC_OscConfig+0x41c>
 8000a7a:	9b01      	ldr	r3, [sp, #4]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	2b05      	cmp	r3, #5
 8000a80:	d10c      	bne.n	8000a9c <HAL_RCC_OscConfig+0x404>
 8000a82:	4b8f      	ldr	r3, [pc, #572]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000a84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000a86:	4b8e      	ldr	r3, [pc, #568]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000a88:	2104      	movs	r1, #4
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000a8e:	4b8c      	ldr	r3, [pc, #560]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000a90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000a92:	4b8b      	ldr	r3, [pc, #556]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	430a      	orrs	r2, r1
 8000a98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000a9a:	e00b      	b.n	8000ab4 <HAL_RCC_OscConfig+0x41c>
 8000a9c:	4b88      	ldr	r3, [pc, #544]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000a9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000aa0:	4b87      	ldr	r3, [pc, #540]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	438a      	bics	r2, r1
 8000aa6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000aa8:	4b85      	ldr	r3, [pc, #532]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000aaa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000aac:	4b84      	ldr	r3, [pc, #528]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000aae:	2104      	movs	r1, #4
 8000ab0:	438a      	bics	r2, r1
 8000ab2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ab4:	9b01      	ldr	r3, [sp, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d014      	beq.n	8000ae6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000abc:	f7ff fd04 	bl	80004c8 <HAL_GetTick>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	9304      	str	r3, [sp, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ac4:	e009      	b.n	8000ada <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ac6:	f7ff fcff 	bl	80004c8 <HAL_GetTick>
 8000aca:	0002      	movs	r2, r0
 8000acc:	9b04      	ldr	r3, [sp, #16]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	4a7d      	ldr	r2, [pc, #500]	@ (8000cc8 <HAL_RCC_OscConfig+0x630>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d901      	bls.n	8000ada <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	e136      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ada:	4b79      	ldr	r3, [pc, #484]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ade:	2202      	movs	r2, #2
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	d0f0      	beq.n	8000ac6 <HAL_RCC_OscConfig+0x42e>
 8000ae4:	e013      	b.n	8000b0e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ae6:	f7ff fcef 	bl	80004c8 <HAL_GetTick>
 8000aea:	0003      	movs	r3, r0
 8000aec:	9304      	str	r3, [sp, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000aee:	e009      	b.n	8000b04 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000af0:	f7ff fcea 	bl	80004c8 <HAL_GetTick>
 8000af4:	0002      	movs	r2, r0
 8000af6:	9b04      	ldr	r3, [sp, #16]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	4a73      	ldr	r2, [pc, #460]	@ (8000cc8 <HAL_RCC_OscConfig+0x630>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d901      	bls.n	8000b04 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8000b00:	2303      	movs	r3, #3
 8000b02:	e121      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000b04:	4b6e      	ldr	r3, [pc, #440]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b08:	2202      	movs	r2, #2
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	d1f0      	bne.n	8000af0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000b0e:	231f      	movs	r3, #31
 8000b10:	446b      	add	r3, sp
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d105      	bne.n	8000b24 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000b18:	4b69      	ldr	r3, [pc, #420]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000b1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b1c:	4b68      	ldr	r3, [pc, #416]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000b1e:	496b      	ldr	r1, [pc, #428]	@ (8000ccc <HAL_RCC_OscConfig+0x634>)
 8000b20:	400a      	ands	r2, r1
 8000b22:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000b24:	9b01      	ldr	r3, [sp, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2220      	movs	r2, #32
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	d039      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000b2e:	9b01      	ldr	r3, [sp, #4]
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d01b      	beq.n	8000b6e <HAL_RCC_OscConfig+0x4d6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000b36:	4b62      	ldr	r3, [pc, #392]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	4b61      	ldr	r3, [pc, #388]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000b3c:	2180      	movs	r1, #128	@ 0x80
 8000b3e:	03c9      	lsls	r1, r1, #15
 8000b40:	430a      	orrs	r2, r1
 8000b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b44:	f7ff fcc0 	bl	80004c8 <HAL_GetTick>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	9304      	str	r3, [sp, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8000b4c:	e008      	b.n	8000b60 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b4e:	f7ff fcbb 	bl	80004c8 <HAL_GetTick>
 8000b52:	0002      	movs	r2, r0
 8000b54:	9b04      	ldr	r3, [sp, #16]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d901      	bls.n	8000b60 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	e0f3      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8000b60:	4b57      	ldr	r3, [pc, #348]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	2380      	movs	r3, #128	@ 0x80
 8000b66:	041b      	lsls	r3, r3, #16
 8000b68:	4013      	ands	r3, r2
 8000b6a:	d0f0      	beq.n	8000b4e <HAL_RCC_OscConfig+0x4b6>
 8000b6c:	e019      	b.n	8000ba2 <HAL_RCC_OscConfig+0x50a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000b6e:	4b54      	ldr	r3, [pc, #336]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4b53      	ldr	r3, [pc, #332]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000b74:	4956      	ldr	r1, [pc, #344]	@ (8000cd0 <HAL_RCC_OscConfig+0x638>)
 8000b76:	400a      	ands	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b7a:	f7ff fca5 	bl	80004c8 <HAL_GetTick>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	9304      	str	r3, [sp, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0x4fe>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b84:	f7ff fca0 	bl	80004c8 <HAL_GetTick>
 8000b88:	0002      	movs	r2, r0
 8000b8a:	9b04      	ldr	r3, [sp, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0x4fe>
        {
          return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e0d8      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8000b96:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	2380      	movs	r3, #128	@ 0x80
 8000b9c:	041b      	lsls	r3, r3, #16
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	d1f0      	bne.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000ba2:	9b01      	ldr	r3, [sp, #4]
 8000ba4:	6a1b      	ldr	r3, [r3, #32]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d100      	bne.n	8000bac <HAL_RCC_OscConfig+0x514>
 8000baa:	e0cc      	b.n	8000d46 <HAL_RCC_OscConfig+0x6ae>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bac:	4b44      	ldr	r3, [pc, #272]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	2238      	movs	r2, #56	@ 0x38
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	2b10      	cmp	r3, #16
 8000bb6:	d100      	bne.n	8000bba <HAL_RCC_OscConfig+0x522>
 8000bb8:	e07b      	b.n	8000cb2 <HAL_RCC_OscConfig+0x61a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000bba:	9b01      	ldr	r3, [sp, #4]
 8000bbc:	6a1b      	ldr	r3, [r3, #32]
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d156      	bne.n	8000c70 <HAL_RCC_OscConfig+0x5d8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000bc8:	4942      	ldr	r1, [pc, #264]	@ (8000cd4 <HAL_RCC_OscConfig+0x63c>)
 8000bca:	400a      	ands	r2, r1
 8000bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bce:	f7ff fc7b 	bl	80004c8 <HAL_GetTick>
 8000bd2:	0003      	movs	r3, r0
 8000bd4:	9304      	str	r3, [sp, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000bd6:	e008      	b.n	8000bea <HAL_RCC_OscConfig+0x552>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bd8:	f7ff fc76 	bl	80004c8 <HAL_GetTick>
 8000bdc:	0002      	movs	r2, r0
 8000bde:	9b04      	ldr	r3, [sp, #16]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d901      	bls.n	8000bea <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8000be6:	2303      	movs	r3, #3
 8000be8:	e0ae      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000bea:	4b35      	ldr	r3, [pc, #212]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	2380      	movs	r3, #128	@ 0x80
 8000bf0:	049b      	lsls	r3, r3, #18
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	d1f0      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bf6:	4b32      	ldr	r3, [pc, #200]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	4a37      	ldr	r2, [pc, #220]	@ (8000cd8 <HAL_RCC_OscConfig+0x640>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	0019      	movs	r1, r3
 8000c00:	9b01      	ldr	r3, [sp, #4]
 8000c02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c04:	9b01      	ldr	r3, [sp, #4]
 8000c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	9b01      	ldr	r3, [sp, #4]
 8000c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	431a      	orrs	r2, r3
 8000c12:	9b01      	ldr	r3, [sp, #4]
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	431a      	orrs	r2, r3
 8000c18:	9b01      	ldr	r3, [sp, #4]
 8000c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	9b01      	ldr	r3, [sp, #4]
 8000c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c22:	431a      	orrs	r2, r3
 8000c24:	4b26      	ldr	r3, [pc, #152]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000c26:	430a      	orrs	r2, r1
 8000c28:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c2a:	4b25      	ldr	r3, [pc, #148]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000c30:	2180      	movs	r1, #128	@ 0x80
 8000c32:	0449      	lsls	r1, r1, #17
 8000c34:	430a      	orrs	r2, r1
 8000c36:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8000c38:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000c3e:	2180      	movs	r1, #128	@ 0x80
 8000c40:	0549      	lsls	r1, r1, #21
 8000c42:	430a      	orrs	r2, r1
 8000c44:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c46:	f7ff fc3f 	bl	80004c8 <HAL_GetTick>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	9304      	str	r3, [sp, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c4e:	e008      	b.n	8000c62 <HAL_RCC_OscConfig+0x5ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c50:	f7ff fc3a 	bl	80004c8 <HAL_GetTick>
 8000c54:	0002      	movs	r2, r0
 8000c56:	9b04      	ldr	r3, [sp, #16]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d901      	bls.n	8000c62 <HAL_RCC_OscConfig+0x5ca>
          {
            return HAL_TIMEOUT;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e072      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c62:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	2380      	movs	r3, #128	@ 0x80
 8000c68:	049b      	lsls	r3, r3, #18
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d0f0      	beq.n	8000c50 <HAL_RCC_OscConfig+0x5b8>
 8000c6e:	e06a      	b.n	8000d46 <HAL_RCC_OscConfig+0x6ae>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000c76:	4917      	ldr	r1, [pc, #92]	@ (8000cd4 <HAL_RCC_OscConfig+0x63c>)
 8000c78:	400a      	ands	r2, r1
 8000c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fc24 	bl	80004c8 <HAL_GetTick>
 8000c80:	0003      	movs	r3, r0
 8000c82:	9304      	str	r3, [sp, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000c84:	e008      	b.n	8000c98 <HAL_RCC_OscConfig+0x600>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c86:	f7ff fc1f 	bl	80004c8 <HAL_GetTick>
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	9b04      	ldr	r3, [sp, #16]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d901      	bls.n	8000c98 <HAL_RCC_OscConfig+0x600>
          {
            return HAL_TIMEOUT;
 8000c94:	2303      	movs	r3, #3
 8000c96:	e057      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	2380      	movs	r3, #128	@ 0x80
 8000c9e:	049b      	lsls	r3, r3, #18
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	d1f0      	bne.n	8000c86 <HAL_RCC_OscConfig+0x5ee>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <HAL_RCC_OscConfig+0x628>)
 8000caa:	490c      	ldr	r1, [pc, #48]	@ (8000cdc <HAL_RCC_OscConfig+0x644>)
 8000cac:	400a      	ands	r2, r1
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	e049      	b.n	8000d46 <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cb2:	9b01      	ldr	r3, [sp, #4]
 8000cb4:	6a1b      	ldr	r3, [r3, #32]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d112      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x648>
      {
        return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e044      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40007000 	.word	0x40007000
 8000cc8:	00001388 	.word	0x00001388
 8000ccc:	efffffff 	.word	0xefffffff
 8000cd0:	ffbfffff 	.word	0xffbfffff
 8000cd4:	feffffff 	.word	0xfeffffff
 8000cd8:	11c1808c 	.word	0x11c1808c
 8000cdc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <HAL_RCC_OscConfig+0x6b8>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	9305      	str	r3, [sp, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ce6:	9b05      	ldr	r3, [sp, #20]
 8000ce8:	2203      	movs	r2, #3
 8000cea:	401a      	ands	r2, r3
 8000cec:	9b01      	ldr	r3, [sp, #4]
 8000cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d126      	bne.n	8000d42 <HAL_RCC_OscConfig+0x6aa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000cf4:	9b05      	ldr	r3, [sp, #20]
 8000cf6:	2270      	movs	r2, #112	@ 0x70
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	9b01      	ldr	r3, [sp, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d11f      	bne.n	8000d42 <HAL_RCC_OscConfig+0x6aa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000d02:	9a05      	ldr	r2, [sp, #20]
 8000d04:	23fe      	movs	r3, #254	@ 0xfe
 8000d06:	01db      	lsls	r3, r3, #7
 8000d08:	401a      	ands	r2, r3
 8000d0a:	9b01      	ldr	r3, [sp, #4]
 8000d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d116      	bne.n	8000d42 <HAL_RCC_OscConfig+0x6aa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000d14:	9a05      	ldr	r2, [sp, #20]
 8000d16:	23f8      	movs	r3, #248	@ 0xf8
 8000d18:	039b      	lsls	r3, r3, #14
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	9b01      	ldr	r3, [sp, #4]
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d10e      	bne.n	8000d42 <HAL_RCC_OscConfig+0x6aa>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000d24:	9a05      	ldr	r2, [sp, #20]
 8000d26:	23e0      	movs	r3, #224	@ 0xe0
 8000d28:	051b      	lsls	r3, r3, #20
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	9b01      	ldr	r3, [sp, #4]
 8000d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d106      	bne.n	8000d42 <HAL_RCC_OscConfig+0x6aa>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8000d34:	9b05      	ldr	r3, [sp, #20]
 8000d36:	0f5b      	lsrs	r3, r3, #29
 8000d38:	075a      	lsls	r2, r3, #29
 8000d3a:	9b01      	ldr	r3, [sp, #4]
 8000d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d001      	beq.n	8000d46 <HAL_RCC_OscConfig+0x6ae>
        {
          return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
  }
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	b009      	add	sp, #36	@ 0x24
 8000d4c:	bd00      	pop	{pc}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	40021000 	.word	0x40021000

08000d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d54:	b500      	push	{lr}
 8000d56:	b087      	sub	sp, #28
 8000d58:	9001      	str	r0, [sp, #4]
 8000d5a:	9100      	str	r1, [sp, #0]
  uint32_t position = 0x00u;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	9305      	str	r3, [sp, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d60:	e14d      	b.n	8000ffe <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d62:	9b00      	ldr	r3, [sp, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2101      	movs	r1, #1
 8000d68:	9a05      	ldr	r2, [sp, #20]
 8000d6a:	4091      	lsls	r1, r2
 8000d6c:	000a      	movs	r2, r1
 8000d6e:	4013      	ands	r3, r2
 8000d70:	9303      	str	r3, [sp, #12]

    if (iocurrent != 0x00u)
 8000d72:	9b03      	ldr	r3, [sp, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d100      	bne.n	8000d7a <HAL_GPIO_Init+0x26>
 8000d78:	e13e      	b.n	8000ff8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d7a:	9b00      	ldr	r3, [sp, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2203      	movs	r2, #3
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d005      	beq.n	8000d92 <HAL_GPIO_Init+0x3e>
 8000d86:	9b00      	ldr	r3, [sp, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d130      	bne.n	8000df4 <HAL_GPIO_Init+0xa0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d92:	9b01      	ldr	r3, [sp, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	9304      	str	r3, [sp, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d98:	9b05      	ldr	r3, [sp, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	43da      	mvns	r2, r3
 8000da4:	9b04      	ldr	r3, [sp, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	9304      	str	r3, [sp, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000daa:	9b00      	ldr	r3, [sp, #0]
 8000dac:	68da      	ldr	r2, [r3, #12]
 8000dae:	9b05      	ldr	r3, [sp, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	9a04      	ldr	r2, [sp, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	9304      	str	r3, [sp, #16]
        GPIOx->OSPEEDR = temp;
 8000dbc:	9b01      	ldr	r3, [sp, #4]
 8000dbe:	9a04      	ldr	r2, [sp, #16]
 8000dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc2:	9b01      	ldr	r3, [sp, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	9304      	str	r3, [sp, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	9b05      	ldr	r3, [sp, #20]
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	0013      	movs	r3, r2
 8000dd0:	43da      	mvns	r2, r3
 8000dd2:	9b04      	ldr	r3, [sp, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	9304      	str	r3, [sp, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd8:	9b00      	ldr	r3, [sp, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	091b      	lsrs	r3, r3, #4
 8000dde:	2201      	movs	r2, #1
 8000de0:	401a      	ands	r2, r3
 8000de2:	9b05      	ldr	r3, [sp, #20]
 8000de4:	409a      	lsls	r2, r3
 8000de6:	0013      	movs	r3, r2
 8000de8:	9a04      	ldr	r2, [sp, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	9304      	str	r3, [sp, #16]
        GPIOx->OTYPER = temp;
 8000dee:	9b01      	ldr	r3, [sp, #4]
 8000df0:	9a04      	ldr	r2, [sp, #16]
 8000df2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df4:	9b00      	ldr	r3, [sp, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d017      	beq.n	8000e30 <HAL_GPIO_Init+0xdc>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e00:	9b01      	ldr	r3, [sp, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	9304      	str	r3, [sp, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e06:	9b05      	ldr	r3, [sp, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	409a      	lsls	r2, r3
 8000e0e:	0013      	movs	r3, r2
 8000e10:	43da      	mvns	r2, r3
 8000e12:	9b04      	ldr	r3, [sp, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	9304      	str	r3, [sp, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e18:	9b00      	ldr	r3, [sp, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	9b05      	ldr	r3, [sp, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	409a      	lsls	r2, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	9a04      	ldr	r2, [sp, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	9304      	str	r3, [sp, #16]
        GPIOx->PUPDR = temp;
 8000e2a:	9b01      	ldr	r3, [sp, #4]
 8000e2c:	9a04      	ldr	r2, [sp, #16]
 8000e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e30:	9b00      	ldr	r3, [sp, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2203      	movs	r2, #3
 8000e36:	4013      	ands	r3, r2
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d123      	bne.n	8000e84 <HAL_GPIO_Init+0x130>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e3c:	9b05      	ldr	r3, [sp, #20]
 8000e3e:	08da      	lsrs	r2, r3, #3
 8000e40:	9b01      	ldr	r3, [sp, #4]
 8000e42:	3208      	adds	r2, #8
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	58d3      	ldr	r3, [r2, r3]
 8000e48:	9304      	str	r3, [sp, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e4a:	9b05      	ldr	r3, [sp, #20]
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	4013      	ands	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	220f      	movs	r2, #15
 8000e54:	409a      	lsls	r2, r3
 8000e56:	0013      	movs	r3, r2
 8000e58:	43da      	mvns	r2, r3
 8000e5a:	9b04      	ldr	r3, [sp, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	9304      	str	r3, [sp, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e60:	9b00      	ldr	r3, [sp, #0]
 8000e62:	691a      	ldr	r2, [r3, #16]
 8000e64:	9b05      	ldr	r3, [sp, #20]
 8000e66:	2107      	movs	r1, #7
 8000e68:	400b      	ands	r3, r1
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	409a      	lsls	r2, r3
 8000e6e:	0013      	movs	r3, r2
 8000e70:	9a04      	ldr	r2, [sp, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	9304      	str	r3, [sp, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e76:	9b05      	ldr	r3, [sp, #20]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	9b01      	ldr	r3, [sp, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	9904      	ldr	r1, [sp, #16]
 8000e82:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e84:	9b01      	ldr	r3, [sp, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	9304      	str	r3, [sp, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e8a:	9b05      	ldr	r3, [sp, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	409a      	lsls	r2, r3
 8000e92:	0013      	movs	r3, r2
 8000e94:	43da      	mvns	r2, r3
 8000e96:	9b04      	ldr	r3, [sp, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	9304      	str	r3, [sp, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e9c:	9b00      	ldr	r3, [sp, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	9b05      	ldr	r3, [sp, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	0013      	movs	r3, r2
 8000eac:	9a04      	ldr	r2, [sp, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	9304      	str	r3, [sp, #16]
      GPIOx->MODER = temp;
 8000eb2:	9b01      	ldr	r3, [sp, #4]
 8000eb4:	9a04      	ldr	r2, [sp, #16]
 8000eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eb8:	9b00      	ldr	r3, [sp, #0]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	23c0      	movs	r3, #192	@ 0xc0
 8000ebe:	029b      	lsls	r3, r3, #10
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d100      	bne.n	8000ec6 <HAL_GPIO_Init+0x172>
 8000ec4:	e098      	b.n	8000ff8 <HAL_GPIO_Init+0x2a4>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ec6:	4a53      	ldr	r2, [pc, #332]	@ (8001014 <HAL_GPIO_Init+0x2c0>)
 8000ec8:	9b05      	ldr	r3, [sp, #20]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3318      	adds	r3, #24
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	589b      	ldr	r3, [r3, r2]
 8000ed2:	9304      	str	r3, [sp, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ed4:	9b05      	ldr	r3, [sp, #20]
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	4013      	ands	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	220f      	movs	r2, #15
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	9b04      	ldr	r3, [sp, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	9304      	str	r3, [sp, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000eea:	9a01      	ldr	r2, [sp, #4]
 8000eec:	23a0      	movs	r3, #160	@ 0xa0
 8000eee:	05db      	lsls	r3, r3, #23
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d019      	beq.n	8000f28 <HAL_GPIO_Init+0x1d4>
 8000ef4:	9b01      	ldr	r3, [sp, #4]
 8000ef6:	4a48      	ldr	r2, [pc, #288]	@ (8001018 <HAL_GPIO_Init+0x2c4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d013      	beq.n	8000f24 <HAL_GPIO_Init+0x1d0>
 8000efc:	9b01      	ldr	r3, [sp, #4]
 8000efe:	4a47      	ldr	r2, [pc, #284]	@ (800101c <HAL_GPIO_Init+0x2c8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d00d      	beq.n	8000f20 <HAL_GPIO_Init+0x1cc>
 8000f04:	9b01      	ldr	r3, [sp, #4]
 8000f06:	4a46      	ldr	r2, [pc, #280]	@ (8001020 <HAL_GPIO_Init+0x2cc>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d007      	beq.n	8000f1c <HAL_GPIO_Init+0x1c8>
 8000f0c:	9b01      	ldr	r3, [sp, #4]
 8000f0e:	4a45      	ldr	r2, [pc, #276]	@ (8001024 <HAL_GPIO_Init+0x2d0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d101      	bne.n	8000f18 <HAL_GPIO_Init+0x1c4>
 8000f14:	2304      	movs	r3, #4
 8000f16:	e008      	b.n	8000f2a <HAL_GPIO_Init+0x1d6>
 8000f18:	2305      	movs	r3, #5
 8000f1a:	e006      	b.n	8000f2a <HAL_GPIO_Init+0x1d6>
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e004      	b.n	8000f2a <HAL_GPIO_Init+0x1d6>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e002      	b.n	8000f2a <HAL_GPIO_Init+0x1d6>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <HAL_GPIO_Init+0x1d6>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	9a05      	ldr	r2, [sp, #20]
 8000f2c:	2103      	movs	r1, #3
 8000f2e:	400a      	ands	r2, r1
 8000f30:	00d2      	lsls	r2, r2, #3
 8000f32:	4093      	lsls	r3, r2
 8000f34:	9a04      	ldr	r2, [sp, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	9304      	str	r3, [sp, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f3a:	4936      	ldr	r1, [pc, #216]	@ (8001014 <HAL_GPIO_Init+0x2c0>)
 8000f3c:	9b05      	ldr	r3, [sp, #20]
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3318      	adds	r3, #24
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	9a04      	ldr	r2, [sp, #16]
 8000f46:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f48:	4b32      	ldr	r3, [pc, #200]	@ (8001014 <HAL_GPIO_Init+0x2c0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	9304      	str	r3, [sp, #16]
        temp &= ~(iocurrent);
 8000f4e:	9b03      	ldr	r3, [sp, #12]
 8000f50:	43da      	mvns	r2, r3
 8000f52:	9b04      	ldr	r3, [sp, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	9304      	str	r3, [sp, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f58:	9b00      	ldr	r3, [sp, #0]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	2380      	movs	r3, #128	@ 0x80
 8000f5e:	035b      	lsls	r3, r3, #13
 8000f60:	4013      	ands	r3, r2
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000f64:	9a04      	ldr	r2, [sp, #16]
 8000f66:	9b03      	ldr	r3, [sp, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	9304      	str	r3, [sp, #16]
        }
        EXTI->RTSR1 = temp;
 8000f6c:	4b29      	ldr	r3, [pc, #164]	@ (8001014 <HAL_GPIO_Init+0x2c0>)
 8000f6e:	9a04      	ldr	r2, [sp, #16]
 8000f70:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f72:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <HAL_GPIO_Init+0x2c0>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	9304      	str	r3, [sp, #16]
        temp &= ~(iocurrent);
 8000f78:	9b03      	ldr	r3, [sp, #12]
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	9b04      	ldr	r3, [sp, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	9304      	str	r3, [sp, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f82:	9b00      	ldr	r3, [sp, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	2380      	movs	r3, #128	@ 0x80
 8000f88:	039b      	lsls	r3, r3, #14
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000f8e:	9a04      	ldr	r2, [sp, #16]
 8000f90:	9b03      	ldr	r3, [sp, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	9304      	str	r3, [sp, #16]
        }
        EXTI->FTSR1 = temp;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <HAL_GPIO_Init+0x2c0>)
 8000f98:	9a04      	ldr	r2, [sp, #16]
 8000f9a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001014 <HAL_GPIO_Init+0x2c0>)
 8000f9e:	2384      	movs	r3, #132	@ 0x84
 8000fa0:	58d3      	ldr	r3, [r2, r3]
 8000fa2:	9304      	str	r3, [sp, #16]
        temp &= ~(iocurrent);
 8000fa4:	9b03      	ldr	r3, [sp, #12]
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	9b04      	ldr	r3, [sp, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	9304      	str	r3, [sp, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fae:	9b00      	ldr	r3, [sp, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	2380      	movs	r3, #128	@ 0x80
 8000fb4:	029b      	lsls	r3, r3, #10
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000fba:	9a04      	ldr	r2, [sp, #16]
 8000fbc:	9b03      	ldr	r3, [sp, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	9304      	str	r3, [sp, #16]
        }
        EXTI->EMR1 = temp;
 8000fc2:	4914      	ldr	r1, [pc, #80]	@ (8001014 <HAL_GPIO_Init+0x2c0>)
 8000fc4:	2284      	movs	r2, #132	@ 0x84
 8000fc6:	9b04      	ldr	r3, [sp, #16]
 8000fc8:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000fca:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <HAL_GPIO_Init+0x2c0>)
 8000fcc:	2380      	movs	r3, #128	@ 0x80
 8000fce:	58d3      	ldr	r3, [r2, r3]
 8000fd0:	9304      	str	r3, [sp, #16]
        temp &= ~(iocurrent);
 8000fd2:	9b03      	ldr	r3, [sp, #12]
 8000fd4:	43da      	mvns	r2, r3
 8000fd6:	9b04      	ldr	r3, [sp, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	9304      	str	r3, [sp, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fdc:	9b00      	ldr	r3, [sp, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	2380      	movs	r3, #128	@ 0x80
 8000fe2:	025b      	lsls	r3, r3, #9
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000fe8:	9a04      	ldr	r2, [sp, #16]
 8000fea:	9b03      	ldr	r3, [sp, #12]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	9304      	str	r3, [sp, #16]
        }
        EXTI->IMR1 = temp;
 8000ff0:	4908      	ldr	r1, [pc, #32]	@ (8001014 <HAL_GPIO_Init+0x2c0>)
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	9b04      	ldr	r3, [sp, #16]
 8000ff6:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000ff8:	9b05      	ldr	r3, [sp, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	9305      	str	r3, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffe:	9b00      	ldr	r3, [sp, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	9b05      	ldr	r3, [sp, #20]
 8001004:	40da      	lsrs	r2, r3
 8001006:	1e13      	subs	r3, r2, #0
 8001008:	d000      	beq.n	800100c <HAL_GPIO_Init+0x2b8>
 800100a:	e6aa      	b.n	8000d62 <HAL_GPIO_Init+0xe>
  }
}
 800100c:	46c0      	nop			@ (mov r8, r8)
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	b007      	add	sp, #28
 8001012:	bd00      	pop	{pc}
 8001014:	40021800 	.word	0x40021800
 8001018:	50000400 	.word	0x50000400
 800101c:	50000800 	.word	0x50000800
 8001020:	50000c00 	.word	0x50000c00
 8001024:	50001000 	.word	0x50001000

08001028 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001028:	b500      	push	{lr}
 800102a:	b085      	sub	sp, #20
 800102c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800102e:	9b01      	ldr	r3, [sp, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <HAL_FDCAN_Init+0x10>
  {
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e14e      	b.n	80012d6 <HAL_FDCAN_Init+0x2ae>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001038:	9b01      	ldr	r3, [sp, #4]
 800103a:	225c      	movs	r2, #92	@ 0x5c
 800103c:	5c9b      	ldrb	r3, [r3, r2]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d107      	bne.n	8001054 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001044:	9b01      	ldr	r3, [sp, #4]
 8001046:	225d      	movs	r2, #93	@ 0x5d
 8001048:	2100      	movs	r1, #0
 800104a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800104c:	9b01      	ldr	r3, [sp, #4]
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff f8c8 	bl	80001e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001054:	9b01      	ldr	r3, [sp, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	699a      	ldr	r2, [r3, #24]
 800105a:	9b01      	ldr	r3, [sp, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2110      	movs	r1, #16
 8001060:	438a      	bics	r2, r1
 8001062:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001064:	f7ff fa30 	bl	80004c8 <HAL_GetTick>
 8001068:	0003      	movs	r3, r0
 800106a:	9303      	str	r3, [sp, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800106c:	e012      	b.n	8001094 <HAL_FDCAN_Init+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800106e:	f7ff fa2b 	bl	80004c8 <HAL_GetTick>
 8001072:	0002      	movs	r2, r0
 8001074:	9b03      	ldr	r3, [sp, #12]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b0a      	cmp	r3, #10
 800107a:	d90b      	bls.n	8001094 <HAL_FDCAN_Init+0x6c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800107c:	9b01      	ldr	r3, [sp, #4]
 800107e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001080:	2201      	movs	r2, #1
 8001082:	431a      	orrs	r2, r3
 8001084:	9b01      	ldr	r3, [sp, #4]
 8001086:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001088:	9b01      	ldr	r3, [sp, #4]
 800108a:	225c      	movs	r2, #92	@ 0x5c
 800108c:	2103      	movs	r1, #3
 800108e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e120      	b.n	80012d6 <HAL_FDCAN_Init+0x2ae>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001094:	9b01      	ldr	r3, [sp, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2208      	movs	r2, #8
 800109c:	4013      	ands	r3, r2
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d0e5      	beq.n	800106e <HAL_FDCAN_Init+0x46>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010a2:	9b01      	ldr	r3, [sp, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	699a      	ldr	r2, [r3, #24]
 80010a8:	9b01      	ldr	r3, [sp, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	430a      	orrs	r2, r1
 80010b0:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b2:	f7ff fa09 	bl	80004c8 <HAL_GetTick>
 80010b6:	0003      	movs	r3, r0
 80010b8:	9303      	str	r3, [sp, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010ba:	e012      	b.n	80010e2 <HAL_FDCAN_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010bc:	f7ff fa04 	bl	80004c8 <HAL_GetTick>
 80010c0:	0002      	movs	r2, r0
 80010c2:	9b03      	ldr	r3, [sp, #12]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b0a      	cmp	r3, #10
 80010c8:	d90b      	bls.n	80010e2 <HAL_FDCAN_Init+0xba>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010ca:	9b01      	ldr	r3, [sp, #4]
 80010cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ce:	2201      	movs	r2, #1
 80010d0:	431a      	orrs	r2, r3
 80010d2:	9b01      	ldr	r3, [sp, #4]
 80010d4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010d6:	9b01      	ldr	r3, [sp, #4]
 80010d8:	225c      	movs	r2, #92	@ 0x5c
 80010da:	2103      	movs	r1, #3
 80010dc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e0f9      	b.n	80012d6 <HAL_FDCAN_Init+0x2ae>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010e2:	9b01      	ldr	r3, [sp, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	2201      	movs	r2, #1
 80010ea:	4013      	ands	r3, r2
 80010ec:	d0e6      	beq.n	80010bc <HAL_FDCAN_Init+0x94>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80010ee:	9b01      	ldr	r3, [sp, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	699a      	ldr	r2, [r3, #24]
 80010f4:	9b01      	ldr	r3, [sp, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2102      	movs	r1, #2
 80010fa:	430a      	orrs	r2, r1
 80010fc:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80010fe:	9b01      	ldr	r3, [sp, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a76      	ldr	r2, [pc, #472]	@ (80012dc <HAL_FDCAN_Init+0x2b4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d103      	bne.n	8001110 <HAL_FDCAN_Init+0xe8>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001108:	4a75      	ldr	r2, [pc, #468]	@ (80012e0 <HAL_FDCAN_Init+0x2b8>)
 800110a:	9b01      	ldr	r3, [sp, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001110:	9b01      	ldr	r3, [sp, #4]
 8001112:	7c1b      	ldrb	r3, [r3, #16]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d108      	bne.n	800112a <HAL_FDCAN_Init+0x102>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001118:	9b01      	ldr	r3, [sp, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	699a      	ldr	r2, [r3, #24]
 800111e:	9b01      	ldr	r3, [sp, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2140      	movs	r1, #64	@ 0x40
 8001124:	438a      	bics	r2, r1
 8001126:	619a      	str	r2, [r3, #24]
 8001128:	e007      	b.n	800113a <HAL_FDCAN_Init+0x112>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800112a:	9b01      	ldr	r3, [sp, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	699a      	ldr	r2, [r3, #24]
 8001130:	9b01      	ldr	r3, [sp, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2140      	movs	r1, #64	@ 0x40
 8001136:	430a      	orrs	r2, r1
 8001138:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800113a:	9b01      	ldr	r3, [sp, #4]
 800113c:	7c5b      	ldrb	r3, [r3, #17]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d109      	bne.n	8001156 <HAL_FDCAN_Init+0x12e>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001142:	9b01      	ldr	r3, [sp, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	699a      	ldr	r2, [r3, #24]
 8001148:	9b01      	ldr	r3, [sp, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2180      	movs	r1, #128	@ 0x80
 800114e:	01c9      	lsls	r1, r1, #7
 8001150:	430a      	orrs	r2, r1
 8001152:	619a      	str	r2, [r3, #24]
 8001154:	e007      	b.n	8001166 <HAL_FDCAN_Init+0x13e>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001156:	9b01      	ldr	r3, [sp, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	699a      	ldr	r2, [r3, #24]
 800115c:	9b01      	ldr	r3, [sp, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4960      	ldr	r1, [pc, #384]	@ (80012e4 <HAL_FDCAN_Init+0x2bc>)
 8001162:	400a      	ands	r2, r1
 8001164:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001166:	9b01      	ldr	r3, [sp, #4]
 8001168:	7c9b      	ldrb	r3, [r3, #18]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d108      	bne.n	8001180 <HAL_FDCAN_Init+0x158>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800116e:	9b01      	ldr	r3, [sp, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	699a      	ldr	r2, [r3, #24]
 8001174:	9b01      	ldr	r3, [sp, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	495b      	ldr	r1, [pc, #364]	@ (80012e8 <HAL_FDCAN_Init+0x2c0>)
 800117a:	400a      	ands	r2, r1
 800117c:	619a      	str	r2, [r3, #24]
 800117e:	e008      	b.n	8001192 <HAL_FDCAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001180:	9b01      	ldr	r3, [sp, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699a      	ldr	r2, [r3, #24]
 8001186:	9b01      	ldr	r3, [sp, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2180      	movs	r1, #128	@ 0x80
 800118c:	0149      	lsls	r1, r1, #5
 800118e:	430a      	orrs	r2, r1
 8001190:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001192:	9b01      	ldr	r3, [sp, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a54      	ldr	r2, [pc, #336]	@ (80012ec <HAL_FDCAN_Init+0x2c4>)
 800119a:	4013      	ands	r3, r2
 800119c:	0019      	movs	r1, r3
 800119e:	9b01      	ldr	r3, [sp, #4]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	9b01      	ldr	r3, [sp, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011aa:	9b01      	ldr	r3, [sp, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	699a      	ldr	r2, [r3, #24]
 80011b0:	9b01      	ldr	r3, [sp, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	21a4      	movs	r1, #164	@ 0xa4
 80011b6:	438a      	bics	r2, r1
 80011b8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011ba:	9b01      	ldr	r3, [sp, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	9b01      	ldr	r3, [sp, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2110      	movs	r1, #16
 80011c6:	438a      	bics	r2, r1
 80011c8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80011ca:	9b01      	ldr	r3, [sp, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d108      	bne.n	80011e4 <HAL_FDCAN_Init+0x1bc>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80011d2:	9b01      	ldr	r3, [sp, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	699a      	ldr	r2, [r3, #24]
 80011d8:	9b01      	ldr	r3, [sp, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2104      	movs	r1, #4
 80011de:	430a      	orrs	r2, r1
 80011e0:	619a      	str	r2, [r3, #24]
 80011e2:	e02c      	b.n	800123e <HAL_FDCAN_Init+0x216>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80011e4:	9b01      	ldr	r3, [sp, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d028      	beq.n	800123e <HAL_FDCAN_Init+0x216>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80011ec:	9b01      	ldr	r3, [sp, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d01c      	beq.n	800122e <HAL_FDCAN_Init+0x206>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80011f4:	9b01      	ldr	r3, [sp, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	699a      	ldr	r2, [r3, #24]
 80011fa:	9b01      	ldr	r3, [sp, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2180      	movs	r1, #128	@ 0x80
 8001200:	430a      	orrs	r2, r1
 8001202:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001204:	9b01      	ldr	r3, [sp, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	9b01      	ldr	r3, [sp, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2110      	movs	r1, #16
 8001210:	430a      	orrs	r2, r1
 8001212:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001214:	9b01      	ldr	r3, [sp, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	2b03      	cmp	r3, #3
 800121a:	d110      	bne.n	800123e <HAL_FDCAN_Init+0x216>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800121c:	9b01      	ldr	r3, [sp, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	9b01      	ldr	r3, [sp, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2120      	movs	r1, #32
 8001228:	430a      	orrs	r2, r1
 800122a:	619a      	str	r2, [r3, #24]
 800122c:	e007      	b.n	800123e <HAL_FDCAN_Init+0x216>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800122e:	9b01      	ldr	r3, [sp, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	699a      	ldr	r2, [r3, #24]
 8001234:	9b01      	ldr	r3, [sp, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2120      	movs	r1, #32
 800123a:	430a      	orrs	r2, r1
 800123c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800123e:	9b01      	ldr	r3, [sp, #4]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	3b01      	subs	r3, #1
 8001244:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001246:	9b01      	ldr	r3, [sp, #4]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	3b01      	subs	r3, #1
 800124c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800124e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001250:	9b01      	ldr	r3, [sp, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001256:	431a      	orrs	r2, r3
 8001258:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800125a:	9b01      	ldr	r3, [sp, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	3b01      	subs	r3, #1
 8001260:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001262:	9b01      	ldr	r3, [sp, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001266:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001268:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800126a:	9b01      	ldr	r3, [sp, #4]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	23c0      	movs	r3, #192	@ 0xc0
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	429a      	cmp	r2, r3
 8001274:	d115      	bne.n	80012a2 <HAL_FDCAN_Init+0x27a>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001276:	9b01      	ldr	r3, [sp, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800127c:	9b01      	ldr	r3, [sp, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001280:	3b01      	subs	r3, #1
 8001282:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001284:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001286:	9b01      	ldr	r3, [sp, #4]
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	3b01      	subs	r3, #1
 800128c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800128e:	431a      	orrs	r2, r3
 8001290:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001292:	9b01      	ldr	r3, [sp, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001296:	3b01      	subs	r3, #1
 8001298:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800129a:	9b01      	ldr	r3, [sp, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800129e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012a0:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012a2:	9b01      	ldr	r3, [sp, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	22c0      	movs	r2, #192	@ 0xc0
 80012a8:	5899      	ldr	r1, [r3, r2]
 80012aa:	9b01      	ldr	r3, [sp, #4]
 80012ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012ae:	9b01      	ldr	r3, [sp, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	21c0      	movs	r1, #192	@ 0xc0
 80012b6:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80012b8:	9b01      	ldr	r3, [sp, #4]
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fbae 	bl	8001a1c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80012c0:	9b01      	ldr	r3, [sp, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80012c6:	9b01      	ldr	r3, [sp, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80012cc:	9b01      	ldr	r3, [sp, #4]
 80012ce:	225c      	movs	r2, #92	@ 0x5c
 80012d0:	2101      	movs	r1, #1
 80012d2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	b005      	add	sp, #20
 80012da:	bd00      	pop	{pc}
 80012dc:	40006400 	.word	0x40006400
 80012e0:	40006500 	.word	0x40006500
 80012e4:	ffffbfff 	.word	0xffffbfff
 80012e8:	ffffefff 	.word	0xffffefff
 80012ec:	fffffcff 	.word	0xfffffcff

080012f0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80012f0:	b082      	sub	sp, #8
 80012f2:	9001      	str	r0, [sp, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80012f4:	9b01      	ldr	r3, [sp, #4]
 80012f6:	225c      	movs	r2, #92	@ 0x5c
 80012f8:	5c9b      	ldrb	r3, [r3, r2]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d110      	bne.n	8001322 <HAL_FDCAN_Start+0x32>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001300:	9b01      	ldr	r3, [sp, #4]
 8001302:	225c      	movs	r2, #92	@ 0x5c
 8001304:	2102      	movs	r1, #2
 8001306:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001308:	9b01      	ldr	r3, [sp, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	699a      	ldr	r2, [r3, #24]
 800130e:	9b01      	ldr	r3, [sp, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2101      	movs	r1, #1
 8001314:	438a      	bics	r2, r1
 8001316:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001318:	9b01      	ldr	r3, [sp, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e006      	b.n	8001330 <HAL_FDCAN_Start+0x40>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001322:	9b01      	ldr	r3, [sp, #4]
 8001324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001326:	2204      	movs	r2, #4
 8001328:	431a      	orrs	r2, r3
 800132a:	9b01      	ldr	r3, [sp, #4]
 800132c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
  }
}
 8001330:	0018      	movs	r0, r3
 8001332:	b002      	add	sp, #8
 8001334:	4770      	bx	lr

08001336 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001336:	b500      	push	{lr}
 8001338:	b087      	sub	sp, #28
 800133a:	9003      	str	r0, [sp, #12]
 800133c:	9102      	str	r1, [sp, #8]
 800133e:	9201      	str	r2, [sp, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001340:	9b03      	ldr	r3, [sp, #12]
 8001342:	225c      	movs	r2, #92	@ 0x5c
 8001344:	5c9b      	ldrb	r3, [r3, r2]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d12d      	bne.n	80013a8 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800134c:	9b03      	ldr	r3, [sp, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	22c4      	movs	r2, #196	@ 0xc4
 8001352:	589a      	ldr	r2, [r3, r2]
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	039b      	lsls	r3, r3, #14
 8001358:	4013      	ands	r3, r2
 800135a:	d008      	beq.n	800136e <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800135c:	9b03      	ldr	r3, [sp, #12]
 800135e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001360:	2280      	movs	r2, #128	@ 0x80
 8001362:	0092      	lsls	r2, r2, #2
 8001364:	431a      	orrs	r2, r3
 8001366:	9b03      	ldr	r3, [sp, #12]
 8001368:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e023      	b.n	80013b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800136e:	9b03      	ldr	r3, [sp, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	22c4      	movs	r2, #196	@ 0xc4
 8001374:	589b      	ldr	r3, [r3, r2]
 8001376:	0c1b      	lsrs	r3, r3, #16
 8001378:	2203      	movs	r2, #3
 800137a:	4013      	ands	r3, r2
 800137c:	9305      	str	r3, [sp, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800137e:	9b05      	ldr	r3, [sp, #20]
 8001380:	9a01      	ldr	r2, [sp, #4]
 8001382:	9902      	ldr	r1, [sp, #8]
 8001384:	9803      	ldr	r0, [sp, #12]
 8001386:	f000 fbb3 	bl	8001af0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800138a:	9b03      	ldr	r3, [sp, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2101      	movs	r1, #1
 8001390:	9a05      	ldr	r2, [sp, #20]
 8001392:	4091      	lsls	r1, r2
 8001394:	000a      	movs	r2, r1
 8001396:	21cc      	movs	r1, #204	@ 0xcc
 8001398:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800139a:	2201      	movs	r2, #1
 800139c:	9b05      	ldr	r3, [sp, #20]
 800139e:	409a      	lsls	r2, r3
 80013a0:	9b03      	ldr	r3, [sp, #12]
 80013a2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	e006      	b.n	80013b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80013a8:	9b03      	ldr	r3, [sp, #12]
 80013aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ac:	2208      	movs	r2, #8
 80013ae:	431a      	orrs	r2, r3
 80013b0:	9b03      	ldr	r3, [sp, #12]
 80013b2:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
  }
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	b007      	add	sp, #28
 80013ba:	bd00      	pop	{pc}

080013bc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80013bc:	b08a      	sub	sp, #40	@ 0x28
 80013be:	9003      	str	r0, [sp, #12]
 80013c0:	9102      	str	r1, [sp, #8]
 80013c2:	9201      	str	r2, [sp, #4]
 80013c4:	9300      	str	r3, [sp, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013c6:	231b      	movs	r3, #27
 80013c8:	446b      	add	r3, sp
 80013ca:	9a03      	ldr	r2, [sp, #12]
 80013cc:	215c      	movs	r1, #92	@ 0x5c
 80013ce:	5c52      	ldrb	r2, [r2, r1]
 80013d0:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80013d2:	231b      	movs	r3, #27
 80013d4:	446b      	add	r3, sp
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d000      	beq.n	80013de <HAL_FDCAN_GetRxMessage+0x22>
 80013dc:	e0c1      	b.n	8001562 <HAL_FDCAN_GetRxMessage+0x1a6>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80013de:	9b02      	ldr	r3, [sp, #8]
 80013e0:	2b40      	cmp	r3, #64	@ 0x40
 80013e2:	d121      	bne.n	8001428 <HAL_FDCAN_GetRxMessage+0x6c>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80013e4:	9b03      	ldr	r3, [sp, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2290      	movs	r2, #144	@ 0x90
 80013ea:	589b      	ldr	r3, [r3, r2]
 80013ec:	220f      	movs	r2, #15
 80013ee:	4013      	ands	r3, r2
 80013f0:	d108      	bne.n	8001404 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80013f2:	9b03      	ldr	r3, [sp, #12]
 80013f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f6:	2280      	movs	r2, #128	@ 0x80
 80013f8:	0052      	lsls	r2, r2, #1
 80013fa:	431a      	orrs	r2, r3
 80013fc:	9b03      	ldr	r3, [sp, #12]
 80013fe:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0b5      	b.n	8001570 <HAL_FDCAN_GetRxMessage+0x1b4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001404:	9b03      	ldr	r3, [sp, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2290      	movs	r2, #144	@ 0x90
 800140a:	589b      	ldr	r3, [r3, r2]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	2203      	movs	r2, #3
 8001410:	4013      	ands	r3, r2
 8001412:	9307      	str	r3, [sp, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001414:	9b03      	ldr	r3, [sp, #12]
 8001416:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001418:	9a07      	ldr	r2, [sp, #28]
 800141a:	0013      	movs	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	189b      	adds	r3, r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	18cb      	adds	r3, r1, r3
 8001424:	9309      	str	r3, [sp, #36]	@ 0x24
 8001426:	e020      	b.n	800146a <HAL_FDCAN_GetRxMessage+0xae>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001428:	9b03      	ldr	r3, [sp, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2298      	movs	r2, #152	@ 0x98
 800142e:	589b      	ldr	r3, [r3, r2]
 8001430:	220f      	movs	r2, #15
 8001432:	4013      	ands	r3, r2
 8001434:	d108      	bne.n	8001448 <HAL_FDCAN_GetRxMessage+0x8c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001436:	9b03      	ldr	r3, [sp, #12]
 8001438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143a:	2280      	movs	r2, #128	@ 0x80
 800143c:	0052      	lsls	r2, r2, #1
 800143e:	431a      	orrs	r2, r3
 8001440:	9b03      	ldr	r3, [sp, #12]
 8001442:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e093      	b.n	8001570 <HAL_FDCAN_GetRxMessage+0x1b4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001448:	9b03      	ldr	r3, [sp, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2298      	movs	r2, #152	@ 0x98
 800144e:	589b      	ldr	r3, [r3, r2]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	2203      	movs	r2, #3
 8001454:	4013      	ands	r3, r2
 8001456:	9307      	str	r3, [sp, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001458:	9b03      	ldr	r3, [sp, #12]
 800145a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800145c:	9a07      	ldr	r2, [sp, #28]
 800145e:	0013      	movs	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	189b      	adds	r3, r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	18cb      	adds	r3, r1, r3
 8001468:	9309      	str	r3, [sp, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800146a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	05db      	lsls	r3, r3, #23
 8001472:	401a      	ands	r2, r3
 8001474:	9b01      	ldr	r3, [sp, #4]
 8001476:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001478:	9b01      	ldr	r3, [sp, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d107      	bne.n	8001490 <HAL_FDCAN_GetRxMessage+0xd4>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0c9b      	lsrs	r3, r3, #18
 8001486:	055b      	lsls	r3, r3, #21
 8001488:	0d5a      	lsrs	r2, r3, #21
 800148a:	9b01      	ldr	r3, [sp, #4]
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e005      	b.n	800149c <HAL_FDCAN_GetRxMessage+0xe0>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	9b01      	ldr	r3, [sp, #4]
 800149a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800149c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2380      	movs	r3, #128	@ 0x80
 80014a2:	059b      	lsls	r3, r3, #22
 80014a4:	401a      	ands	r2, r3
 80014a6:	9b01      	ldr	r3, [sp, #4]
 80014a8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80014aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	0fdb      	lsrs	r3, r3, #31
 80014b0:	07da      	lsls	r2, r3, #31
 80014b2:	9b01      	ldr	r3, [sp, #4]
 80014b4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80014b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014b8:	3304      	adds	r3, #4
 80014ba:	9309      	str	r3, [sp, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80014bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	041b      	lsls	r3, r3, #16
 80014c2:	0c1a      	lsrs	r2, r3, #16
 80014c4:	9b01      	ldr	r3, [sp, #4]
 80014c6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80014c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	23f0      	movs	r3, #240	@ 0xf0
 80014ce:	031b      	lsls	r3, r3, #12
 80014d0:	401a      	ands	r2, r3
 80014d2:	9b01      	ldr	r3, [sp, #4]
 80014d4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80014d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	2380      	movs	r3, #128	@ 0x80
 80014dc:	035b      	lsls	r3, r3, #13
 80014de:	401a      	ands	r2, r3
 80014e0:	9b01      	ldr	r3, [sp, #4]
 80014e2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80014e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2380      	movs	r3, #128	@ 0x80
 80014ea:	039b      	lsls	r3, r3, #14
 80014ec:	401a      	ands	r2, r3
 80014ee:	9b01      	ldr	r3, [sp, #4]
 80014f0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80014f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	0e1b      	lsrs	r3, r3, #24
 80014f8:	227f      	movs	r2, #127	@ 0x7f
 80014fa:	401a      	ands	r2, r3
 80014fc:	9b01      	ldr	r3, [sp, #4]
 80014fe:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	0fda      	lsrs	r2, r3, #31
 8001506:	9b01      	ldr	r3, [sp, #4]
 8001508:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800150a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800150c:	3304      	adds	r3, #4
 800150e:	9309      	str	r3, [sp, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001512:	9305      	str	r3, [sp, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001514:	2300      	movs	r3, #0
 8001516:	9308      	str	r3, [sp, #32]
 8001518:	e00a      	b.n	8001530 <HAL_FDCAN_GetRxMessage+0x174>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800151a:	9a05      	ldr	r2, [sp, #20]
 800151c:	9b08      	ldr	r3, [sp, #32]
 800151e:	18d2      	adds	r2, r2, r3
 8001520:	9900      	ldr	r1, [sp, #0]
 8001522:	9b08      	ldr	r3, [sp, #32]
 8001524:	18cb      	adds	r3, r1, r3
 8001526:	7812      	ldrb	r2, [r2, #0]
 8001528:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800152a:	9b08      	ldr	r3, [sp, #32]
 800152c:	3301      	adds	r3, #1
 800152e:	9308      	str	r3, [sp, #32]
 8001530:	9b01      	ldr	r3, [sp, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	4a10      	ldr	r2, [pc, #64]	@ (8001578 <HAL_FDCAN_GetRxMessage+0x1bc>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	001a      	movs	r2, r3
 800153c:	9b08      	ldr	r3, [sp, #32]
 800153e:	4293      	cmp	r3, r2
 8001540:	d3eb      	bcc.n	800151a <HAL_FDCAN_GetRxMessage+0x15e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001542:	9b02      	ldr	r3, [sp, #8]
 8001544:	2b40      	cmp	r3, #64	@ 0x40
 8001546:	d105      	bne.n	8001554 <HAL_FDCAN_GetRxMessage+0x198>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001548:	9b03      	ldr	r3, [sp, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2194      	movs	r1, #148	@ 0x94
 800154e:	9a07      	ldr	r2, [sp, #28]
 8001550:	505a      	str	r2, [r3, r1]
 8001552:	e004      	b.n	800155e <HAL_FDCAN_GetRxMessage+0x1a2>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001554:	9b03      	ldr	r3, [sp, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	219c      	movs	r1, #156	@ 0x9c
 800155a:	9a07      	ldr	r2, [sp, #28]
 800155c:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e006      	b.n	8001570 <HAL_FDCAN_GetRxMessage+0x1b4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001562:	9b03      	ldr	r3, [sp, #12]
 8001564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001566:	2208      	movs	r2, #8
 8001568:	431a      	orrs	r2, r3
 800156a:	9b03      	ldr	r3, [sp, #12]
 800156c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
  }
}
 8001570:	0018      	movs	r0, r3
 8001572:	b00a      	add	sp, #40	@ 0x28
 8001574:	4770      	bx	lr
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	08003418 	.word	0x08003418

0800157c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800157c:	b086      	sub	sp, #24
 800157e:	9003      	str	r0, [sp, #12]
 8001580:	9102      	str	r1, [sp, #8]
 8001582:	9201      	str	r2, [sp, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001584:	2317      	movs	r3, #23
 8001586:	446b      	add	r3, sp
 8001588:	9a03      	ldr	r2, [sp, #12]
 800158a:	215c      	movs	r1, #92	@ 0x5c
 800158c:	5c52      	ldrb	r2, [r2, r1]
 800158e:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001590:	2317      	movs	r3, #23
 8001592:	446b      	add	r3, sp
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d005      	beq.n	80015a6 <HAL_FDCAN_ActivateNotification+0x2a>
 800159a:	2317      	movs	r3, #23
 800159c:	446b      	add	r3, sp
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d000      	beq.n	80015a6 <HAL_FDCAN_ActivateNotification+0x2a>
 80015a4:	e0b4      	b.n	8001710 <HAL_FDCAN_ActivateNotification+0x194>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80015a6:	9b03      	ldr	r3, [sp, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ac:	9304      	str	r3, [sp, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80015ae:	9b02      	ldr	r3, [sp, #8]
 80015b0:	2207      	movs	r2, #7
 80015b2:	4013      	ands	r3, r2
 80015b4:	d003      	beq.n	80015be <HAL_FDCAN_ActivateNotification+0x42>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80015b6:	9b04      	ldr	r3, [sp, #16]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	d034      	beq.n	8001628 <HAL_FDCAN_ActivateNotification+0xac>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80015be:	9b02      	ldr	r3, [sp, #8]
 80015c0:	2238      	movs	r2, #56	@ 0x38
 80015c2:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80015c4:	d003      	beq.n	80015ce <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80015c6:	9b04      	ldr	r3, [sp, #16]
 80015c8:	2202      	movs	r2, #2
 80015ca:	4013      	ands	r3, r2
 80015cc:	d02c      	beq.n	8001628 <HAL_FDCAN_ActivateNotification+0xac>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80015ce:	9a02      	ldr	r2, [sp, #8]
 80015d0:	23e0      	movs	r3, #224	@ 0xe0
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80015d6:	d003      	beq.n	80015e0 <HAL_FDCAN_ActivateNotification+0x64>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80015d8:	9b04      	ldr	r3, [sp, #16]
 80015da:	2204      	movs	r2, #4
 80015dc:	4013      	ands	r3, r2
 80015de:	d023      	beq.n	8001628 <HAL_FDCAN_ActivateNotification+0xac>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80015e0:	9a02      	ldr	r2, [sp, #8]
 80015e2:	23f0      	movs	r3, #240	@ 0xf0
 80015e4:	015b      	lsls	r3, r3, #5
 80015e6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80015e8:	d003      	beq.n	80015f2 <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80015ea:	9b04      	ldr	r3, [sp, #16]
 80015ec:	2208      	movs	r2, #8
 80015ee:	4013      	ands	r3, r2
 80015f0:	d01a      	beq.n	8001628 <HAL_FDCAN_ActivateNotification+0xac>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80015f2:	9a02      	ldr	r2, [sp, #8]
 80015f4:	23e0      	movs	r3, #224	@ 0xe0
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80015fa:	d003      	beq.n	8001604 <HAL_FDCAN_ActivateNotification+0x88>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80015fc:	9b04      	ldr	r3, [sp, #16]
 80015fe:	2210      	movs	r2, #16
 8001600:	4013      	ands	r3, r2
 8001602:	d011      	beq.n	8001628 <HAL_FDCAN_ActivateNotification+0xac>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001604:	9a02      	ldr	r2, [sp, #8]
 8001606:	23c0      	movs	r3, #192	@ 0xc0
 8001608:	029b      	lsls	r3, r3, #10
 800160a:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800160c:	d003      	beq.n	8001616 <HAL_FDCAN_ActivateNotification+0x9a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800160e:	9b04      	ldr	r3, [sp, #16]
 8001610:	2220      	movs	r2, #32
 8001612:	4013      	ands	r3, r2
 8001614:	d008      	beq.n	8001628 <HAL_FDCAN_ActivateNotification+0xac>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001616:	9a02      	ldr	r2, [sp, #8]
 8001618:	23fc      	movs	r3, #252	@ 0xfc
 800161a:	041b      	lsls	r3, r3, #16
 800161c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800161e:	d00b      	beq.n	8001638 <HAL_FDCAN_ActivateNotification+0xbc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001620:	9b04      	ldr	r3, [sp, #16]
 8001622:	2240      	movs	r2, #64	@ 0x40
 8001624:	4013      	ands	r3, r2
 8001626:	d107      	bne.n	8001638 <HAL_FDCAN_ActivateNotification+0xbc>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001628:	9b03      	ldr	r3, [sp, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800162e:	9b03      	ldr	r3, [sp, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2101      	movs	r1, #1
 8001634:	430a      	orrs	r2, r1
 8001636:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001638:	9b02      	ldr	r3, [sp, #8]
 800163a:	2207      	movs	r2, #7
 800163c:	4013      	ands	r3, r2
 800163e:	d003      	beq.n	8001648 <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001640:	9b04      	ldr	r3, [sp, #16]
 8001642:	2201      	movs	r2, #1
 8001644:	4013      	ands	r3, r2
 8001646:	d134      	bne.n	80016b2 <HAL_FDCAN_ActivateNotification+0x136>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001648:	9b02      	ldr	r3, [sp, #8]
 800164a:	2238      	movs	r2, #56	@ 0x38
 800164c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800164e:	d003      	beq.n	8001658 <HAL_FDCAN_ActivateNotification+0xdc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001650:	9b04      	ldr	r3, [sp, #16]
 8001652:	2202      	movs	r2, #2
 8001654:	4013      	ands	r3, r2
 8001656:	d12c      	bne.n	80016b2 <HAL_FDCAN_ActivateNotification+0x136>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001658:	9a02      	ldr	r2, [sp, #8]
 800165a:	23e0      	movs	r3, #224	@ 0xe0
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001660:	d003      	beq.n	800166a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001662:	9b04      	ldr	r3, [sp, #16]
 8001664:	2204      	movs	r2, #4
 8001666:	4013      	ands	r3, r2
 8001668:	d123      	bne.n	80016b2 <HAL_FDCAN_ActivateNotification+0x136>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800166a:	9a02      	ldr	r2, [sp, #8]
 800166c:	23f0      	movs	r3, #240	@ 0xf0
 800166e:	015b      	lsls	r3, r3, #5
 8001670:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001672:	d003      	beq.n	800167c <HAL_FDCAN_ActivateNotification+0x100>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001674:	9b04      	ldr	r3, [sp, #16]
 8001676:	2208      	movs	r2, #8
 8001678:	4013      	ands	r3, r2
 800167a:	d11a      	bne.n	80016b2 <HAL_FDCAN_ActivateNotification+0x136>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800167c:	9a02      	ldr	r2, [sp, #8]
 800167e:	23e0      	movs	r3, #224	@ 0xe0
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001684:	d003      	beq.n	800168e <HAL_FDCAN_ActivateNotification+0x112>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001686:	9b04      	ldr	r3, [sp, #16]
 8001688:	2210      	movs	r2, #16
 800168a:	4013      	ands	r3, r2
 800168c:	d111      	bne.n	80016b2 <HAL_FDCAN_ActivateNotification+0x136>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800168e:	9a02      	ldr	r2, [sp, #8]
 8001690:	23c0      	movs	r3, #192	@ 0xc0
 8001692:	029b      	lsls	r3, r3, #10
 8001694:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001696:	d003      	beq.n	80016a0 <HAL_FDCAN_ActivateNotification+0x124>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001698:	9b04      	ldr	r3, [sp, #16]
 800169a:	2220      	movs	r2, #32
 800169c:	4013      	ands	r3, r2
 800169e:	d108      	bne.n	80016b2 <HAL_FDCAN_ActivateNotification+0x136>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80016a0:	9a02      	ldr	r2, [sp, #8]
 80016a2:	23fc      	movs	r3, #252	@ 0xfc
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80016a8:	d00b      	beq.n	80016c2 <HAL_FDCAN_ActivateNotification+0x146>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80016aa:	9b04      	ldr	r3, [sp, #16]
 80016ac:	2240      	movs	r2, #64	@ 0x40
 80016ae:	4013      	ands	r3, r2
 80016b0:	d007      	beq.n	80016c2 <HAL_FDCAN_ActivateNotification+0x146>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80016b2:	9b03      	ldr	r3, [sp, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016b8:	9b03      	ldr	r3, [sp, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2102      	movs	r1, #2
 80016be:	430a      	orrs	r2, r1
 80016c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80016c2:	9b02      	ldr	r3, [sp, #8]
 80016c4:	2280      	movs	r2, #128	@ 0x80
 80016c6:	4013      	ands	r3, r2
 80016c8:	d009      	beq.n	80016de <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80016ca:	9b03      	ldr	r3, [sp, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	22dc      	movs	r2, #220	@ 0xdc
 80016d0:	5899      	ldr	r1, [r3, r2]
 80016d2:	9b03      	ldr	r3, [sp, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	9a01      	ldr	r2, [sp, #4]
 80016d8:	430a      	orrs	r2, r1
 80016da:	21dc      	movs	r1, #220	@ 0xdc
 80016dc:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80016de:	9a02      	ldr	r2, [sp, #8]
 80016e0:	2380      	movs	r3, #128	@ 0x80
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4013      	ands	r3, r2
 80016e6:	d009      	beq.n	80016fc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80016e8:	9b03      	ldr	r3, [sp, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	22e0      	movs	r2, #224	@ 0xe0
 80016ee:	5899      	ldr	r1, [r3, r2]
 80016f0:	9b03      	ldr	r3, [sp, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	9a01      	ldr	r2, [sp, #4]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	21e0      	movs	r1, #224	@ 0xe0
 80016fa:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80016fc:	9b03      	ldr	r3, [sp, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001702:	9b03      	ldr	r3, [sp, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	9a02      	ldr	r2, [sp, #8]
 8001708:	430a      	orrs	r2, r1
 800170a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	e006      	b.n	800171e <HAL_FDCAN_ActivateNotification+0x1a2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001710:	9b03      	ldr	r3, [sp, #12]
 8001712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001714:	2202      	movs	r2, #2
 8001716:	431a      	orrs	r2, r3
 8001718:	9b03      	ldr	r3, [sp, #12]
 800171a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
  }
}
 800171e:	0018      	movs	r0, r3
 8001720:	b006      	add	sp, #24
 8001722:	4770      	bx	lr

08001724 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001724:	b500      	push	{lr}
 8001726:	b08d      	sub	sp, #52	@ 0x34
 8001728:	9001      	str	r0, [sp, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800172a:	9b01      	ldr	r3, [sp, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001730:	23e0      	movs	r3, #224	@ 0xe0
 8001732:	015b      	lsls	r3, r3, #5
 8001734:	4013      	ands	r3, r2
 8001736:	930b      	str	r3, [sp, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001738:	9b01      	ldr	r3, [sp, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800173e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001740:	4013      	ands	r3, r2
 8001742:	930b      	str	r3, [sp, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001744:	9b01      	ldr	r3, [sp, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800174a:	2207      	movs	r2, #7
 800174c:	4013      	ands	r3, r2
 800174e:	930a      	str	r3, [sp, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001750:	9b01      	ldr	r3, [sp, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001756:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001758:	4013      	ands	r3, r2
 800175a:	930a      	str	r3, [sp, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800175c:	9b01      	ldr	r3, [sp, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001762:	2238      	movs	r2, #56	@ 0x38
 8001764:	4013      	ands	r3, r2
 8001766:	9309      	str	r3, [sp, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001768:	9b01      	ldr	r3, [sp, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800176e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001770:	4013      	ands	r3, r2
 8001772:	9309      	str	r3, [sp, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001774:	9b01      	ldr	r3, [sp, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800177a:	23f1      	movs	r3, #241	@ 0xf1
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	4013      	ands	r3, r2
 8001780:	9308      	str	r3, [sp, #32]
  Errors &= hfdcan->Instance->IE;
 8001782:	9b01      	ldr	r3, [sp, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001788:	9b08      	ldr	r3, [sp, #32]
 800178a:	4013      	ands	r3, r2
 800178c:	9308      	str	r3, [sp, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800178e:	9b01      	ldr	r3, [sp, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001794:	23e0      	movs	r3, #224	@ 0xe0
 8001796:	031b      	lsls	r3, r3, #12
 8001798:	4013      	ands	r3, r2
 800179a:	9307      	str	r3, [sp, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800179c:	9b01      	ldr	r3, [sp, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80017a2:	9b07      	ldr	r3, [sp, #28]
 80017a4:	4013      	ands	r3, r2
 80017a6:	9307      	str	r3, [sp, #28]
  itsource = hfdcan->Instance->IE;
 80017a8:	9b01      	ldr	r3, [sp, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ae:	9306      	str	r3, [sp, #24]
  itflag = hfdcan->Instance->IR;
 80017b0:	9b01      	ldr	r3, [sp, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017b6:	9305      	str	r3, [sp, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80017b8:	9b05      	ldr	r3, [sp, #20]
 80017ba:	099b      	lsrs	r3, r3, #6
 80017bc:	001a      	movs	r2, r3
 80017be:	2301      	movs	r3, #1
 80017c0:	4013      	ands	r3, r2
 80017c2:	d00d      	beq.n	80017e0 <HAL_FDCAN_IRQHandler+0xbc>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80017c4:	9b06      	ldr	r3, [sp, #24]
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	001a      	movs	r2, r3
 80017ca:	2301      	movs	r3, #1
 80017cc:	4013      	ands	r3, r2
 80017ce:	d007      	beq.n	80017e0 <HAL_FDCAN_IRQHandler+0xbc>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80017d0:	9b01      	ldr	r3, [sp, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2240      	movs	r2, #64	@ 0x40
 80017d6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80017d8:	9b01      	ldr	r3, [sp, #4]
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 f90e 	bl	80019fc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80017e0:	9b05      	ldr	r3, [sp, #20]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	001a      	movs	r2, r3
 80017e6:	2301      	movs	r3, #1
 80017e8:	4013      	ands	r3, r2
 80017ea:	d01c      	beq.n	8001826 <HAL_FDCAN_IRQHandler+0x102>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80017ec:	9b06      	ldr	r3, [sp, #24]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	001a      	movs	r2, r3
 80017f2:	2301      	movs	r3, #1
 80017f4:	4013      	ands	r3, r2
 80017f6:	d016      	beq.n	8001826 <HAL_FDCAN_IRQHandler+0x102>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80017f8:	9b01      	ldr	r3, [sp, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	22d8      	movs	r2, #216	@ 0xd8
 80017fe:	589b      	ldr	r3, [r3, r2]
 8001800:	9304      	str	r3, [sp, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001802:	9b01      	ldr	r3, [sp, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	22e0      	movs	r2, #224	@ 0xe0
 8001808:	589a      	ldr	r2, [r3, r2]
 800180a:	9b04      	ldr	r3, [sp, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	9304      	str	r3, [sp, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001810:	9b01      	ldr	r3, [sp, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2280      	movs	r2, #128	@ 0x80
 8001816:	0052      	lsls	r2, r2, #1
 8001818:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800181a:	9a04      	ldr	r2, [sp, #16]
 800181c:	9b01      	ldr	r3, [sp, #4]
 800181e:	0011      	movs	r1, r2
 8001820:	0018      	movs	r0, r3
 8001822:	f000 f8db 	bl	80019dc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001828:	2b00      	cmp	r3, #0
 800182a:	d009      	beq.n	8001840 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800182c:	9b01      	ldr	r3, [sp, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8001832:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001834:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8001836:	9b01      	ldr	r3, [sp, #4]
 8001838:	0011      	movs	r1, r2
 800183a:	0018      	movs	r0, r3
 800183c:	f000 f8b7 	bl	80019ae <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001842:	2b00      	cmp	r3, #0
 8001844:	d009      	beq.n	800185a <HAL_FDCAN_IRQHandler+0x136>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001846:	9b01      	ldr	r3, [sp, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800184c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800184e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001850:	9b01      	ldr	r3, [sp, #4]
 8001852:	0011      	movs	r1, r2
 8001854:	0018      	movs	r0, r3
 8001856:	f001 f81f 	bl	8002898 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800185a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800185c:	2b00      	cmp	r3, #0
 800185e:	d009      	beq.n	8001874 <HAL_FDCAN_IRQHandler+0x150>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001860:	9b01      	ldr	r3, [sp, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001866:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001868:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800186a:	9b01      	ldr	r3, [sp, #4]
 800186c:	0011      	movs	r1, r2
 800186e:	0018      	movs	r0, r3
 8001870:	f000 f8a3 	bl	80019ba <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001874:	9b05      	ldr	r3, [sp, #20]
 8001876:	0a5b      	lsrs	r3, r3, #9
 8001878:	001a      	movs	r2, r3
 800187a:	2301      	movs	r3, #1
 800187c:	4013      	ands	r3, r2
 800187e:	d00e      	beq.n	800189e <HAL_FDCAN_IRQHandler+0x17a>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001880:	9b06      	ldr	r3, [sp, #24]
 8001882:	0a5b      	lsrs	r3, r3, #9
 8001884:	001a      	movs	r2, r3
 8001886:	2301      	movs	r3, #1
 8001888:	4013      	ands	r3, r2
 800188a:	d008      	beq.n	800189e <HAL_FDCAN_IRQHandler+0x17a>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800188c:	9b01      	ldr	r3, [sp, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2280      	movs	r2, #128	@ 0x80
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001896:	9b01      	ldr	r3, [sp, #4]
 8001898:	0018      	movs	r0, r3
 800189a:	f000 f894 	bl	80019c6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800189e:	9b05      	ldr	r3, [sp, #20]
 80018a0:	09db      	lsrs	r3, r3, #7
 80018a2:	001a      	movs	r2, r3
 80018a4:	2301      	movs	r3, #1
 80018a6:	4013      	ands	r3, r2
 80018a8:	d01b      	beq.n	80018e2 <HAL_FDCAN_IRQHandler+0x1be>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80018aa:	9b06      	ldr	r3, [sp, #24]
 80018ac:	09db      	lsrs	r3, r3, #7
 80018ae:	001a      	movs	r2, r3
 80018b0:	2301      	movs	r3, #1
 80018b2:	4013      	ands	r3, r2
 80018b4:	d015      	beq.n	80018e2 <HAL_FDCAN_IRQHandler+0x1be>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80018b6:	9b01      	ldr	r3, [sp, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	22d4      	movs	r2, #212	@ 0xd4
 80018bc:	589b      	ldr	r3, [r3, r2]
 80018be:	9303      	str	r3, [sp, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80018c0:	9b01      	ldr	r3, [sp, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	22dc      	movs	r2, #220	@ 0xdc
 80018c6:	589a      	ldr	r2, [r3, r2]
 80018c8:	9b03      	ldr	r3, [sp, #12]
 80018ca:	4013      	ands	r3, r2
 80018cc:	9303      	str	r3, [sp, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80018ce:	9b01      	ldr	r3, [sp, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2280      	movs	r2, #128	@ 0x80
 80018d4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80018d6:	9a03      	ldr	r2, [sp, #12]
 80018d8:	9b01      	ldr	r3, [sp, #4]
 80018da:	0011      	movs	r1, r2
 80018dc:	0018      	movs	r0, r3
 80018de:	f000 f877 	bl	80019d0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80018e2:	9b05      	ldr	r3, [sp, #20]
 80018e4:	0b5b      	lsrs	r3, r3, #13
 80018e6:	001a      	movs	r2, r3
 80018e8:	2301      	movs	r3, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	d00e      	beq.n	800190c <HAL_FDCAN_IRQHandler+0x1e8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80018ee:	9b06      	ldr	r3, [sp, #24]
 80018f0:	0b5b      	lsrs	r3, r3, #13
 80018f2:	001a      	movs	r2, r3
 80018f4:	2301      	movs	r3, #1
 80018f6:	4013      	ands	r3, r2
 80018f8:	d008      	beq.n	800190c <HAL_FDCAN_IRQHandler+0x1e8>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80018fa:	9b01      	ldr	r3, [sp, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2280      	movs	r2, #128	@ 0x80
 8001900:	0192      	lsls	r2, r2, #6
 8001902:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001904:	9b01      	ldr	r3, [sp, #4]
 8001906:	0018      	movs	r0, r3
 8001908:	f000 f86e 	bl	80019e8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	0bdb      	lsrs	r3, r3, #15
 8001910:	001a      	movs	r2, r3
 8001912:	2301      	movs	r3, #1
 8001914:	4013      	ands	r3, r2
 8001916:	d00e      	beq.n	8001936 <HAL_FDCAN_IRQHandler+0x212>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001918:	9b06      	ldr	r3, [sp, #24]
 800191a:	0bdb      	lsrs	r3, r3, #15
 800191c:	001a      	movs	r2, r3
 800191e:	2301      	movs	r3, #1
 8001920:	4013      	ands	r3, r2
 8001922:	d008      	beq.n	8001936 <HAL_FDCAN_IRQHandler+0x212>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001924:	9b01      	ldr	r3, [sp, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2280      	movs	r2, #128	@ 0x80
 800192a:	0212      	lsls	r2, r2, #8
 800192c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800192e:	9b01      	ldr	r3, [sp, #4]
 8001930:	0018      	movs	r0, r3
 8001932:	f000 f85e 	bl	80019f2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001936:	9b05      	ldr	r3, [sp, #20]
 8001938:	0b9b      	lsrs	r3, r3, #14
 800193a:	001a      	movs	r2, r3
 800193c:	2301      	movs	r3, #1
 800193e:	4013      	ands	r3, r2
 8001940:	d010      	beq.n	8001964 <HAL_FDCAN_IRQHandler+0x240>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001942:	9b06      	ldr	r3, [sp, #24]
 8001944:	0b9b      	lsrs	r3, r3, #14
 8001946:	001a      	movs	r2, r3
 8001948:	2301      	movs	r3, #1
 800194a:	4013      	ands	r3, r2
 800194c:	d00a      	beq.n	8001964 <HAL_FDCAN_IRQHandler+0x240>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800194e:	9b01      	ldr	r3, [sp, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2280      	movs	r2, #128	@ 0x80
 8001954:	01d2      	lsls	r2, r2, #7
 8001956:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001958:	9b01      	ldr	r3, [sp, #4]
 800195a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800195c:	2280      	movs	r2, #128	@ 0x80
 800195e:	431a      	orrs	r2, r3
 8001960:	9b01      	ldr	r3, [sp, #4]
 8001962:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001964:	9b07      	ldr	r3, [sp, #28]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d009      	beq.n	800197e <HAL_FDCAN_IRQHandler+0x25a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800196a:	9b01      	ldr	r3, [sp, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	9a07      	ldr	r2, [sp, #28]
 8001970:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001972:	9a07      	ldr	r2, [sp, #28]
 8001974:	9b01      	ldr	r3, [sp, #4]
 8001976:	0011      	movs	r1, r2
 8001978:	0018      	movs	r0, r3
 800197a:	f000 f849 	bl	8001a10 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800197e:	9b08      	ldr	r3, [sp, #32]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d009      	beq.n	8001998 <HAL_FDCAN_IRQHandler+0x274>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	9a08      	ldr	r2, [sp, #32]
 800198a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800198c:	9b01      	ldr	r3, [sp, #4]
 800198e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001990:	9b08      	ldr	r3, [sp, #32]
 8001992:	431a      	orrs	r2, r3
 8001994:	9b01      	ldr	r3, [sp, #4]
 8001996:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001998:	9b01      	ldr	r3, [sp, #4]
 800199a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_FDCAN_IRQHandler+0x284>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80019a0:	9b01      	ldr	r3, [sp, #4]
 80019a2:	0018      	movs	r0, r3
 80019a4:	f000 f82f 	bl	8001a06 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80019a8:	46c0      	nop			@ (mov r8, r8)
 80019aa:	b00d      	add	sp, #52	@ 0x34
 80019ac:	bd00      	pop	{pc}

080019ae <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80019ae:	b082      	sub	sp, #8
 80019b0:	9001      	str	r0, [sp, #4]
 80019b2:	9100      	str	r1, [sp, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80019b4:	46c0      	nop			@ (mov r8, r8)
 80019b6:	b002      	add	sp, #8
 80019b8:	4770      	bx	lr

080019ba <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80019ba:	b082      	sub	sp, #8
 80019bc:	9001      	str	r0, [sp, #4]
 80019be:	9100      	str	r1, [sp, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80019c0:	46c0      	nop			@ (mov r8, r8)
 80019c2:	b002      	add	sp, #8
 80019c4:	4770      	bx	lr

080019c6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80019c6:	b082      	sub	sp, #8
 80019c8:	9001      	str	r0, [sp, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	b002      	add	sp, #8
 80019ce:	4770      	bx	lr

080019d0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80019d0:	b082      	sub	sp, #8
 80019d2:	9001      	str	r0, [sp, #4]
 80019d4:	9100      	str	r1, [sp, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	b002      	add	sp, #8
 80019da:	4770      	bx	lr

080019dc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80019dc:	b082      	sub	sp, #8
 80019de:	9001      	str	r0, [sp, #4]
 80019e0:	9100      	str	r1, [sp, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	b002      	add	sp, #8
 80019e6:	4770      	bx	lr

080019e8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80019e8:	b082      	sub	sp, #8
 80019ea:	9001      	str	r0, [sp, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80019ec:	46c0      	nop			@ (mov r8, r8)
 80019ee:	b002      	add	sp, #8
 80019f0:	4770      	bx	lr

080019f2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80019f2:	b082      	sub	sp, #8
 80019f4:	9001      	str	r0, [sp, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80019f6:	46c0      	nop			@ (mov r8, r8)
 80019f8:	b002      	add	sp, #8
 80019fa:	4770      	bx	lr

080019fc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80019fc:	b082      	sub	sp, #8
 80019fe:	9001      	str	r0, [sp, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001a00:	46c0      	nop			@ (mov r8, r8)
 8001a02:	b002      	add	sp, #8
 8001a04:	4770      	bx	lr

08001a06 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001a06:	b082      	sub	sp, #8
 8001a08:	9001      	str	r0, [sp, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	b002      	add	sp, #8
 8001a0e:	4770      	bx	lr

08001a10 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001a10:	b082      	sub	sp, #8
 8001a12:	9001      	str	r0, [sp, #4]
 8001a14:	9100      	str	r1, [sp, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	b002      	add	sp, #8
 8001a1a:	4770      	bx	lr

08001a1c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	9001      	str	r0, [sp, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001a20:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae0 <FDCAN_CalcultateRamBlockAddresses+0xc4>)
 8001a22:	9302      	str	r3, [sp, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001a24:	9b01      	ldr	r3, [sp, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a2e      	ldr	r2, [pc, #184]	@ (8001ae4 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d105      	bne.n	8001a3a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001a2e:	9b02      	ldr	r3, [sp, #8]
 8001a30:	22d4      	movs	r2, #212	@ 0xd4
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	4694      	mov	ip, r2
 8001a36:	4463      	add	r3, ip
 8001a38:	9302      	str	r3, [sp, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001a3a:	9b01      	ldr	r3, [sp, #4]
 8001a3c:	9a02      	ldr	r2, [sp, #8]
 8001a3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001a40:	9b01      	ldr	r3, [sp, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2280      	movs	r2, #128	@ 0x80
 8001a46:	589b      	ldr	r3, [r3, r2]
 8001a48:	4a27      	ldr	r2, [pc, #156]	@ (8001ae8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	9b01      	ldr	r3, [sp, #4]
 8001a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a52:	041a      	lsls	r2, r3, #16
 8001a54:	9b01      	ldr	r3, [sp, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	2180      	movs	r1, #128	@ 0x80
 8001a5c:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001a5e:	9b02      	ldr	r3, [sp, #8]
 8001a60:	3370      	adds	r3, #112	@ 0x70
 8001a62:	001a      	movs	r2, r3
 8001a64:	9b01      	ldr	r3, [sp, #4]
 8001a66:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001a68:	9b01      	ldr	r3, [sp, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2280      	movs	r2, #128	@ 0x80
 8001a6e:	589b      	ldr	r3, [r3, r2]
 8001a70:	4a1e      	ldr	r2, [pc, #120]	@ (8001aec <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	9b01      	ldr	r3, [sp, #4]
 8001a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a7a:	061a      	lsls	r2, r3, #24
 8001a7c:	9b01      	ldr	r3, [sp, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	2180      	movs	r1, #128	@ 0x80
 8001a84:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001a86:	9b02      	ldr	r3, [sp, #8]
 8001a88:	33b0      	adds	r3, #176	@ 0xb0
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	9b01      	ldr	r3, [sp, #4]
 8001a8e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001a90:	9b02      	ldr	r3, [sp, #8]
 8001a92:	3389      	adds	r3, #137	@ 0x89
 8001a94:	33ff      	adds	r3, #255	@ 0xff
 8001a96:	001a      	movs	r2, r3
 8001a98:	9b01      	ldr	r3, [sp, #4]
 8001a9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001a9c:	9b02      	ldr	r3, [sp, #8]
 8001a9e:	2298      	movs	r2, #152	@ 0x98
 8001aa0:	0092      	lsls	r2, r2, #2
 8001aa2:	189a      	adds	r2, r3, r2
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001aa8:	9b02      	ldr	r3, [sp, #8]
 8001aaa:	229e      	movs	r2, #158	@ 0x9e
 8001aac:	0092      	lsls	r2, r2, #2
 8001aae:	189a      	adds	r2, r3, r2
 8001ab0:	9b01      	ldr	r3, [sp, #4]
 8001ab2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ab4:	9b02      	ldr	r3, [sp, #8]
 8001ab6:	9303      	str	r3, [sp, #12]
 8001ab8:	e005      	b.n	8001ac6 <FDCAN_CalcultateRamBlockAddresses+0xaa>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001aba:	9b03      	ldr	r3, [sp, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ac0:	9b03      	ldr	r3, [sp, #12]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	9303      	str	r3, [sp, #12]
 8001ac6:	9b02      	ldr	r3, [sp, #8]
 8001ac8:	22d4      	movs	r2, #212	@ 0xd4
 8001aca:	0092      	lsls	r2, r2, #2
 8001acc:	4694      	mov	ip, r2
 8001ace:	4463      	add	r3, ip
 8001ad0:	9a03      	ldr	r2, [sp, #12]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d3f1      	bcc.n	8001aba <FDCAN_CalcultateRamBlockAddresses+0x9e>
  }
}
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	46c0      	nop			@ (mov r8, r8)
 8001ada:	b004      	add	sp, #16
 8001adc:	4770      	bx	lr
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	4000b400 	.word	0x4000b400
 8001ae4:	40006800 	.word	0x40006800
 8001ae8:	ffe0ffff 	.word	0xffe0ffff
 8001aec:	f0ffffff 	.word	0xf0ffffff

08001af0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001af0:	b088      	sub	sp, #32
 8001af2:	9003      	str	r0, [sp, #12]
 8001af4:	9102      	str	r1, [sp, #8]
 8001af6:	9201      	str	r2, [sp, #4]
 8001af8:	9300      	str	r3, [sp, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001afa:	9b02      	ldr	r3, [sp, #8]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10a      	bne.n	8001b18 <FDCAN_CopyMessageToRAM+0x28>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001b02:	9b02      	ldr	r3, [sp, #8]
 8001b04:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001b06:	9b02      	ldr	r3, [sp, #8]
 8001b08:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001b0a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001b0c:	9b02      	ldr	r3, [sp, #8]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001b12:	4313      	orrs	r3, r2
 8001b14:	9307      	str	r3, [sp, #28]
 8001b16:	e00b      	b.n	8001b30 <FDCAN_CopyMessageToRAM+0x40>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001b18:	9b02      	ldr	r3, [sp, #8]
 8001b1a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001b1c:	9b02      	ldr	r3, [sp, #8]
 8001b1e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001b20:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001b22:	9b02      	ldr	r3, [sp, #8]
 8001b24:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001b26:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001b28:	2280      	movs	r2, #128	@ 0x80
 8001b2a:	05d2      	lsls	r2, r2, #23
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	9307      	str	r3, [sp, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001b30:	9b02      	ldr	r3, [sp, #8]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001b36:	9b02      	ldr	r3, [sp, #8]
 8001b38:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001b3a:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001b3c:	9b02      	ldr	r3, [sp, #8]
 8001b3e:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001b40:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001b42:	9b02      	ldr	r3, [sp, #8]
 8001b44:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001b46:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001b48:	9b02      	ldr	r3, [sp, #8]
 8001b4a:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	9304      	str	r3, [sp, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001b50:	9b03      	ldr	r3, [sp, #12]
 8001b52:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001b54:	9a00      	ldr	r2, [sp, #0]
 8001b56:	0013      	movs	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	189b      	adds	r3, r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	18cb      	adds	r3, r1, r3
 8001b60:	9306      	str	r3, [sp, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001b62:	9b06      	ldr	r3, [sp, #24]
 8001b64:	9a07      	ldr	r2, [sp, #28]
 8001b66:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001b68:	9b06      	ldr	r3, [sp, #24]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	9306      	str	r3, [sp, #24]
  *TxAddress = TxElementW2;
 8001b6e:	9b06      	ldr	r3, [sp, #24]
 8001b70:	9a04      	ldr	r2, [sp, #16]
 8001b72:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001b74:	9b06      	ldr	r3, [sp, #24]
 8001b76:	3304      	adds	r3, #4
 8001b78:	9306      	str	r3, [sp, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	9305      	str	r3, [sp, #20]
 8001b7e:	e020      	b.n	8001bc2 <FDCAN_CopyMessageToRAM+0xd2>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b80:	9b05      	ldr	r3, [sp, #20]
 8001b82:	3303      	adds	r3, #3
 8001b84:	9a01      	ldr	r2, [sp, #4]
 8001b86:	18d3      	adds	r3, r2, r3
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001b8c:	9b05      	ldr	r3, [sp, #20]
 8001b8e:	3302      	adds	r3, #2
 8001b90:	9901      	ldr	r1, [sp, #4]
 8001b92:	18cb      	adds	r3, r1, r3
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b98:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001b9a:	9b05      	ldr	r3, [sp, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	9901      	ldr	r1, [sp, #4]
 8001ba0:	18cb      	adds	r3, r1, r3
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001ba6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001ba8:	9901      	ldr	r1, [sp, #4]
 8001baa:	9a05      	ldr	r2, [sp, #20]
 8001bac:	188a      	adds	r2, r1, r2
 8001bae:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001bb0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001bb2:	9b06      	ldr	r3, [sp, #24]
 8001bb4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001bb6:	9b06      	ldr	r3, [sp, #24]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	9306      	str	r3, [sp, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001bbc:	9b05      	ldr	r3, [sp, #20]
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	9305      	str	r3, [sp, #20]
 8001bc2:	9b02      	ldr	r3, [sp, #8]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	0c1b      	lsrs	r3, r3, #16
 8001bc8:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <FDCAN_CopyMessageToRAM+0xec>)
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	001a      	movs	r2, r3
 8001bce:	9b05      	ldr	r3, [sp, #20]
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d3d5      	bcc.n	8001b80 <FDCAN_CopyMessageToRAM+0x90>
  }
}
 8001bd4:	46c0      	nop			@ (mov r8, r8)
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	b008      	add	sp, #32
 8001bda:	4770      	bx	lr
 8001bdc:	08003418 	.word	0x08003418

08001be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001be0:	b500      	push	{lr}
 8001be2:	b087      	sub	sp, #28
 8001be4:	9001      	str	r0, [sp, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001be6:	2313      	movs	r3, #19
 8001be8:	446b      	add	r3, sp
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bee:	2312      	movs	r3, #18
 8001bf0:	446b      	add	r3, sp
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bf6:	9b01      	ldr	r3, [sp, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	2380      	movs	r3, #128	@ 0x80
 8001bfc:	029b      	lsls	r3, r3, #10
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d100      	bne.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001c02:	e0ae      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c04:	2311      	movs	r3, #17
 8001c06:	446b      	add	r3, sp
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0c:	4b47      	ldr	r3, [pc, #284]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	055b      	lsls	r3, r3, #21
 8001c14:	4013      	ands	r3, r2
 8001c16:	d111      	bne.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c18:	4b44      	ldr	r3, [pc, #272]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c1c:	4b43      	ldr	r3, [pc, #268]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c1e:	2180      	movs	r1, #128	@ 0x80
 8001c20:	0549      	lsls	r1, r1, #21
 8001c22:	430a      	orrs	r2, r1
 8001c24:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c26:	4b41      	ldr	r3, [pc, #260]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c2a:	2380      	movs	r3, #128	@ 0x80
 8001c2c:	055b      	lsls	r3, r3, #21
 8001c2e:	4013      	ands	r3, r2
 8001c30:	9302      	str	r3, [sp, #8]
 8001c32:	9b02      	ldr	r3, [sp, #8]
      pwrclkchanged = SET;
 8001c34:	2311      	movs	r3, #17
 8001c36:	446b      	add	r3, sp
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b3b      	ldr	r3, [pc, #236]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c42:	2180      	movs	r1, #128	@ 0x80
 8001c44:	0049      	lsls	r1, r1, #1
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c4a:	f7fe fc3d 	bl	80004c8 <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	9303      	str	r3, [sp, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c52:	e00b      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c54:	f7fe fc38 	bl	80004c8 <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	9b03      	ldr	r3, [sp, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d904      	bls.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001c62:	2313      	movs	r3, #19
 8001c64:	446b      	add	r3, sp
 8001c66:	2203      	movs	r2, #3
 8001c68:	701a      	strb	r2, [r3, #0]
        break;
 8001c6a:	e005      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c6c:	4b30      	ldr	r3, [pc, #192]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	@ 0x80
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4013      	ands	r3, r2
 8001c76:	d0ed      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001c78:	2313      	movs	r3, #19
 8001c7a:	446b      	add	r3, sp
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d15e      	bne.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c82:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c86:	23c0      	movs	r3, #192	@ 0xc0
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	9305      	str	r3, [sp, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c8e:	9b05      	ldr	r3, [sp, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d019      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001c94:	9b01      	ldr	r3, [sp, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	9a05      	ldr	r2, [sp, #20]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d014      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca2:	4a24      	ldr	r2, [pc, #144]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	9305      	str	r3, [sp, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ca8:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001caa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cac:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cae:	2180      	movs	r1, #128	@ 0x80
 8001cb0:	0249      	lsls	r1, r1, #9
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cba:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cbc:	491e      	ldr	r1, [pc, #120]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cc4:	9a05      	ldr	r2, [sp, #20]
 8001cc6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cc8:	9b05      	ldr	r3, [sp, #20]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d016      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7fe fbfa 	bl	80004c8 <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	9303      	str	r3, [sp, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd8:	e00c      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7fe fbf5 	bl	80004c8 <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	9b03      	ldr	r3, [sp, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	4a15      	ldr	r2, [pc, #84]	@ (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d904      	bls.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001cea:	2313      	movs	r3, #19
 8001cec:	446b      	add	r3, sp
 8001cee:	2203      	movs	r2, #3
 8001cf0:	701a      	strb	r2, [r3, #0]
            break;
 8001cf2:	e004      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d0ed      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001cfe:	2313      	movs	r3, #19
 8001d00:	446b      	add	r3, sp
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10a      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d08:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0c:	4a09      	ldr	r2, [pc, #36]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	9b01      	ldr	r3, [sp, #4]
 8001d14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d16:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d1c:	e016      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d1e:	2312      	movs	r3, #18
 8001d20:	446b      	add	r3, sp
 8001d22:	2213      	movs	r2, #19
 8001d24:	446a      	add	r2, sp
 8001d26:	7812      	ldrb	r2, [r2, #0]
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40007000 	.word	0x40007000
 8001d34:	fffffcff 	.word	0xfffffcff
 8001d38:	fffeffff 	.word	0xfffeffff
 8001d3c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d40:	2312      	movs	r3, #18
 8001d42:	446b      	add	r3, sp
 8001d44:	2213      	movs	r2, #19
 8001d46:	446a      	add	r2, sp
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d4c:	2311      	movs	r3, #17
 8001d4e:	446b      	add	r3, sp
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d105      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d56:	4bb6      	ldr	r3, [pc, #728]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d5a:	4bb5      	ldr	r3, [pc, #724]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d5c:	49b5      	ldr	r1, [pc, #724]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001d5e:	400a      	ands	r2, r1
 8001d60:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d62:	9b01      	ldr	r3, [sp, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d6c:	4bb0      	ldr	r3, [pc, #704]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d70:	2203      	movs	r2, #3
 8001d72:	4393      	bics	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	9b01      	ldr	r3, [sp, #4]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4bad      	ldr	r3, [pc, #692]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d80:	9b01      	ldr	r3, [sp, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2202      	movs	r2, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	d009      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d8a:	4ba9      	ldr	r3, [pc, #676]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8e:	220c      	movs	r2, #12
 8001d90:	4393      	bics	r3, r2
 8001d92:	0019      	movs	r1, r3
 8001d94:	9b01      	ldr	r3, [sp, #4]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	4ba5      	ldr	r3, [pc, #660]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d9e:	9b01      	ldr	r3, [sp, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2204      	movs	r2, #4
 8001da4:	4013      	ands	r3, r2
 8001da6:	d009      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001da8:	4ba1      	ldr	r3, [pc, #644]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dac:	2230      	movs	r2, #48	@ 0x30
 8001dae:	4393      	bics	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	9b01      	ldr	r3, [sp, #4]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	4b9e      	ldr	r3, [pc, #632]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dbc:	9b01      	ldr	r3, [sp, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d009      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dc6:	4b9a      	ldr	r3, [pc, #616]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dca:	4a9b      	ldr	r2, [pc, #620]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	9b01      	ldr	r3, [sp, #4]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	4b96      	ldr	r3, [pc, #600]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001dda:	9b01      	ldr	r3, [sp, #4]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	2380      	movs	r3, #128	@ 0x80
 8001de0:	015b      	lsls	r3, r3, #5
 8001de2:	4013      	ands	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001de6:	4b92      	ldr	r3, [pc, #584]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dea:	4a94      	ldr	r2, [pc, #592]	@ (800203c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	0019      	movs	r1, r3
 8001df0:	9b01      	ldr	r3, [sp, #4]
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	4b8e      	ldr	r3, [pc, #568]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001df6:	430a      	orrs	r2, r1
 8001df8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001dfa:	9b01      	ldr	r3, [sp, #4]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	@ 0x80
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	d009      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e06:	4b8a      	ldr	r3, [pc, #552]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0a:	4a8d      	ldr	r2, [pc, #564]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	9b01      	ldr	r3, [sp, #4]
 8001e12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e14:	4b86      	ldr	r3, [pc, #536]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e1a:	9b01      	ldr	r3, [sp, #4]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	2380      	movs	r3, #128	@ 0x80
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4013      	ands	r3, r2
 8001e24:	d009      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e26:	4b82      	ldr	r3, [pc, #520]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2a:	4a86      	ldr	r2, [pc, #536]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	0019      	movs	r1, r3
 8001e30:	9b01      	ldr	r3, [sp, #4]
 8001e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e34:	4b7e      	ldr	r3, [pc, #504]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e36:	430a      	orrs	r2, r1
 8001e38:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e3a:	9b01      	ldr	r3, [sp, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	4013      	ands	r3, r2
 8001e42:	d009      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e44:	4b7a      	ldr	r3, [pc, #488]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e48:	4a7f      	ldr	r2, [pc, #508]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	9b01      	ldr	r3, [sp, #4]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	4b77      	ldr	r3, [pc, #476]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e58:	9b01      	ldr	r3, [sp, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2240      	movs	r2, #64	@ 0x40
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d009      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e62:	4b73      	ldr	r3, [pc, #460]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e66:	4a79      	ldr	r2, [pc, #484]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	9b01      	ldr	r3, [sp, #4]
 8001e6e:	69da      	ldr	r2, [r3, #28]
 8001e70:	4b6f      	ldr	r3, [pc, #444]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e72:	430a      	orrs	r2, r1
 8001e74:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e76:	9b01      	ldr	r3, [sp, #4]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	2380      	movs	r3, #128	@ 0x80
 8001e7c:	01db      	lsls	r3, r3, #7
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d015      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e82:	4b6b      	ldr	r3, [pc, #428]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	0899      	lsrs	r1, r3, #2
 8001e8a:	9b01      	ldr	r3, [sp, #4]
 8001e8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e8e:	4b68      	ldr	r3, [pc, #416]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e90:	430a      	orrs	r2, r1
 8001e92:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e94:	9b01      	ldr	r3, [sp, #4]
 8001e96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e98:	2380      	movs	r3, #128	@ 0x80
 8001e9a:	05db      	lsls	r3, r3, #23
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d106      	bne.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ea0:	4b63      	ldr	r3, [pc, #396]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	4b62      	ldr	r3, [pc, #392]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea6:	2180      	movs	r1, #128	@ 0x80
 8001ea8:	0249      	lsls	r1, r1, #9
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001eae:	9b01      	ldr	r3, [sp, #4]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	@ 0x80
 8001eb4:	031b      	lsls	r3, r3, #12
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d009      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001eba:	4b5d      	ldr	r3, [pc, #372]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebe:	2240      	movs	r2, #64	@ 0x40
 8001ec0:	4393      	bics	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	9b01      	ldr	r3, [sp, #4]
 8001ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ec8:	4b59      	ldr	r3, [pc, #356]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001ece:	9b01      	ldr	r3, [sp, #4]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	2380      	movs	r3, #128	@ 0x80
 8001ed4:	039b      	lsls	r3, r3, #14
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d016      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001eda:	4b55      	ldr	r3, [pc, #340]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ede:	4a5c      	ldr	r2, [pc, #368]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	9b01      	ldr	r3, [sp, #4]
 8001ee6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ee8:	4b51      	ldr	r3, [pc, #324]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001eee:	9b01      	ldr	r3, [sp, #4]
 8001ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ef2:	2380      	movs	r3, #128	@ 0x80
 8001ef4:	03db      	lsls	r3, r3, #15
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d106      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001efa:	4b4d      	ldr	r3, [pc, #308]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	4b4c      	ldr	r3, [pc, #304]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f00:	2180      	movs	r1, #128	@ 0x80
 8001f02:	0449      	lsls	r1, r1, #17
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f08:	9b01      	ldr	r3, [sp, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	03db      	lsls	r3, r3, #15
 8001f10:	4013      	ands	r3, r2
 8001f12:	d016      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001f14:	4b46      	ldr	r3, [pc, #280]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f18:	4a4e      	ldr	r2, [pc, #312]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	9b01      	ldr	r3, [sp, #4]
 8001f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f22:	4b43      	ldr	r3, [pc, #268]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f24:	430a      	orrs	r2, r1
 8001f26:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f28:	9b01      	ldr	r3, [sp, #4]
 8001f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f2c:	2380      	movs	r3, #128	@ 0x80
 8001f2e:	045b      	lsls	r3, r3, #17
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d106      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f34:	4b3e      	ldr	r3, [pc, #248]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	4b3d      	ldr	r3, [pc, #244]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f3a:	2180      	movs	r1, #128	@ 0x80
 8001f3c:	0449      	lsls	r1, r1, #17
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f42:	9b01      	ldr	r3, [sp, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d014      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f4e:	4b38      	ldr	r3, [pc, #224]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	2203      	movs	r2, #3
 8001f54:	4393      	bics	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	9b01      	ldr	r3, [sp, #4]
 8001f5a:	6a1a      	ldr	r2, [r3, #32]
 8001f5c:	4b34      	ldr	r3, [pc, #208]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f62:	9b01      	ldr	r3, [sp, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d106      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f6a:	4b31      	ldr	r3, [pc, #196]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	4b30      	ldr	r3, [pc, #192]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f70:	2180      	movs	r1, #128	@ 0x80
 8001f72:	0249      	lsls	r1, r1, #9
 8001f74:	430a      	orrs	r2, r1
 8001f76:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001f78:	9b01      	ldr	r3, [sp, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	019b      	lsls	r3, r3, #6
 8001f80:	4013      	ands	r3, r2
 8001f82:	d014      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001f84:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	220c      	movs	r2, #12
 8001f8a:	4393      	bics	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	9b01      	ldr	r3, [sp, #4]
 8001f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f92:	4b27      	ldr	r3, [pc, #156]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f94:	430a      	orrs	r2, r1
 8001f96:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001f98:	9b01      	ldr	r3, [sp, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d106      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fa0:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	4b22      	ldr	r3, [pc, #136]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fa6:	2180      	movs	r1, #128	@ 0x80
 8001fa8:	0249      	lsls	r1, r1, #9
 8001faa:	430a      	orrs	r2, r1
 8001fac:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fae:	9b01      	ldr	r3, [sp, #4]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	2380      	movs	r3, #128	@ 0x80
 8001fb4:	045b      	lsls	r3, r3, #17
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d016      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fba:	4b1d      	ldr	r3, [pc, #116]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbe:	4a22      	ldr	r2, [pc, #136]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	9b01      	ldr	r3, [sp, #4]
 8001fc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fc8:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fce:	9b01      	ldr	r3, [sp, #4]
 8001fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	019b      	lsls	r3, r3, #6
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d106      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	4b14      	ldr	r3, [pc, #80]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe0:	2180      	movs	r1, #128	@ 0x80
 8001fe2:	0449      	lsls	r1, r1, #17
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001fe8:	9b01      	ldr	r3, [sp, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	049b      	lsls	r3, r3, #18
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d016      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff8:	4a10      	ldr	r2, [pc, #64]	@ (800203c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	9b01      	ldr	r3, [sp, #4]
 8002000:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002002:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002004:	430a      	orrs	r2, r1
 8002006:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002008:	9b01      	ldr	r3, [sp, #4]
 800200a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	429a      	cmp	r2, r3
 8002012:	d106      	bne.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800201a:	2180      	movs	r1, #128	@ 0x80
 800201c:	0449      	lsls	r1, r1, #17
 800201e:	430a      	orrs	r2, r1
 8002020:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002022:	2312      	movs	r3, #18
 8002024:	446b      	add	r3, sp
 8002026:	781b      	ldrb	r3, [r3, #0]
}
 8002028:	0018      	movs	r0, r3
 800202a:	b007      	add	sp, #28
 800202c:	bd00      	pop	{pc}
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	40021000 	.word	0x40021000
 8002034:	efffffff 	.word	0xefffffff
 8002038:	fffff3ff 	.word	0xfffff3ff
 800203c:	fffffcff 	.word	0xfffffcff
 8002040:	fff3ffff 	.word	0xfff3ffff
 8002044:	ffcfffff 	.word	0xffcfffff
 8002048:	ffffcfff 	.word	0xffffcfff
 800204c:	ffff3fff 	.word	0xffff3fff
 8002050:	ffbfffff 	.word	0xffbfffff
 8002054:	feffffff 	.word	0xfeffffff

08002058 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002058:	b510      	push	{r4, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	9001      	str	r0, [sp, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800205e:	230f      	movs	r3, #15
 8002060:	446b      	add	r3, sp
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002066:	9b01      	ldr	r3, [sp, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d100      	bne.n	800206e <HAL_RTC_Init+0x16>
 800206c:	e08d      	b.n	800218a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800206e:	9b01      	ldr	r3, [sp, #4]
 8002070:	2229      	movs	r2, #41	@ 0x29
 8002072:	5c9b      	ldrb	r3, [r3, r2]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10b      	bne.n	8002092 <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800207a:	9b01      	ldr	r3, [sp, #4]
 800207c:	2228      	movs	r2, #40	@ 0x28
 800207e:	2100      	movs	r1, #0
 8002080:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002082:	9b01      	ldr	r3, [sp, #4]
 8002084:	2288      	movs	r2, #136	@ 0x88
 8002086:	0212      	lsls	r2, r2, #8
 8002088:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800208a:	9b01      	ldr	r3, [sp, #4]
 800208c:	0018      	movs	r0, r3
 800208e:	f7fe f901 	bl	8000294 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002092:	9b01      	ldr	r3, [sp, #4]
 8002094:	2229      	movs	r2, #41	@ 0x29
 8002096:	2102      	movs	r1, #2
 8002098:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800209a:	9b01      	ldr	r3, [sp, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2210      	movs	r2, #16
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b10      	cmp	r3, #16
 80020a6:	d063      	beq.n	8002170 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020a8:	9b01      	ldr	r3, [sp, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	22ca      	movs	r2, #202	@ 0xca
 80020ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80020b0:	9b01      	ldr	r3, [sp, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2253      	movs	r2, #83	@ 0x53
 80020b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80020b8:	240f      	movs	r4, #15
 80020ba:	446c      	add	r4, sp
 80020bc:	9b01      	ldr	r3, [sp, #4]
 80020be:	0018      	movs	r0, r3
 80020c0:	f000 faef 	bl	80026a2 <RTC_EnterInitMode>
 80020c4:	0003      	movs	r3, r0
 80020c6:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80020c8:	230f      	movs	r3, #15
 80020ca:	446b      	add	r3, sp
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d12d      	bne.n	800212e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80020d2:	9b01      	ldr	r3, [sp, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699a      	ldr	r2, [r3, #24]
 80020d8:	9b01      	ldr	r3, [sp, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	492e      	ldr	r1, [pc, #184]	@ (8002198 <HAL_RTC_Init+0x140>)
 80020de:	400a      	ands	r2, r1
 80020e0:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80020e2:	9b01      	ldr	r3, [sp, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6999      	ldr	r1, [r3, #24]
 80020e8:	9b01      	ldr	r3, [sp, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	9b01      	ldr	r3, [sp, #4]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	9b01      	ldr	r3, [sp, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	9b01      	ldr	r3, [sp, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002100:	9b01      	ldr	r3, [sp, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	9a01      	ldr	r2, [sp, #4]
 8002106:	6912      	ldr	r2, [r2, #16]
 8002108:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800210a:	9b01      	ldr	r3, [sp, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6919      	ldr	r1, [r3, #16]
 8002110:	9b01      	ldr	r3, [sp, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	041a      	lsls	r2, r3, #16
 8002116:	9b01      	ldr	r3, [sp, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800211e:	240f      	movs	r4, #15
 8002120:	446c      	add	r4, sp
 8002122:	9b01      	ldr	r3, [sp, #4]
 8002124:	0018      	movs	r0, r3
 8002126:	f000 faff 	bl	8002728 <RTC_ExitInitMode>
 800212a:	0003      	movs	r3, r0
 800212c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800212e:	230f      	movs	r3, #15
 8002130:	446b      	add	r3, sp
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d116      	bne.n	8002166 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002138:	9b01      	ldr	r3, [sp, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	9b01      	ldr	r3, [sp, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	00d2      	lsls	r2, r2, #3
 8002144:	08d2      	lsrs	r2, r2, #3
 8002146:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002148:	9b01      	ldr	r3, [sp, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6999      	ldr	r1, [r3, #24]
 800214e:	9b01      	ldr	r3, [sp, #4]
 8002150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002152:	9b01      	ldr	r3, [sp, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	431a      	orrs	r2, r3
 8002158:	9b01      	ldr	r3, [sp, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	431a      	orrs	r2, r3
 800215e:	9b01      	ldr	r3, [sp, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002166:	9b01      	ldr	r3, [sp, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	22ff      	movs	r2, #255	@ 0xff
 800216c:	625a      	str	r2, [r3, #36]	@ 0x24
 800216e:	e003      	b.n	8002178 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002170:	230f      	movs	r3, #15
 8002172:	446b      	add	r3, sp
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002178:	230f      	movs	r3, #15
 800217a:	446b      	add	r3, sp
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d103      	bne.n	800218a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002182:	9b01      	ldr	r3, [sp, #4]
 8002184:	2229      	movs	r2, #41	@ 0x29
 8002186:	2101      	movs	r1, #1
 8002188:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800218a:	230f      	movs	r3, #15
 800218c:	446b      	add	r3, sp
 800218e:	781b      	ldrb	r3, [r3, #0]
}
 8002190:	0018      	movs	r0, r3
 8002192:	b004      	add	sp, #16
 8002194:	bd10      	pop	{r4, pc}
 8002196:	46c0      	nop			@ (mov r8, r8)
 8002198:	fb8fffbf 	.word	0xfb8fffbf

0800219c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800219c:	b510      	push	{r4, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	9003      	str	r0, [sp, #12]
 80021a2:	9102      	str	r1, [sp, #8]
 80021a4:	9201      	str	r2, [sp, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021a6:	9b03      	ldr	r3, [sp, #12]
 80021a8:	2228      	movs	r2, #40	@ 0x28
 80021aa:	5c9b      	ldrb	r3, [r3, r2]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_RTC_SetTime+0x18>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e093      	b.n	80022dc <HAL_RTC_SetTime+0x140>
 80021b4:	9b03      	ldr	r3, [sp, #12]
 80021b6:	2228      	movs	r2, #40	@ 0x28
 80021b8:	2101      	movs	r1, #1
 80021ba:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021bc:	9b03      	ldr	r3, [sp, #12]
 80021be:	2229      	movs	r2, #41	@ 0x29
 80021c0:	2102      	movs	r1, #2
 80021c2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021c4:	9b03      	ldr	r3, [sp, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	22ca      	movs	r2, #202	@ 0xca
 80021ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80021cc:	9b03      	ldr	r3, [sp, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2253      	movs	r2, #83	@ 0x53
 80021d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80021d4:	2413      	movs	r4, #19
 80021d6:	446c      	add	r4, sp
 80021d8:	9b03      	ldr	r3, [sp, #12]
 80021da:	0018      	movs	r0, r3
 80021dc:	f000 fa61 	bl	80026a2 <RTC_EnterInitMode>
 80021e0:	0003      	movs	r3, r0
 80021e2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80021e4:	2313      	movs	r3, #19
 80021e6:	446b      	add	r3, sp
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d162      	bne.n	80022b4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80021ee:	9b01      	ldr	r3, [sp, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d125      	bne.n	8002240 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80021f4:	9b03      	ldr	r3, [sp, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2240      	movs	r2, #64	@ 0x40
 80021fc:	4013      	ands	r3, r2
 80021fe:	d102      	bne.n	8002206 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002200:	9b02      	ldr	r3, [sp, #8]
 8002202:	2200      	movs	r2, #0
 8002204:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002206:	9b02      	ldr	r3, [sp, #8]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	0018      	movs	r0, r3
 800220c:	f000 fad0 	bl	80027b0 <RTC_ByteToBcd2>
 8002210:	0003      	movs	r3, r0
 8002212:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002214:	9b02      	ldr	r3, [sp, #8]
 8002216:	785b      	ldrb	r3, [r3, #1]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 fac9 	bl	80027b0 <RTC_ByteToBcd2>
 800221e:	0003      	movs	r3, r0
 8002220:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002222:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002224:	9b02      	ldr	r3, [sp, #8]
 8002226:	789b      	ldrb	r3, [r3, #2]
 8002228:	0018      	movs	r0, r3
 800222a:	f000 fac1 	bl	80027b0 <RTC_ByteToBcd2>
 800222e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002230:	0022      	movs	r2, r4
 8002232:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002234:	9b02      	ldr	r3, [sp, #8]
 8002236:	78db      	ldrb	r3, [r3, #3]
 8002238:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800223a:	4313      	orrs	r3, r2
 800223c:	9305      	str	r3, [sp, #20]
 800223e:	e017      	b.n	8002270 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002240:	9b03      	ldr	r3, [sp, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2240      	movs	r2, #64	@ 0x40
 8002248:	4013      	ands	r3, r2
 800224a:	d102      	bne.n	8002252 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800224c:	9b02      	ldr	r3, [sp, #8]
 800224e:	2200      	movs	r2, #0
 8002250:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002252:	9b02      	ldr	r3, [sp, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002258:	9b02      	ldr	r3, [sp, #8]
 800225a:	785b      	ldrb	r3, [r3, #1]
 800225c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800225e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002260:	9a02      	ldr	r2, [sp, #8]
 8002262:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002264:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002266:	9b02      	ldr	r3, [sp, #8]
 8002268:	78db      	ldrb	r3, [r3, #3]
 800226a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800226c:	4313      	orrs	r3, r2
 800226e:	9305      	str	r3, [sp, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002270:	9b03      	ldr	r3, [sp, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	9a05      	ldr	r2, [sp, #20]
 8002276:	491b      	ldr	r1, [pc, #108]	@ (80022e4 <HAL_RTC_SetTime+0x148>)
 8002278:	400a      	ands	r2, r1
 800227a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800227c:	9b03      	ldr	r3, [sp, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	9b03      	ldr	r3, [sp, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4918      	ldr	r1, [pc, #96]	@ (80022e8 <HAL_RTC_SetTime+0x14c>)
 8002288:	400a      	ands	r2, r1
 800228a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800228c:	9b03      	ldr	r3, [sp, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6999      	ldr	r1, [r3, #24]
 8002292:	9b02      	ldr	r3, [sp, #8]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	9b02      	ldr	r3, [sp, #8]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	431a      	orrs	r2, r3
 800229c:	9b03      	ldr	r3, [sp, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80022a4:	2413      	movs	r4, #19
 80022a6:	446c      	add	r4, sp
 80022a8:	9b03      	ldr	r3, [sp, #12]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f000 fa3c 	bl	8002728 <RTC_ExitInitMode>
 80022b0:	0003      	movs	r3, r0
 80022b2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022b4:	9b03      	ldr	r3, [sp, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	22ff      	movs	r2, #255	@ 0xff
 80022ba:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 80022bc:	2313      	movs	r3, #19
 80022be:	446b      	add	r3, sp
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d103      	bne.n	80022ce <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80022c6:	9b03      	ldr	r3, [sp, #12]
 80022c8:	2229      	movs	r2, #41	@ 0x29
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80022ce:	9b03      	ldr	r3, [sp, #12]
 80022d0:	2228      	movs	r2, #40	@ 0x28
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]

  return status;
 80022d6:	2313      	movs	r3, #19
 80022d8:	446b      	add	r3, sp
 80022da:	781b      	ldrb	r3, [r3, #0]
}
 80022dc:	0018      	movs	r0, r3
 80022de:	b006      	add	sp, #24
 80022e0:	bd10      	pop	{r4, pc}
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	007f7f7f 	.word	0x007f7f7f
 80022e8:	fffbffff 	.word	0xfffbffff

080022ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022ec:	b510      	push	{r4, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	9003      	str	r0, [sp, #12]
 80022f2:	9102      	str	r1, [sp, #8]
 80022f4:	9201      	str	r2, [sp, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80022f6:	9b03      	ldr	r3, [sp, #12]
 80022f8:	2228      	movs	r2, #40	@ 0x28
 80022fa:	5c9b      	ldrb	r3, [r3, r2]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_RTC_SetDate+0x18>
 8002300:	2302      	movs	r3, #2
 8002302:	e07f      	b.n	8002404 <HAL_RTC_SetDate+0x118>
 8002304:	9b03      	ldr	r3, [sp, #12]
 8002306:	2228      	movs	r2, #40	@ 0x28
 8002308:	2101      	movs	r1, #1
 800230a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800230c:	9b03      	ldr	r3, [sp, #12]
 800230e:	2229      	movs	r2, #41	@ 0x29
 8002310:	2102      	movs	r1, #2
 8002312:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002314:	9b01      	ldr	r3, [sp, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10e      	bne.n	8002338 <HAL_RTC_SetDate+0x4c>
 800231a:	9b02      	ldr	r3, [sp, #8]
 800231c:	785b      	ldrb	r3, [r3, #1]
 800231e:	001a      	movs	r2, r3
 8002320:	2310      	movs	r3, #16
 8002322:	4013      	ands	r3, r2
 8002324:	d008      	beq.n	8002338 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002326:	9b02      	ldr	r3, [sp, #8]
 8002328:	785b      	ldrb	r3, [r3, #1]
 800232a:	2210      	movs	r2, #16
 800232c:	4393      	bics	r3, r2
 800232e:	b2db      	uxtb	r3, r3
 8002330:	330a      	adds	r3, #10
 8002332:	b2da      	uxtb	r2, r3
 8002334:	9b02      	ldr	r3, [sp, #8]
 8002336:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002338:	9b01      	ldr	r3, [sp, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11c      	bne.n	8002378 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800233e:	9b02      	ldr	r3, [sp, #8]
 8002340:	78db      	ldrb	r3, [r3, #3]
 8002342:	0018      	movs	r0, r3
 8002344:	f000 fa34 	bl	80027b0 <RTC_ByteToBcd2>
 8002348:	0003      	movs	r3, r0
 800234a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800234c:	9b02      	ldr	r3, [sp, #8]
 800234e:	785b      	ldrb	r3, [r3, #1]
 8002350:	0018      	movs	r0, r3
 8002352:	f000 fa2d 	bl	80027b0 <RTC_ByteToBcd2>
 8002356:	0003      	movs	r3, r0
 8002358:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800235a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800235c:	9b02      	ldr	r3, [sp, #8]
 800235e:	789b      	ldrb	r3, [r3, #2]
 8002360:	0018      	movs	r0, r3
 8002362:	f000 fa25 	bl	80027b0 <RTC_ByteToBcd2>
 8002366:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002368:	0022      	movs	r2, r4
 800236a:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800236c:	9b02      	ldr	r3, [sp, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002372:	4313      	orrs	r3, r2
 8002374:	9305      	str	r3, [sp, #20]
 8002376:	e00e      	b.n	8002396 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002378:	9b02      	ldr	r3, [sp, #8]
 800237a:	78db      	ldrb	r3, [r3, #3]
 800237c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800237e:	9b02      	ldr	r3, [sp, #8]
 8002380:	785b      	ldrb	r3, [r3, #1]
 8002382:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002384:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002386:	9a02      	ldr	r2, [sp, #8]
 8002388:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800238a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800238c:	9b02      	ldr	r3, [sp, #8]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002392:	4313      	orrs	r3, r2
 8002394:	9305      	str	r3, [sp, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002396:	9b03      	ldr	r3, [sp, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	22ca      	movs	r2, #202	@ 0xca
 800239c:	625a      	str	r2, [r3, #36]	@ 0x24
 800239e:	9b03      	ldr	r3, [sp, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2253      	movs	r2, #83	@ 0x53
 80023a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80023a6:	2413      	movs	r4, #19
 80023a8:	446c      	add	r4, sp
 80023aa:	9b03      	ldr	r3, [sp, #12]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f000 f978 	bl	80026a2 <RTC_EnterInitMode>
 80023b2:	0003      	movs	r3, r0
 80023b4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80023b6:	2313      	movs	r3, #19
 80023b8:	446b      	add	r3, sp
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10d      	bne.n	80023dc <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80023c0:	9b03      	ldr	r3, [sp, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	9a05      	ldr	r2, [sp, #20]
 80023c6:	4911      	ldr	r1, [pc, #68]	@ (800240c <HAL_RTC_SetDate+0x120>)
 80023c8:	400a      	ands	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80023cc:	2413      	movs	r4, #19
 80023ce:	446c      	add	r4, sp
 80023d0:	9b03      	ldr	r3, [sp, #12]
 80023d2:	0018      	movs	r0, r3
 80023d4:	f000 f9a8 	bl	8002728 <RTC_ExitInitMode>
 80023d8:	0003      	movs	r3, r0
 80023da:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023dc:	9b03      	ldr	r3, [sp, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	22ff      	movs	r2, #255	@ 0xff
 80023e2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80023e4:	2313      	movs	r3, #19
 80023e6:	446b      	add	r3, sp
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d103      	bne.n	80023f6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80023ee:	9b03      	ldr	r3, [sp, #12]
 80023f0:	2229      	movs	r2, #41	@ 0x29
 80023f2:	2101      	movs	r1, #1
 80023f4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80023f6:	9b03      	ldr	r3, [sp, #12]
 80023f8:	2228      	movs	r2, #40	@ 0x28
 80023fa:	2100      	movs	r1, #0
 80023fc:	5499      	strb	r1, [r3, r2]

  return status;
 80023fe:	2313      	movs	r3, #19
 8002400:	446b      	add	r3, sp
 8002402:	781b      	ldrb	r3, [r3, #0]
}
 8002404:	0018      	movs	r0, r3
 8002406:	b006      	add	sp, #24
 8002408:	bd10      	pop	{r4, pc}
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	00ffff3f 	.word	0x00ffff3f

08002410 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002410:	b510      	push	{r4, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	9003      	str	r0, [sp, #12]
 8002416:	9102      	str	r1, [sp, #8]
 8002418:	9201      	str	r2, [sp, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800241a:	9b03      	ldr	r3, [sp, #12]
 800241c:	2228      	movs	r2, #40	@ 0x28
 800241e:	5c9b      	ldrb	r3, [r3, r2]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_RTC_SetAlarm+0x18>
 8002424:	2302      	movs	r3, #2
 8002426:	e10c      	b.n	8002642 <HAL_RTC_SetAlarm+0x232>
 8002428:	9b03      	ldr	r3, [sp, #12]
 800242a:	2228      	movs	r2, #40	@ 0x28
 800242c:	2101      	movs	r1, #1
 800242e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002430:	9b03      	ldr	r3, [sp, #12]
 8002432:	2229      	movs	r2, #41	@ 0x29
 8002434:	2102      	movs	r1, #2
 8002436:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8002438:	9b01      	ldr	r3, [sp, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d136      	bne.n	80024ac <HAL_RTC_SetAlarm+0x9c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800243e:	9b03      	ldr	r3, [sp, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2240      	movs	r2, #64	@ 0x40
 8002446:	4013      	ands	r3, r2
 8002448:	d102      	bne.n	8002450 <HAL_RTC_SetAlarm+0x40>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800244a:	9b02      	ldr	r3, [sp, #8]
 800244c:	2200      	movs	r2, #0
 800244e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002450:	9b02      	ldr	r3, [sp, #8]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	0018      	movs	r0, r3
 8002456:	f000 f9ab 	bl	80027b0 <RTC_ByteToBcd2>
 800245a:	0003      	movs	r3, r0
 800245c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800245e:	9b02      	ldr	r3, [sp, #8]
 8002460:	785b      	ldrb	r3, [r3, #1]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f9a4 	bl	80027b0 <RTC_ByteToBcd2>
 8002468:	0003      	movs	r3, r0
 800246a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800246c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800246e:	9b02      	ldr	r3, [sp, #8]
 8002470:	789b      	ldrb	r3, [r3, #2]
 8002472:	0018      	movs	r0, r3
 8002474:	f000 f99c 	bl	80027b0 <RTC_ByteToBcd2>
 8002478:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800247a:	0022      	movs	r2, r4
 800247c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800247e:	9b02      	ldr	r3, [sp, #8]
 8002480:	78db      	ldrb	r3, [r3, #3]
 8002482:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002484:	431a      	orrs	r2, r3
 8002486:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002488:	9b02      	ldr	r3, [sp, #8]
 800248a:	2220      	movs	r2, #32
 800248c:	5c9b      	ldrb	r3, [r3, r2]
 800248e:	0018      	movs	r0, r3
 8002490:	f000 f98e 	bl	80027b0 <RTC_ByteToBcd2>
 8002494:	0003      	movs	r3, r0
 8002496:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002498:	0022      	movs	r2, r4
 800249a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800249c:	9b02      	ldr	r3, [sp, #8]
 800249e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80024a0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80024a2:	9b02      	ldr	r3, [sp, #8]
 80024a4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80024a6:	4313      	orrs	r3, r2
 80024a8:	9307      	str	r3, [sp, #28]
 80024aa:	e022      	b.n	80024f2 <HAL_RTC_SetAlarm+0xe2>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80024ac:	9b03      	ldr	r3, [sp, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2240      	movs	r2, #64	@ 0x40
 80024b4:	4013      	ands	r3, r2
 80024b6:	d102      	bne.n	80024be <HAL_RTC_SetAlarm+0xae>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80024b8:	9b02      	ldr	r3, [sp, #8]
 80024ba:	2200      	movs	r2, #0
 80024bc:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80024be:	9b02      	ldr	r3, [sp, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80024c4:	9b02      	ldr	r3, [sp, #8]
 80024c6:	785b      	ldrb	r3, [r3, #1]
 80024c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80024ca:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80024cc:	9a02      	ldr	r2, [sp, #8]
 80024ce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80024d0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80024d2:	9b02      	ldr	r3, [sp, #8]
 80024d4:	78db      	ldrb	r3, [r3, #3]
 80024d6:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80024d8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80024da:	9b02      	ldr	r3, [sp, #8]
 80024dc:	2120      	movs	r1, #32
 80024de:	5c5b      	ldrb	r3, [r3, r1]
 80024e0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80024e2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80024e4:	9b02      	ldr	r3, [sp, #8]
 80024e6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80024e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80024ea:	9b02      	ldr	r3, [sp, #8]
 80024ec:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80024ee:	4313      	orrs	r3, r2
 80024f0:	9307      	str	r3, [sp, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80024f2:	9b02      	ldr	r3, [sp, #8]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	9b02      	ldr	r3, [sp, #8]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	9306      	str	r3, [sp, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024fe:	9b03      	ldr	r3, [sp, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	22ca      	movs	r2, #202	@ 0xca
 8002504:	625a      	str	r2, [r3, #36]	@ 0x24
 8002506:	9b03      	ldr	r3, [sp, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2253      	movs	r2, #83	@ 0x53
 800250c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800250e:	9b02      	ldr	r3, [sp, #8]
 8002510:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	429a      	cmp	r2, r3
 8002518:	d143      	bne.n	80025a2 <HAL_RTC_SetAlarm+0x192>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800251a:	9b03      	ldr	r3, [sp, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699a      	ldr	r2, [r3, #24]
 8002520:	9b03      	ldr	r3, [sp, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4948      	ldr	r1, [pc, #288]	@ (8002648 <HAL_RTC_SetAlarm+0x238>)
 8002526:	400a      	ands	r2, r1
 8002528:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800252a:	9b03      	ldr	r3, [sp, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	9b03      	ldr	r3, [sp, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4945      	ldr	r1, [pc, #276]	@ (800264c <HAL_RTC_SetAlarm+0x23c>)
 8002536:	400a      	ands	r2, r1
 8002538:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 800253a:	f7fd ffc5 	bl	80004c8 <HAL_GetTick>
 800253e:	0003      	movs	r3, r0
 8002540:	9305      	str	r3, [sp, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002542:	e016      	b.n	8002572 <HAL_RTC_SetAlarm+0x162>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002544:	f7fd ffc0 	bl	80004c8 <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	9b05      	ldr	r3, [sp, #20]
 800254c:	1ad2      	subs	r2, r2, r3
 800254e:	23fa      	movs	r3, #250	@ 0xfa
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	429a      	cmp	r2, r3
 8002554:	d90d      	bls.n	8002572 <HAL_RTC_SetAlarm+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002556:	9b03      	ldr	r3, [sp, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	22ff      	movs	r2, #255	@ 0xff
 800255c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800255e:	9b03      	ldr	r3, [sp, #12]
 8002560:	2229      	movs	r2, #41	@ 0x29
 8002562:	2103      	movs	r1, #3
 8002564:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002566:	9b03      	ldr	r3, [sp, #12]
 8002568:	2228      	movs	r2, #40	@ 0x28
 800256a:	2100      	movs	r1, #0
 800256c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e067      	b.n	8002642 <HAL_RTC_SetAlarm+0x232>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002572:	9b03      	ldr	r3, [sp, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	4013      	ands	r3, r2
 800257c:	d0e2      	beq.n	8002544 <HAL_RTC_SetAlarm+0x134>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800257e:	9b03      	ldr	r3, [sp, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	9a07      	ldr	r2, [sp, #28]
 8002584:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002586:	9b03      	ldr	r3, [sp, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	9a06      	ldr	r2, [sp, #24]
 800258c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800258e:	9b03      	ldr	r3, [sp, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699a      	ldr	r2, [r3, #24]
 8002594:	9b03      	ldr	r3, [sp, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2180      	movs	r1, #128	@ 0x80
 800259a:	0049      	lsls	r1, r1, #1
 800259c:	430a      	orrs	r2, r1
 800259e:	619a      	str	r2, [r3, #24]
 80025a0:	e042      	b.n	8002628 <HAL_RTC_SetAlarm+0x218>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80025a2:	9b03      	ldr	r3, [sp, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699a      	ldr	r2, [r3, #24]
 80025a8:	9b03      	ldr	r3, [sp, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4928      	ldr	r1, [pc, #160]	@ (8002650 <HAL_RTC_SetAlarm+0x240>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80025b2:	9b03      	ldr	r3, [sp, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699a      	ldr	r2, [r3, #24]
 80025b8:	9b03      	ldr	r3, [sp, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4925      	ldr	r1, [pc, #148]	@ (8002654 <HAL_RTC_SetAlarm+0x244>)
 80025be:	400a      	ands	r2, r1
 80025c0:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80025c2:	f7fd ff81 	bl	80004c8 <HAL_GetTick>
 80025c6:	0003      	movs	r3, r0
 80025c8:	9305      	str	r3, [sp, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80025ca:	e016      	b.n	80025fa <HAL_RTC_SetAlarm+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80025cc:	f7fd ff7c 	bl	80004c8 <HAL_GetTick>
 80025d0:	0002      	movs	r2, r0
 80025d2:	9b05      	ldr	r3, [sp, #20]
 80025d4:	1ad2      	subs	r2, r2, r3
 80025d6:	23fa      	movs	r3, #250	@ 0xfa
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	429a      	cmp	r2, r3
 80025dc:	d90d      	bls.n	80025fa <HAL_RTC_SetAlarm+0x1ea>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025de:	9b03      	ldr	r3, [sp, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	22ff      	movs	r2, #255	@ 0xff
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025e6:	9b03      	ldr	r3, [sp, #12]
 80025e8:	2229      	movs	r2, #41	@ 0x29
 80025ea:	2103      	movs	r1, #3
 80025ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025ee:	9b03      	ldr	r3, [sp, #12]
 80025f0:	2228      	movs	r2, #40	@ 0x28
 80025f2:	2100      	movs	r1, #0
 80025f4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e023      	b.n	8002642 <HAL_RTC_SetAlarm+0x232>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80025fa:	9b03      	ldr	r3, [sp, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2202      	movs	r2, #2
 8002602:	4013      	ands	r3, r2
 8002604:	d0e2      	beq.n	80025cc <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002606:	9b03      	ldr	r3, [sp, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	9a07      	ldr	r2, [sp, #28]
 800260c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800260e:	9b03      	ldr	r3, [sp, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	9a06      	ldr	r2, [sp, #24]
 8002614:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002616:	9b03      	ldr	r3, [sp, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699a      	ldr	r2, [r3, #24]
 800261c:	9b03      	ldr	r3, [sp, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2180      	movs	r1, #128	@ 0x80
 8002622:	0089      	lsls	r1, r1, #2
 8002624:	430a      	orrs	r2, r1
 8002626:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002628:	9b03      	ldr	r3, [sp, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	22ff      	movs	r2, #255	@ 0xff
 800262e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002630:	9b03      	ldr	r3, [sp, #12]
 8002632:	2229      	movs	r2, #41	@ 0x29
 8002634:	2101      	movs	r1, #1
 8002636:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002638:	9b03      	ldr	r3, [sp, #12]
 800263a:	2228      	movs	r2, #40	@ 0x28
 800263c:	2100      	movs	r1, #0
 800263e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	0018      	movs	r0, r3
 8002644:	b008      	add	sp, #32
 8002646:	bd10      	pop	{r4, pc}
 8002648:	fffffeff 	.word	0xfffffeff
 800264c:	ffffefff 	.word	0xffffefff
 8002650:	fffffdff 	.word	0xfffffdff
 8002654:	ffffdfff 	.word	0xffffdfff

08002658 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002658:	b500      	push	{lr}
 800265a:	b085      	sub	sp, #20
 800265c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800265e:	9b01      	ldr	r3, [sp, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	9b01      	ldr	r3, [sp, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	21a0      	movs	r1, #160	@ 0xa0
 800266a:	438a      	bics	r2, r1
 800266c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800266e:	f7fd ff2b 	bl	80004c8 <HAL_GetTick>
 8002672:	0003      	movs	r3, r0
 8002674:	9303      	str	r3, [sp, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002676:	e00a      	b.n	800268e <HAL_RTC_WaitForSynchro+0x36>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002678:	f7fd ff26 	bl	80004c8 <HAL_GetTick>
 800267c:	0002      	movs	r2, r0
 800267e:	9b03      	ldr	r3, [sp, #12]
 8002680:	1ad2      	subs	r2, r2, r3
 8002682:	23fa      	movs	r3, #250	@ 0xfa
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	429a      	cmp	r2, r3
 8002688:	d901      	bls.n	800268e <HAL_RTC_WaitForSynchro+0x36>
    {
      return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e006      	b.n	800269c <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800268e:	9b01      	ldr	r3, [sp, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	4013      	ands	r3, r2
 8002698:	d0ee      	beq.n	8002678 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	0018      	movs	r0, r3
 800269e:	b005      	add	sp, #20
 80026a0:	bd00      	pop	{pc}

080026a2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80026a2:	b500      	push	{lr}
 80026a4:	b085      	sub	sp, #20
 80026a6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80026a8:	230f      	movs	r3, #15
 80026aa:	446b      	add	r3, sp
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80026b0:	9b01      	ldr	r3, [sp, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2240      	movs	r2, #64	@ 0x40
 80026b8:	4013      	ands	r3, r2
 80026ba:	d12e      	bne.n	800271a <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80026bc:	9b01      	ldr	r3, [sp, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	9b01      	ldr	r3, [sp, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2180      	movs	r1, #128	@ 0x80
 80026c8:	430a      	orrs	r2, r1
 80026ca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80026cc:	f7fd fefc 	bl	80004c8 <HAL_GetTick>
 80026d0:	0003      	movs	r3, r0
 80026d2:	9302      	str	r3, [sp, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80026d4:	e016      	b.n	8002704 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80026d6:	f7fd fef7 	bl	80004c8 <HAL_GetTick>
 80026da:	0002      	movs	r2, r0
 80026dc:	9b02      	ldr	r3, [sp, #8]
 80026de:	1ad2      	subs	r2, r2, r3
 80026e0:	230f      	movs	r3, #15
 80026e2:	446b      	add	r3, sp
 80026e4:	210f      	movs	r1, #15
 80026e6:	4469      	add	r1, sp
 80026e8:	7809      	ldrb	r1, [r1, #0]
 80026ea:	7019      	strb	r1, [r3, #0]
 80026ec:	23fa      	movs	r3, #250	@ 0xfa
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d907      	bls.n	8002704 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 80026f4:	230f      	movs	r3, #15
 80026f6:	446b      	add	r3, sp
 80026f8:	2203      	movs	r2, #3
 80026fa:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026fc:	9b01      	ldr	r3, [sp, #4]
 80026fe:	2229      	movs	r2, #41	@ 0x29
 8002700:	2103      	movs	r1, #3
 8002702:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002704:	9b01      	ldr	r3, [sp, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2240      	movs	r2, #64	@ 0x40
 800270c:	4013      	ands	r3, r2
 800270e:	d104      	bne.n	800271a <RTC_EnterInitMode+0x78>
 8002710:	230f      	movs	r3, #15
 8002712:	446b      	add	r3, sp
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b03      	cmp	r3, #3
 8002718:	d1dd      	bne.n	80026d6 <RTC_EnterInitMode+0x34>
      }
    }
  }

  return status;
 800271a:	230f      	movs	r3, #15
 800271c:	446b      	add	r3, sp
 800271e:	781b      	ldrb	r3, [r3, #0]
}
 8002720:	0018      	movs	r0, r3
 8002722:	b005      	add	sp, #20
 8002724:	bd00      	pop	{pc}
	...

08002728 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002728:	b500      	push	{lr}
 800272a:	b085      	sub	sp, #20
 800272c:	9001      	str	r0, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272e:	230f      	movs	r3, #15
 8002730:	446b      	add	r3, sp
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002736:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <RTC_ExitInitMode+0x84>)
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	4b1c      	ldr	r3, [pc, #112]	@ (80027ac <RTC_ExitInitMode+0x84>)
 800273c:	2180      	movs	r1, #128	@ 0x80
 800273e:	438a      	bics	r2, r1
 8002740:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002742:	4b1a      	ldr	r3, [pc, #104]	@ (80027ac <RTC_ExitInitMode+0x84>)
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2220      	movs	r2, #32
 8002748:	4013      	ands	r3, r2
 800274a:	d10e      	bne.n	800276a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800274c:	9b01      	ldr	r3, [sp, #4]
 800274e:	0018      	movs	r0, r3
 8002750:	f7ff ff82 	bl	8002658 <HAL_RTC_WaitForSynchro>
 8002754:	1e03      	subs	r3, r0, #0
 8002756:	d022      	beq.n	800279e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002758:	9b01      	ldr	r3, [sp, #4]
 800275a:	2229      	movs	r2, #41	@ 0x29
 800275c:	2103      	movs	r1, #3
 800275e:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002760:	230f      	movs	r3, #15
 8002762:	446b      	add	r3, sp
 8002764:	2203      	movs	r2, #3
 8002766:	701a      	strb	r2, [r3, #0]
 8002768:	e019      	b.n	800279e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800276a:	4b10      	ldr	r3, [pc, #64]	@ (80027ac <RTC_ExitInitMode+0x84>)
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	4b0f      	ldr	r3, [pc, #60]	@ (80027ac <RTC_ExitInitMode+0x84>)
 8002770:	2120      	movs	r1, #32
 8002772:	438a      	bics	r2, r1
 8002774:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002776:	9b01      	ldr	r3, [sp, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f7ff ff6d 	bl	8002658 <HAL_RTC_WaitForSynchro>
 800277e:	1e03      	subs	r3, r0, #0
 8002780:	d007      	beq.n	8002792 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002782:	9b01      	ldr	r3, [sp, #4]
 8002784:	2229      	movs	r2, #41	@ 0x29
 8002786:	2103      	movs	r1, #3
 8002788:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800278a:	230f      	movs	r3, #15
 800278c:	446b      	add	r3, sp
 800278e:	2203      	movs	r2, #3
 8002790:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002792:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <RTC_ExitInitMode+0x84>)
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <RTC_ExitInitMode+0x84>)
 8002798:	2120      	movs	r1, #32
 800279a:	430a      	orrs	r2, r1
 800279c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800279e:	230f      	movs	r3, #15
 80027a0:	446b      	add	r3, sp
 80027a2:	781b      	ldrb	r3, [r3, #0]
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	b005      	add	sp, #20
 80027a8:	bd00      	pop	{pc}
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	40002800 	.word	0x40002800

080027b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80027b0:	b084      	sub	sp, #16
 80027b2:	0002      	movs	r2, r0
 80027b4:	466b      	mov	r3, sp
 80027b6:	3307      	adds	r3, #7
 80027b8:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	9303      	str	r3, [sp, #12]
  uint8_t Param = Value;
 80027be:	230b      	movs	r3, #11
 80027c0:	446b      	add	r3, sp
 80027c2:	466a      	mov	r2, sp
 80027c4:	3207      	adds	r2, #7
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80027ca:	e009      	b.n	80027e0 <RTC_ByteToBcd2+0x30>
  {
    bcdhigh++;
 80027cc:	9b03      	ldr	r3, [sp, #12]
 80027ce:	3301      	adds	r3, #1
 80027d0:	9303      	str	r3, [sp, #12]
    Param -= 10U;
 80027d2:	230b      	movs	r3, #11
 80027d4:	446b      	add	r3, sp
 80027d6:	220b      	movs	r2, #11
 80027d8:	446a      	add	r2, sp
 80027da:	7812      	ldrb	r2, [r2, #0]
 80027dc:	3a0a      	subs	r2, #10
 80027de:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80027e0:	230b      	movs	r3, #11
 80027e2:	446b      	add	r3, sp
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b09      	cmp	r3, #9
 80027e8:	d8f0      	bhi.n	80027cc <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80027ea:	9b03      	ldr	r3, [sp, #12]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	230b      	movs	r3, #11
 80027f4:	446b      	add	r3, sp
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	b2db      	uxtb	r3, r3
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	b004      	add	sp, #16
 8002800:	4770      	bx	lr
	...

08002804 <HAL_PWR_EnableBkUpAccess>:
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002804:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <HAL_PWR_EnableBkUpAccess+0x14>)
 800280a:	2180      	movs	r1, #128	@ 0x80
 800280c:	0049      	lsls	r1, r1, #1
 800280e:	430a      	orrs	r2, r1
 8002810:	601a      	str	r2, [r3, #0]
}
 8002812:	46c0      	nop			@ (mov r8, r8)
 8002814:	4770      	bx	lr
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	40007000 	.word	0x40007000

0800281c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800281c:	b500      	push	{lr}
 800281e:	b085      	sub	sp, #20
 8002820:	9001      	str	r0, [sp, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002822:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a19      	ldr	r2, [pc, #100]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002828:	4013      	ands	r3, r2
 800282a:	0019      	movs	r1, r3
 800282c:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 800282e:	9a01      	ldr	r2, [sp, #4]
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002834:	9a01      	ldr	r2, [sp, #4]
 8002836:	2380      	movs	r3, #128	@ 0x80
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	429a      	cmp	r2, r3
 800283c:	d11f      	bne.n	800287e <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800283e:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	0013      	movs	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	189b      	adds	r3, r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4912      	ldr	r1, [pc, #72]	@ (8002894 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800284c:	0018      	movs	r0, r3
 800284e:	f7fd fc35 	bl	80000bc <__udivsi3>
 8002852:	0003      	movs	r3, r0
 8002854:	3301      	adds	r3, #1
 8002856:	9303      	str	r3, [sp, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002858:	e008      	b.n	800286c <HAL_PWREx_ControlVoltageScaling+0x50>
    {
      if (wait_loop_index != 0U)
 800285a:	9b03      	ldr	r3, [sp, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002860:	9b03      	ldr	r3, [sp, #12]
 8002862:	3b01      	subs	r3, #1
 8002864:	9303      	str	r3, [sp, #12]
 8002866:	e001      	b.n	800286c <HAL_PWREx_ControlVoltageScaling+0x50>
      }
      else
      {
        return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e009      	b.n	8002880 <HAL_PWREx_ControlVoltageScaling+0x64>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800286c:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	2380      	movs	r3, #128	@ 0x80
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	401a      	ands	r2, r3
 8002876:	2380      	movs	r3, #128	@ 0x80
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	429a      	cmp	r2, r3
 800287c:	d0ed      	beq.n	800285a <HAL_PWREx_ControlVoltageScaling+0x3e>
      }
    }
  }

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	0018      	movs	r0, r3
 8002882:	b005      	add	sp, #20
 8002884:	bd00      	pop	{pc}
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	40007000 	.word	0x40007000
 800288c:	fffff9ff 	.word	0xfffff9ff
 8002890:	20000000 	.word	0x20000000
 8002894:	000f4240 	.word	0x000f4240

08002898 <HAL_FDCAN_RxFifo0Callback>:
 * @brief Callback for CAN FIFO 0 message reception
 * @param hfdcan FDCAN handle
 * @param RxFifo0ITs FIFO 0 interrupt status
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002898:	b500      	push	{lr}
 800289a:	b083      	sub	sp, #12
 800289c:	9001      	str	r0, [sp, #4]
 800289e:	9100      	str	r1, [sp, #0]
    /* Retrieve Rx messages from RX FIFO 0 */
    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CANRxHeader, RxData);
 80028a0:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <HAL_FDCAN_RxFifo0Callback+0x20>)
 80028a2:	4a06      	ldr	r2, [pc, #24]	@ (80028bc <HAL_FDCAN_RxFifo0Callback+0x24>)
 80028a4:	9801      	ldr	r0, [sp, #4]
 80028a6:	2140      	movs	r1, #64	@ 0x40
 80028a8:	f7fe fd88 	bl	80013bc <HAL_FDCAN_GetRxMessage>

    message = 1u; /* Set flag after the message has been received */
 80028ac:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <HAL_FDCAN_RxFifo0Callback+0x28>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]
}
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	b003      	add	sp, #12
 80028b6:	bd00      	pop	{pc}
 80028b8:	20000104 	.word	0x20000104
 80028bc:	200000a0 	.word	0x200000a0
 80028c0:	2000010c 	.word	0x2000010c

080028c4 <CanTp_SingleFrameRx>:
 * @param data Pointer to received data
 * @param size Pointer to size of the payload
 * @return 1 if successful, 0 otherwise
 */
static uint8_t CanTp_SingleFrameRx(uint8_t *data, uint8_t *size)
{
 80028c4:	b084      	sub	sp, #16
 80028c6:	9001      	str	r0, [sp, #4]
 80028c8:	9100      	str	r1, [sp, #0]
    uint8_t nibbleMSB = (data[0] >> 4) & NIBBLE_LSB_EXTRACTOR; /* MSB */
 80028ca:	9b01      	ldr	r3, [sp, #4]
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	230d      	movs	r3, #13
 80028d0:	446b      	add	r3, sp
 80028d2:	0912      	lsrs	r2, r2, #4
 80028d4:	701a      	strb	r2, [r3, #0]
    uint8_t nibbleLSB = data[0] & NIBBLE_LSB_EXTRACTOR; /* LSB */
 80028d6:	9b01      	ldr	r3, [sp, #4]
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	ab03      	add	r3, sp, #12
 80028dc:	210f      	movs	r1, #15
 80028de:	400a      	ands	r2, r1
 80028e0:	701a      	strb	r2, [r3, #0]
    uint8_t returnValue = 0;
 80028e2:	230f      	movs	r3, #15
 80028e4:	446b      	add	r3, sp
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
    size[0] = nibbleLSB;
 80028ea:	9b00      	ldr	r3, [sp, #0]
 80028ec:	aa03      	add	r2, sp, #12
 80028ee:	7812      	ldrb	r2, [r2, #0]
 80028f0:	701a      	strb	r2, [r3, #0]

    if ((nibbleMSB == 0) && ((nibbleLSB > 0) && (nibbleLSB <= 7)))
 80028f2:	230d      	movs	r3, #13
 80028f4:	446b      	add	r3, sp
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d12b      	bne.n	8002954 <CanTp_SingleFrameRx+0x90>
 80028fc:	ab03      	add	r3, sp, #12
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d027      	beq.n	8002954 <CanTp_SingleFrameRx+0x90>
 8002904:	ab03      	add	r3, sp, #12
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b07      	cmp	r3, #7
 800290a:	d823      	bhi.n	8002954 <CanTp_SingleFrameRx+0x90>
    {
        for (uint8_t i = 0; i < size[0]; i++)
 800290c:	230e      	movs	r3, #14
 800290e:	446b      	add	r3, sp
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	e013      	b.n	800293e <CanTp_SingleFrameRx+0x7a>
        {
            data[i] = data[i + 1]; /* Unpacking */
 8002916:	230e      	movs	r3, #14
 8002918:	446b      	add	r3, sp
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	3301      	adds	r3, #1
 800291e:	9a01      	ldr	r2, [sp, #4]
 8002920:	18d2      	adds	r2, r2, r3
 8002922:	230e      	movs	r3, #14
 8002924:	446b      	add	r3, sp
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	9901      	ldr	r1, [sp, #4]
 800292a:	18cb      	adds	r3, r1, r3
 800292c:	7812      	ldrb	r2, [r2, #0]
 800292e:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < size[0]; i++)
 8002930:	230e      	movs	r3, #14
 8002932:	446b      	add	r3, sp
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	230e      	movs	r3, #14
 8002938:	446b      	add	r3, sp
 800293a:	3201      	adds	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	9b00      	ldr	r3, [sp, #0]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	220e      	movs	r2, #14
 8002944:	446a      	add	r2, sp
 8002946:	7812      	ldrb	r2, [r2, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d3e4      	bcc.n	8002916 <CanTp_SingleFrameRx+0x52>
        }

        returnValue = 1;
 800294c:	230f      	movs	r3, #15
 800294e:	446b      	add	r3, sp
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
    }

    return returnValue;
 8002954:	230f      	movs	r3, #15
 8002956:	446b      	add	r3, sp
 8002958:	781b      	ldrb	r3, [r3, #0]
}
 800295a:	0018      	movs	r0, r3
 800295c:	b004      	add	sp, #16
 800295e:	4770      	bx	lr

08002960 <CanTp_SingleFrameTx>:
 * @brief Handle the transmission of single-frame CAN messages
 * @param data Pointer to data to be transmitted
 * @param size Size of the data to be transmitted
 */
static void CanTp_SingleFrameTx(uint8_t *data, uint8_t size)
{
 8002960:	b500      	push	{lr}
 8002962:	b083      	sub	sp, #12
 8002964:	9001      	str	r0, [sp, #4]
 8002966:	000a      	movs	r2, r1
 8002968:	466b      	mov	r3, sp
 800296a:	3303      	adds	r3, #3
 800296c:	701a      	strb	r2, [r3, #0]
    data[0] = (0 << 4) | (size & NIBBLE_LSB_EXTRACTOR); /* Packing */
 800296e:	466b      	mov	r3, sp
 8002970:	3303      	adds	r3, #3
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	220f      	movs	r2, #15
 8002976:	4013      	ands	r3, r2
 8002978:	b2da      	uxtb	r2, r3
 800297a:	9b01      	ldr	r3, [sp, #4]
 800297c:	701a      	strb	r2, [r3, #0]

    HAL_FDCAN_AddMessageToTxFifoQ(&CANHandler, &CANTxHeader, data);
 800297e:	9a01      	ldr	r2, [sp, #4]
 8002980:	4903      	ldr	r1, [pc, #12]	@ (8002990 <CanTp_SingleFrameTx+0x30>)
 8002982:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <CanTp_SingleFrameTx+0x34>)
 8002984:	0018      	movs	r0, r3
 8002986:	f7fe fcd6 	bl	8001336 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	b003      	add	sp, #12
 800298e:	bd00      	pop	{pc}
 8002990:	200000c8 	.word	0x200000c8
 8002994:	2000003c 	.word	0x2000003c

08002998 <Serial_Init>:

/**
 * @brief Initialize the CAN bus
 */
void Serial_Init(void)
{
 8002998:	b510      	push	{r4, lr}
    /* Ntq = fCAN / CANbaudrate */
    /* Ntq = 1.6MHz / 100Kbps = 16 */
    /* Sample point: */
    /* Sp = (CANHandler.Init.NominalTimeSeg1 + 1 / Ntq) * 100 */
    /* Sp = ((11 + 1) / 16) * 100 = 75% */
    CANHandler.Instance = FDCAN1;
 800299a:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <Serial_Init+0x9c>)
 800299c:	4a26      	ldr	r2, [pc, #152]	@ (8002a38 <Serial_Init+0xa0>)
 800299e:	601a      	str	r2, [r3, #0]
    CANHandler.Init.Mode = FDCAN_MODE_NORMAL;                    /* CAN Classic mode */
 80029a0:	4b24      	ldr	r3, [pc, #144]	@ (8002a34 <Serial_Init+0x9c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
    CANHandler.Init.FrameFormat = FDCAN_FRAME_CLASSIC;           /* Classic frame */
 80029a6:	4b23      	ldr	r3, [pc, #140]	@ (8002a34 <Serial_Init+0x9c>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
    CANHandler.Init.ClockDivider = FDCAN_CLOCK_DIV1;             /* No APB divider for FDCAN module */
 80029ac:	4b21      	ldr	r3, [pc, #132]	@ (8002a34 <Serial_Init+0x9c>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	605a      	str	r2, [r3, #4]
    CANHandler.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;   /* Tx buffer in Fifo mode */
 80029b2:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <Serial_Init+0x9c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	63da      	str	r2, [r3, #60]	@ 0x3c
    CANHandler.Init.NominalPrescaler = 10;                       /* CAN clock divider by 10 */
 80029b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a34 <Serial_Init+0x9c>)
 80029ba:	220a      	movs	r2, #10
 80029bc:	615a      	str	r2, [r3, #20]
    CANHandler.Init.NominalSyncJumpWidth = 1;                    /* SWJ of 1 */
 80029be:	4b1d      	ldr	r3, [pc, #116]	@ (8002a34 <Serial_Init+0x9c>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	619a      	str	r2, [r3, #24]
    CANHandler.Init.NominalTimeSeg1 = 11;                        /* Phase time seg1 + prop seg */
 80029c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <Serial_Init+0x9c>)
 80029c6:	220b      	movs	r2, #11
 80029c8:	61da      	str	r2, [r3, #28]
    CANHandler.Init.NominalTimeSeg2 = 4;                         /* Phase time seg2 */
 80029ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002a34 <Serial_Init+0x9c>)
 80029cc:	2204      	movs	r2, #4
 80029ce:	621a      	str	r2, [r3, #32]
    HAL_FDCAN_Init(&CANHandler);
 80029d0:	4b18      	ldr	r3, [pc, #96]	@ (8002a34 <Serial_Init+0x9c>)
 80029d2:	0018      	movs	r0, r3
 80029d4:	f7fe fb28 	bl	8001028 <HAL_FDCAN_Init>

    /* Set option to transmit the messages */
    CANTxHeader.IdType = FDCAN_STANDARD_ID;  /* 11 bits CAN ID */
 80029d8:	4b18      	ldr	r3, [pc, #96]	@ (8002a3c <Serial_Init+0xa4>)
 80029da:	2200      	movs	r2, #0
 80029dc:	605a      	str	r2, [r3, #4]
    CANTxHeader.FDFormat = FDCAN_CLASSIC_CAN; /* Classic CAN format up to 8 bytes */
 80029de:	4b17      	ldr	r3, [pc, #92]	@ (8002a3c <Serial_Init+0xa4>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
    CANTxHeader.TxFrameType = FDCAN_DATA_FRAME; /* Type of frame data */
 80029e4:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <Serial_Init+0xa4>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
    CANTxHeader.Identifier = CAN_MESSAGE_ID; /* CAN message ID */
 80029ea:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <Serial_Init+0xa4>)
 80029ec:	2291      	movs	r2, #145	@ 0x91
 80029ee:	0052      	lsls	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
    CANTxHeader.DataLength = FDCAN_DLC_BYTES_8; /* 8 bytes to transmit */
 80029f2:	4b12      	ldr	r3, [pc, #72]	@ (8002a3c <Serial_Init+0xa4>)
 80029f4:	2280      	movs	r2, #128	@ 0x80
 80029f6:	0312      	lsls	r2, r2, #12
 80029f8:	60da      	str	r2, [r3, #12]

    /* Configure reception filters to Rx FIFO 0, the filter will only accept ID 0x111 */
    CANFilter.IdType = FDCAN_STANDARD_ID;       /* 11 bits ID */
 80029fa:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <Serial_Init+0xa8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
    CANFilter.FilterIndex = 0;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <Serial_Init+0xa8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	605a      	str	r2, [r3, #4]
    CANFilter.FilterType = FDCAN_FILTER_MASK;
 8002a06:	4b0e      	ldr	r3, [pc, #56]	@ (8002a40 <Serial_Init+0xa8>)
 8002a08:	2202      	movs	r2, #2
 8002a0a:	609a      	str	r2, [r3, #8]
    CANFilter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; /* Filter on FIFO 0 */
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <Serial_Init+0xa8>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	60da      	str	r2, [r3, #12]
    CANFilter.FilterID1 = CAN_FILTER_ID; /* Filter ID */
 8002a12:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <Serial_Init+0xa8>)
 8002a14:	2212      	movs	r2, #18
 8002a16:	32ff      	adds	r2, #255	@ 0xff
 8002a18:	611a      	str	r2, [r3, #16]

    /* Change FDCAN instance from initialization mode to normal mode */
    HAL_FDCAN_Start(&CANHandler);
 8002a1a:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <Serial_Init+0x9c>)
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7fe fc67 	bl	80012f0 <HAL_FDCAN_Start>

    /* Enable reception interrupts when a message arrives on FIFO 0 */
    HAL_FDCAN_ActivateNotification(&CANHandler, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8002a22:	4b04      	ldr	r3, [pc, #16]	@ (8002a34 <Serial_Init+0x9c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	2101      	movs	r1, #1
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7fe fda7 	bl	800157c <HAL_FDCAN_ActivateNotification>
}
 8002a2e:	46c0      	nop			@ (mov r8, r8)
 8002a30:	bd10      	pop	{r4, pc}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	2000003c 	.word	0x2000003c
 8002a38:	40006400 	.word	0x40006400
 8002a3c:	200000c8 	.word	0x200000c8
 8002a40:	200000ec 	.word	0x200000ec

08002a44 <Serial_Task>:

/**
 * @brief Handle the serial communication state machine
 */
void Serial_Task(void)
{
 8002a44:	b510      	push	{r4, lr}
 8002a46:	b082      	sub	sp, #8
    static uint8_t size = 0;    /* Variable to handle the size of the payloads of the received messages */

    static uint8_t okMessage[8] = {0x00, CAN_OK_MESSAGE_BYTE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* OK state message */
    static uint8_t errorMessage[8] = {0x00, CAN_ERROR_MESSAGE_BYTE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* ERROR state message */

    uint8_t hour, minutes, seconds, day, month, yearMSB, yearLSB = 0; /* Validation message variables */
 8002a48:	466b      	mov	r3, sp
 8002a4a:	3307      	adds	r3, #7
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]

    switch (currentState)
 8002a50:	4b9d      	ldr	r3, [pc, #628]	@ (8002cc8 <Serial_Task+0x284>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b06      	cmp	r3, #6
 8002a56:	d900      	bls.n	8002a5a <Serial_Task+0x16>
 8002a58:	e12e      	b.n	8002cb8 <Serial_Task+0x274>
 8002a5a:	009a      	lsls	r2, r3, #2
 8002a5c:	4b9b      	ldr	r3, [pc, #620]	@ (8002ccc <Serial_Task+0x288>)
 8002a5e:	18d3      	adds	r3, r2, r3
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	469f      	mov	pc, r3
    {
    case IDLE_STATE:
        if (message == 1)
 8002a64:	4b9a      	ldr	r3, [pc, #616]	@ (8002cd0 <Serial_Task+0x28c>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d000      	beq.n	8002a6e <Serial_Task+0x2a>
 8002a6c:	e128      	b.n	8002cc0 <Serial_Task+0x27c>
        {
            if (CanTp_SingleFrameRx(RxData, &size) == 1)
 8002a6e:	4a99      	ldr	r2, [pc, #612]	@ (8002cd4 <Serial_Task+0x290>)
 8002a70:	4b99      	ldr	r3, [pc, #612]	@ (8002cd8 <Serial_Task+0x294>)
 8002a72:	0011      	movs	r1, r2
 8002a74:	0018      	movs	r0, r3
 8002a76:	f7ff ff25 	bl	80028c4 <CanTp_SingleFrameRx>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <Serial_Task+0x4a>
            {
                currentState = MESSAGE_STATE; /* Move to MESSAGE_STATE */
 8002a80:	4b91      	ldr	r3, [pc, #580]	@ (8002cc8 <Serial_Task+0x284>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
                message = 0;
 8002a86:	4b92      	ldr	r3, [pc, #584]	@ (8002cd0 <Serial_Task+0x28c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	e002      	b.n	8002a94 <Serial_Task+0x50>
            }
            else
            {
                currentState = ERROR_STATE; /* Move to ERROR_STATE */
 8002a8e:	4b8e      	ldr	r3, [pc, #568]	@ (8002cc8 <Serial_Task+0x284>)
 8002a90:	2206      	movs	r2, #6
 8002a92:	701a      	strb	r2, [r3, #0]
            }

            message = 0;
 8002a94:	4b8e      	ldr	r3, [pc, #568]	@ (8002cd0 <Serial_Task+0x28c>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002a9a:	e111      	b.n	8002cc0 <Serial_Task+0x27c>

    case MESSAGE_STATE:
        messageType = RxData[0]; /* Extract the message type from the Rx buffer (byte 1) */
 8002a9c:	4b8e      	ldr	r3, [pc, #568]	@ (8002cd8 <Serial_Task+0x294>)
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	4b8e      	ldr	r3, [pc, #568]	@ (8002cdc <Serial_Task+0x298>)
 8002aa2:	701a      	strb	r2, [r3, #0]

        if (messageType == SERIAL_MSG_TIME)
 8002aa4:	4b8d      	ldr	r3, [pc, #564]	@ (8002cdc <Serial_Task+0x298>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d106      	bne.n	8002aba <Serial_Task+0x76>
        {   
            Msg.msg = SERIAL_MSG_TIME; /* Set the message type in the message structure */
 8002aac:	4b8c      	ldr	r3, [pc, #560]	@ (8002ce0 <Serial_Task+0x29c>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
            currentState = TIME_STATE; /* Move to TIME state */
 8002ab2:	4b85      	ldr	r3, [pc, #532]	@ (8002cc8 <Serial_Task+0x284>)
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            currentState = ERROR_STATE; /* Move to ERROR state */
        }
        break;
 8002ab8:	e103      	b.n	8002cc2 <Serial_Task+0x27e>
        else if (messageType == SERIAL_MSG_DATE)
 8002aba:	4b88      	ldr	r3, [pc, #544]	@ (8002cdc <Serial_Task+0x298>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d106      	bne.n	8002ad0 <Serial_Task+0x8c>
            Msg.msg = SERIAL_MSG_DATE; /* Set the message type in the message structure */
 8002ac2:	4b87      	ldr	r3, [pc, #540]	@ (8002ce0 <Serial_Task+0x29c>)
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	701a      	strb	r2, [r3, #0]
            currentState = DATE_STATE; /* Move to DATE state */
 8002ac8:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc8 <Serial_Task+0x284>)
 8002aca:	2203      	movs	r2, #3
 8002acc:	701a      	strb	r2, [r3, #0]
        break;
 8002ace:	e0f8      	b.n	8002cc2 <Serial_Task+0x27e>
        else if (messageType == SERIAL_MSG_ALARM)
 8002ad0:	4b82      	ldr	r3, [pc, #520]	@ (8002cdc <Serial_Task+0x298>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d106      	bne.n	8002ae6 <Serial_Task+0xa2>
            Msg.msg = SERIAL_MSG_ALARM; /* Set the message type in the message structure */
 8002ad8:	4b81      	ldr	r3, [pc, #516]	@ (8002ce0 <Serial_Task+0x29c>)
 8002ada:	2203      	movs	r2, #3
 8002adc:	701a      	strb	r2, [r3, #0]
            currentState = ALARM_STATE; /* Move to ALARM state */
 8002ade:	4b7a      	ldr	r3, [pc, #488]	@ (8002cc8 <Serial_Task+0x284>)
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	701a      	strb	r2, [r3, #0]
        break;
 8002ae4:	e0ed      	b.n	8002cc2 <Serial_Task+0x27e>
            currentState = ERROR_STATE; /* Move to ERROR state */
 8002ae6:	4b78      	ldr	r3, [pc, #480]	@ (8002cc8 <Serial_Task+0x284>)
 8002ae8:	2206      	movs	r2, #6
 8002aea:	701a      	strb	r2, [r3, #0]
        break;
 8002aec:	e0e9      	b.n	8002cc2 <Serial_Task+0x27e>

    case TIME_STATE:
        hour = BCDtoDecimal(RxData[1]);     /* Extract the parameter 1 (byte 2) */
 8002aee:	4b7a      	ldr	r3, [pc, #488]	@ (8002cd8 <Serial_Task+0x294>)
 8002af0:	785b      	ldrb	r3, [r3, #1]
 8002af2:	466a      	mov	r2, sp
 8002af4:	1d94      	adds	r4, r2, #6
 8002af6:	0018      	movs	r0, r3
 8002af8:	f000 f8f8 	bl	8002cec <BCDtoDecimal>
 8002afc:	0003      	movs	r3, r0
 8002afe:	7023      	strb	r3, [r4, #0]
        minutes = BCDtoDecimal(RxData[2]);  /* Extract the parameter 2 (byte 3) */
 8002b00:	4b75      	ldr	r3, [pc, #468]	@ (8002cd8 <Serial_Task+0x294>)
 8002b02:	789b      	ldrb	r3, [r3, #2]
 8002b04:	466a      	mov	r2, sp
 8002b06:	1d54      	adds	r4, r2, #5
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f000 f8ef 	bl	8002cec <BCDtoDecimal>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	7023      	strb	r3, [r4, #0]
        seconds = BCDtoDecimal(RxData[3]);  /* Extract the parameter 3 (byte 4) */
 8002b12:	4b71      	ldr	r3, [pc, #452]	@ (8002cd8 <Serial_Task+0x294>)
 8002b14:	78db      	ldrb	r3, [r3, #3]
 8002b16:	466a      	mov	r2, sp
 8002b18:	1c54      	adds	r4, r2, #1
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f000 f8e6 	bl	8002cec <BCDtoDecimal>
 8002b20:	0003      	movs	r3, r0
 8002b22:	7023      	strb	r3, [r4, #0]

        if (Validate_Time(hour, minutes, seconds))
 8002b24:	466b      	mov	r3, sp
 8002b26:	3301      	adds	r3, #1
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	466b      	mov	r3, sp
 8002b2c:	3305      	adds	r3, #5
 8002b2e:	7819      	ldrb	r1, [r3, #0]
 8002b30:	466b      	mov	r3, sp
 8002b32:	3306      	adds	r3, #6
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	0018      	movs	r0, r3
 8002b38:	f000 f901 	bl	8002d3e <Validate_Time>
 8002b3c:	1e03      	subs	r3, r0, #0
 8002b3e:	d012      	beq.n	8002b66 <Serial_Task+0x122>
        {
            Msg.tm.tm_hour = hour;
 8002b40:	466b      	mov	r3, sp
 8002b42:	3306      	adds	r3, #6
 8002b44:	781a      	ldrb	r2, [r3, #0]
 8002b46:	4b66      	ldr	r3, [pc, #408]	@ (8002ce0 <Serial_Task+0x29c>)
 8002b48:	60da      	str	r2, [r3, #12]
            Msg.tm.tm_min = minutes;
 8002b4a:	466b      	mov	r3, sp
 8002b4c:	3305      	adds	r3, #5
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	4b63      	ldr	r3, [pc, #396]	@ (8002ce0 <Serial_Task+0x29c>)
 8002b52:	609a      	str	r2, [r3, #8]
            Msg.tm.tm_sec = seconds;
 8002b54:	466b      	mov	r3, sp
 8002b56:	3301      	adds	r3, #1
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	4b61      	ldr	r3, [pc, #388]	@ (8002ce0 <Serial_Task+0x29c>)
 8002b5c:	605a      	str	r2, [r3, #4]

            currentState = OK_STATE; /* Move to OK state */
 8002b5e:	4b5a      	ldr	r3, [pc, #360]	@ (8002cc8 <Serial_Task+0x284>)
 8002b60:	2205      	movs	r2, #5
 8002b62:	701a      	strb	r2, [r3, #0]
        else
        {
            currentState = ERROR_STATE; /* Move to ERROR state */
        }
        
        break;
 8002b64:	e0ad      	b.n	8002cc2 <Serial_Task+0x27e>
            currentState = ERROR_STATE; /* Move to ERROR state */
 8002b66:	4b58      	ldr	r3, [pc, #352]	@ (8002cc8 <Serial_Task+0x284>)
 8002b68:	2206      	movs	r2, #6
 8002b6a:	701a      	strb	r2, [r3, #0]
        break;
 8002b6c:	e0a9      	b.n	8002cc2 <Serial_Task+0x27e>

    case DATE_STATE:
        day = BCDtoDecimal(RxData[1]);      /* Extract the parameter 1 (byte 2) */
 8002b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002cd8 <Serial_Task+0x294>)
 8002b70:	785b      	ldrb	r3, [r3, #1]
 8002b72:	ac01      	add	r4, sp, #4
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 f8b9 	bl	8002cec <BCDtoDecimal>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	7023      	strb	r3, [r4, #0]
        month = BCDtoDecimal(RxData[2]);    /* Extract the parameter 2 (byte 3) */
 8002b7e:	4b56      	ldr	r3, [pc, #344]	@ (8002cd8 <Serial_Task+0x294>)
 8002b80:	789b      	ldrb	r3, [r3, #2]
 8002b82:	466a      	mov	r2, sp
 8002b84:	1cd4      	adds	r4, r2, #3
 8002b86:	0018      	movs	r0, r3
 8002b88:	f000 f8b0 	bl	8002cec <BCDtoDecimal>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	7023      	strb	r3, [r4, #0]
        yearMSB = BCDtoDecimal(RxData[3]);  /* Extract the parameter 3 (byte 4) */
 8002b90:	4b51      	ldr	r3, [pc, #324]	@ (8002cd8 <Serial_Task+0x294>)
 8002b92:	78db      	ldrb	r3, [r3, #3]
 8002b94:	466a      	mov	r2, sp
 8002b96:	1c94      	adds	r4, r2, #2
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 f8a7 	bl	8002cec <BCDtoDecimal>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	7023      	strb	r3, [r4, #0]
        yearLSB = BCDtoDecimal(RxData[4]);  /* Extract the parameter 4 (byte 5) */
 8002ba2:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd8 <Serial_Task+0x294>)
 8002ba4:	791b      	ldrb	r3, [r3, #4]
 8002ba6:	466a      	mov	r2, sp
 8002ba8:	1dd4      	adds	r4, r2, #7
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 f89e 	bl	8002cec <BCDtoDecimal>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	7023      	strb	r3, [r4, #0]

        if (Validate_Date(day, month, yearMSB, yearLSB))
 8002bb4:	466b      	mov	r3, sp
 8002bb6:	3307      	adds	r3, #7
 8002bb8:	781c      	ldrb	r4, [r3, #0]
 8002bba:	466b      	mov	r3, sp
 8002bbc:	3302      	adds	r3, #2
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	466b      	mov	r3, sp
 8002bc2:	3303      	adds	r3, #3
 8002bc4:	7819      	ldrb	r1, [r3, #0]
 8002bc6:	ab01      	add	r3, sp, #4
 8002bc8:	7818      	ldrb	r0, [r3, #0]
 8002bca:	0023      	movs	r3, r4
 8002bcc:	f000 f8e4 	bl	8002d98 <Validate_Date>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d027      	beq.n	8002c24 <Serial_Task+0x1e0>
        {
            Msg.tm.tm_mday = day;
 8002bd4:	ab01      	add	r3, sp, #4
 8002bd6:	781a      	ldrb	r2, [r3, #0]
 8002bd8:	4b41      	ldr	r3, [pc, #260]	@ (8002ce0 <Serial_Task+0x29c>)
 8002bda:	611a      	str	r2, [r3, #16]
            Msg.tm.tm_mon = month;
 8002bdc:	466b      	mov	r3, sp
 8002bde:	3303      	adds	r3, #3
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce0 <Serial_Task+0x29c>)
 8002be4:	615a      	str	r2, [r3, #20]
            Msg.tm.tm_year = yearMSB * 100 + yearLSB;
 8002be6:	466b      	mov	r3, sp
 8002be8:	3302      	adds	r3, #2
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2264      	movs	r2, #100	@ 0x64
 8002bee:	435a      	muls	r2, r3
 8002bf0:	466b      	mov	r3, sp
 8002bf2:	3307      	adds	r3, #7
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	18d3      	adds	r3, r2, r3
 8002bf8:	001a      	movs	r2, r3
 8002bfa:	4b39      	ldr	r3, [pc, #228]	@ (8002ce0 <Serial_Task+0x29c>)
 8002bfc:	619a      	str	r2, [r3, #24]
            Msg.tm.tm_wday = WeekDay(day, month, Msg.tm.tm_year);
 8002bfe:	4b38      	ldr	r3, [pc, #224]	@ (8002ce0 <Serial_Task+0x29c>)
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	466b      	mov	r3, sp
 8002c06:	3303      	adds	r3, #3
 8002c08:	7819      	ldrb	r1, [r3, #0]
 8002c0a:	ab01      	add	r3, sp, #4
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f000 f94a 	bl	8002ea8 <WeekDay>
 8002c14:	0003      	movs	r3, r0
 8002c16:	001a      	movs	r2, r3
 8002c18:	4b31      	ldr	r3, [pc, #196]	@ (8002ce0 <Serial_Task+0x29c>)
 8002c1a:	61da      	str	r2, [r3, #28]

            currentState = OK_STATE; /* Move to OK state */
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc8 <Serial_Task+0x284>)
 8002c1e:	2205      	movs	r2, #5
 8002c20:	701a      	strb	r2, [r3, #0]
        else
        {
            currentState = ERROR_STATE; /* Move to ERROR state */
        }
        
        break;
 8002c22:	e04e      	b.n	8002cc2 <Serial_Task+0x27e>
            currentState = ERROR_STATE; /* Move to ERROR state */
 8002c24:	4b28      	ldr	r3, [pc, #160]	@ (8002cc8 <Serial_Task+0x284>)
 8002c26:	2206      	movs	r2, #6
 8002c28:	701a      	strb	r2, [r3, #0]
        break;
 8002c2a:	e04a      	b.n	8002cc2 <Serial_Task+0x27e>

    case ALARM_STATE:
        hour = BCDtoDecimal(RxData[1]);    /* Extract the parameter 1 (byte 2) */
 8002c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd8 <Serial_Task+0x294>)
 8002c2e:	785b      	ldrb	r3, [r3, #1]
 8002c30:	466a      	mov	r2, sp
 8002c32:	1d94      	adds	r4, r2, #6
 8002c34:	0018      	movs	r0, r3
 8002c36:	f000 f859 	bl	8002cec <BCDtoDecimal>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	7023      	strb	r3, [r4, #0]
        minutes = BCDtoDecimal(RxData[2]); /* Extract the parameter 2 (byte 3) */
 8002c3e:	4b26      	ldr	r3, [pc, #152]	@ (8002cd8 <Serial_Task+0x294>)
 8002c40:	789b      	ldrb	r3, [r3, #2]
 8002c42:	466a      	mov	r2, sp
 8002c44:	1d54      	adds	r4, r2, #5
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 f850 	bl	8002cec <BCDtoDecimal>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	7023      	strb	r3, [r4, #0]

        if (Validate_Alarm(hour, minutes))
 8002c50:	466b      	mov	r3, sp
 8002c52:	3305      	adds	r3, #5
 8002c54:	781a      	ldrb	r2, [r3, #0]
 8002c56:	466b      	mov	r3, sp
 8002c58:	3306      	adds	r3, #6
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	0011      	movs	r1, r2
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 f9c0 	bl	8002fe4 <Validate_Alarm>
 8002c64:	1e03      	subs	r3, r0, #0
 8002c66:	d00d      	beq.n	8002c84 <Serial_Task+0x240>
        {
            Msg.tm.tm_hour = hour;
 8002c68:	466b      	mov	r3, sp
 8002c6a:	3306      	adds	r3, #6
 8002c6c:	781a      	ldrb	r2, [r3, #0]
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ce0 <Serial_Task+0x29c>)
 8002c70:	60da      	str	r2, [r3, #12]
            Msg.tm.tm_min = minutes;
 8002c72:	466b      	mov	r3, sp
 8002c74:	3305      	adds	r3, #5
 8002c76:	781a      	ldrb	r2, [r3, #0]
 8002c78:	4b19      	ldr	r3, [pc, #100]	@ (8002ce0 <Serial_Task+0x29c>)
 8002c7a:	609a      	str	r2, [r3, #8]

            currentState = OK_STATE; /* Move to OK state */
 8002c7c:	4b12      	ldr	r3, [pc, #72]	@ (8002cc8 <Serial_Task+0x284>)
 8002c7e:	2205      	movs	r2, #5
 8002c80:	701a      	strb	r2, [r3, #0]
        else
        {
            currentState = ERROR_STATE; /* Move to ERROR state */
        }
        
        break;
 8002c82:	e01e      	b.n	8002cc2 <Serial_Task+0x27e>
            currentState = ERROR_STATE; /* Move to ERROR state */
 8002c84:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <Serial_Task+0x284>)
 8002c86:	2206      	movs	r2, #6
 8002c88:	701a      	strb	r2, [r3, #0]
        break;
 8002c8a:	e01a      	b.n	8002cc2 <Serial_Task+0x27e>

    case OK_STATE:
        CanTp_SingleFrameTx(okMessage, size); /* Send message for OK state */
 8002c8c:	4b11      	ldr	r3, [pc, #68]	@ (8002cd4 <Serial_Task+0x290>)
 8002c8e:	781a      	ldrb	r2, [r3, #0]
 8002c90:	4b14      	ldr	r3, [pc, #80]	@ (8002ce4 <Serial_Task+0x2a0>)
 8002c92:	0011      	movs	r1, r2
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7ff fe63 	bl	8002960 <CanTp_SingleFrameTx>
        
        currentState = IDLE_STATE;           /* Return to IDLE state */
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <Serial_Task+0x284>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
        break;
 8002ca0:	e00f      	b.n	8002cc2 <Serial_Task+0x27e>

    case ERROR_STATE:
        CanTp_SingleFrameTx(errorMessage, size); /* Send message for ERROR state */
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd4 <Serial_Task+0x290>)
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <Serial_Task+0x2a4>)
 8002ca8:	0011      	movs	r1, r2
 8002caa:	0018      	movs	r0, r3
 8002cac:	f7ff fe58 	bl	8002960 <CanTp_SingleFrameTx>
        
        currentState = IDLE_STATE;              /* Return to IDLE state */
 8002cb0:	4b05      	ldr	r3, [pc, #20]	@ (8002cc8 <Serial_Task+0x284>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
        break;
 8002cb6:	e004      	b.n	8002cc2 <Serial_Task+0x27e>

    default:
        currentState = IDLE_STATE;              /* Return to IDLE state */
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <Serial_Task+0x284>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
        break;
 8002cbe:	e000      	b.n	8002cc2 <Serial_Task+0x27e>
        break;
 8002cc0:	46c0      	nop			@ (mov r8, r8)
    }
}
 8002cc2:	46c0      	nop			@ (mov r8, r8)
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd10      	pop	{r4, pc}
 8002cc8:	2000010d 	.word	0x2000010d
 8002ccc:	08003428 	.word	0x08003428
 8002cd0:	2000010c 	.word	0x2000010c
 8002cd4:	2000010e 	.word	0x2000010e
 8002cd8:	20000104 	.word	0x20000104
 8002cdc:	2000010f 	.word	0x2000010f
 8002ce0:	2000017c 	.word	0x2000017c
 8002ce4:	2000000c 	.word	0x2000000c
 8002ce8:	20000014 	.word	0x20000014

08002cec <BCDtoDecimal>:
 *
 * @param bcdValue The BCD value to be converted.
 * @return Decimal representation of the input BCD value.
 */
uint8_t BCDtoDecimal(uint8_t bcdValue)
{
 8002cec:	b084      	sub	sp, #16
 8002cee:	0002      	movs	r2, r0
 8002cf0:	466b      	mov	r3, sp
 8002cf2:	3307      	adds	r3, #7
 8002cf4:	701a      	strb	r2, [r3, #0]
    uint8_t tens = (bcdValue >> 4) & NIBBLE_LSB_EXTRACTOR; /* Extract the tens digit from the BCD value */
 8002cf6:	230f      	movs	r3, #15
 8002cf8:	446b      	add	r3, sp
 8002cfa:	466a      	mov	r2, sp
 8002cfc:	3207      	adds	r2, #7
 8002cfe:	7812      	ldrb	r2, [r2, #0]
 8002d00:	0912      	lsrs	r2, r2, #4
 8002d02:	701a      	strb	r2, [r3, #0]
    uint8_t units = bcdValue & NIBBLE_LSB_EXTRACTOR;       /* Extract the units digit from the BCD value */
 8002d04:	230e      	movs	r3, #14
 8002d06:	446b      	add	r3, sp
 8002d08:	466a      	mov	r2, sp
 8002d0a:	3207      	adds	r2, #7
 8002d0c:	7812      	ldrb	r2, [r2, #0]
 8002d0e:	210f      	movs	r1, #15
 8002d10:	400a      	ands	r2, r1
 8002d12:	701a      	strb	r2, [r3, #0]

    uint8_t decimalValue = (tens * 10) + units; /* Calculate the decimal value by multiplying the tens digit by 10 and adding the units digit */
 8002d14:	230f      	movs	r3, #15
 8002d16:	446b      	add	r3, sp
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	1c1a      	adds	r2, r3, #0
 8002d1c:	0092      	lsls	r2, r2, #2
 8002d1e:	18d3      	adds	r3, r2, r3
 8002d20:	18db      	adds	r3, r3, r3
 8002d22:	b2d9      	uxtb	r1, r3
 8002d24:	230d      	movs	r3, #13
 8002d26:	446b      	add	r3, sp
 8002d28:	220e      	movs	r2, #14
 8002d2a:	446a      	add	r2, sp
 8002d2c:	7812      	ldrb	r2, [r2, #0]
 8002d2e:	188a      	adds	r2, r1, r2
 8002d30:	701a      	strb	r2, [r3, #0]

    return decimalValue;
 8002d32:	230d      	movs	r3, #13
 8002d34:	446b      	add	r3, sp
 8002d36:	781b      	ldrb	r3, [r3, #0]
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	b004      	add	sp, #16
 8002d3c:	4770      	bx	lr

08002d3e <Validate_Time>:
 * @param minutes Minute value.
 * @param seconds Second value.
 * @return 1 if the time is valid, 0 otherwise.
 */
uint8_t Validate_Time(uint8_t hour, uint8_t minutes, uint8_t seconds)
{
 8002d3e:	b510      	push	{r4, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	0004      	movs	r4, r0
 8002d44:	0008      	movs	r0, r1
 8002d46:	0011      	movs	r1, r2
 8002d48:	466b      	mov	r3, sp
 8002d4a:	3307      	adds	r3, #7
 8002d4c:	1c22      	adds	r2, r4, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	466b      	mov	r3, sp
 8002d52:	3306      	adds	r3, #6
 8002d54:	1c02      	adds	r2, r0, #0
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	466b      	mov	r3, sp
 8002d5a:	3305      	adds	r3, #5
 8002d5c:	1c0a      	adds	r2, r1, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
    /* Check if the hour, minutes, and seconds are within valid ranges */
    uint8_t isValid = (hour < 24 && minutes < 60 && seconds < 60) ? 1 : 0;
 8002d60:	466b      	mov	r3, sp
 8002d62:	3307      	adds	r3, #7
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b17      	cmp	r3, #23
 8002d68:	d80b      	bhi.n	8002d82 <Validate_Time+0x44>
 8002d6a:	466b      	mov	r3, sp
 8002d6c:	3306      	adds	r3, #6
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b3b      	cmp	r3, #59	@ 0x3b
 8002d72:	d806      	bhi.n	8002d82 <Validate_Time+0x44>
 8002d74:	466b      	mov	r3, sp
 8002d76:	3305      	adds	r3, #5
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b3b      	cmp	r3, #59	@ 0x3b
 8002d7c:	d801      	bhi.n	8002d82 <Validate_Time+0x44>
 8002d7e:	2201      	movs	r2, #1
 8002d80:	e000      	b.n	8002d84 <Validate_Time+0x46>
 8002d82:	2200      	movs	r2, #0
 8002d84:	230f      	movs	r3, #15
 8002d86:	446b      	add	r3, sp
 8002d88:	701a      	strb	r2, [r3, #0]

    return isValid;
 8002d8a:	230f      	movs	r3, #15
 8002d8c:	446b      	add	r3, sp
 8002d8e:	781b      	ldrb	r3, [r3, #0]
}
 8002d90:	0018      	movs	r0, r3
 8002d92:	b004      	add	sp, #16
 8002d94:	bd10      	pop	{r4, pc}
	...

08002d98 <Validate_Date>:
 * @param yearMSB Most significant byte of the year.
 * @param yearLSB Least significant byte of the year.
 * @return 1 if the date is valid, 0 otherwise.
 */
uint8_t Validate_Date(uint8_t day, uint8_t month, uint8_t yearMSB, uint8_t yearLSB)
{
 8002d98:	b530      	push	{r4, r5, lr}
 8002d9a:	b089      	sub	sp, #36	@ 0x24
 8002d9c:	0005      	movs	r5, r0
 8002d9e:	000c      	movs	r4, r1
 8002da0:	0010      	movs	r0, r2
 8002da2:	0019      	movs	r1, r3
 8002da4:	466b      	mov	r3, sp
 8002da6:	3307      	adds	r3, #7
 8002da8:	1c2a      	adds	r2, r5, #0
 8002daa:	701a      	strb	r2, [r3, #0]
 8002dac:	466b      	mov	r3, sp
 8002dae:	3306      	adds	r3, #6
 8002db0:	1c22      	adds	r2, r4, #0
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	466b      	mov	r3, sp
 8002db6:	3305      	adds	r3, #5
 8002db8:	1c02      	adds	r2, r0, #0
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	ab01      	add	r3, sp, #4
 8002dbe:	1c0a      	adds	r2, r1, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
    uint8_t status = 1;
 8002dc2:	231f      	movs	r3, #31
 8002dc4:	446b      	add	r3, sp
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]

    /* Combines the most significant byte and the least significant byte of the year to get the full year */
    uint16_t year = yearMSB * 100 + yearLSB;
 8002dca:	466b      	mov	r3, sp
 8002dcc:	3305      	adds	r3, #5
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2264      	movs	r2, #100	@ 0x64
 8002dd4:	4353      	muls	r3, r2
 8002dd6:	b299      	uxth	r1, r3
 8002dd8:	ab01      	add	r3, sp, #4
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	ab07      	add	r3, sp, #28
 8002de0:	188a      	adds	r2, r1, r2
 8002de2:	801a      	strh	r2, [r3, #0]

    /* Array representing the number of days in each month (non-leap year) */
    uint8_t days_Month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8002de4:	ab03      	add	r3, sp, #12
 8002de6:	4a2d      	ldr	r2, [pc, #180]	@ (8002e9c <Validate_Date+0x104>)
 8002de8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002dea:	c313      	stmia	r3!, {r0, r1, r4}

    /* Checks if the year is outside the 1901-2099 range and month is outside the 1-12 range. 
    If either condition is met, the function will return 0, indicating the date is invalid */
    if ((year < 1901 || year > 2099) && (month < 1 || month > 12))
 8002dec:	ab07      	add	r3, sp, #28
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea0 <Validate_Date+0x108>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d904      	bls.n	8002e00 <Validate_Date+0x68>
 8002df6:	ab07      	add	r3, sp, #28
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8002ea4 <Validate_Date+0x10c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d90d      	bls.n	8002e1c <Validate_Date+0x84>
 8002e00:	466b      	mov	r3, sp
 8002e02:	3306      	adds	r3, #6
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <Validate_Date+0x7c>
 8002e0a:	466b      	mov	r3, sp
 8002e0c:	3306      	adds	r3, #6
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b0c      	cmp	r3, #12
 8002e12:	d903      	bls.n	8002e1c <Validate_Date+0x84>
    {
        status = 0;
 8002e14:	231f      	movs	r3, #31
 8002e16:	446b      	add	r3, sp
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
    }

    /* Checks if the year is a leap year. A leap year is divisible by 4 but not divisible by 100, unless it's divisible by 400 */
    int leap_year = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);
 8002e1c:	ab07      	add	r3, sp, #28
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	2203      	movs	r2, #3
 8002e22:	4013      	ands	r3, r2
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <Validate_Date+0xa6>
 8002e2a:	ab07      	add	r3, sp, #28
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	2164      	movs	r1, #100	@ 0x64
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7fd f97f 	bl	8000134 <__aeabi_uidivmod>
 8002e36:	000b      	movs	r3, r1
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10a      	bne.n	8002e54 <Validate_Date+0xbc>
 8002e3e:	ab07      	add	r3, sp, #28
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	22c8      	movs	r2, #200	@ 0xc8
 8002e44:	0051      	lsls	r1, r2, #1
 8002e46:	0018      	movs	r0, r3
 8002e48:	f7fd f974 	bl	8000134 <__aeabi_uidivmod>
 8002e4c:	000b      	movs	r3, r1
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <Validate_Date+0xc0>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <Validate_Date+0xc2>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	9306      	str	r3, [sp, #24]

    /* If the year is a leap year, update February's days to 29 */
    if (leap_year)
 8002e5c:	9b06      	ldr	r3, [sp, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <Validate_Date+0xd0>
    {
        days_Month[1] = 29;
 8002e62:	ab03      	add	r3, sp, #12
 8002e64:	221d      	movs	r2, #29
 8002e66:	705a      	strb	r2, [r3, #1]
    }

    /* Checks if the day is outside the valid range for the given month. 
    If it is, the function will return 0, indicating the date is invalid */
    if (day < 1 || day > days_Month[month - 1])
 8002e68:	466b      	mov	r3, sp
 8002e6a:	3307      	adds	r3, #7
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <Validate_Date+0xf0>
 8002e72:	466b      	mov	r3, sp
 8002e74:	3306      	adds	r3, #6
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	aa03      	add	r2, sp, #12
 8002e7c:	5cd3      	ldrb	r3, [r2, r3]
 8002e7e:	466a      	mov	r2, sp
 8002e80:	3207      	adds	r2, #7
 8002e82:	7812      	ldrb	r2, [r2, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d903      	bls.n	8002e90 <Validate_Date+0xf8>
    {
        status = 0;
 8002e88:	231f      	movs	r3, #31
 8002e8a:	446b      	add	r3, sp
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
    }
    
    return status;
 8002e90:	231f      	movs	r3, #31
 8002e92:	446b      	add	r3, sp
 8002e94:	781b      	ldrb	r3, [r3, #0]
}
 8002e96:	0018      	movs	r0, r3
 8002e98:	b009      	add	sp, #36	@ 0x24
 8002e9a:	bd30      	pop	{r4, r5, pc}
 8002e9c:	08003404 	.word	0x08003404
 8002ea0:	0000076c 	.word	0x0000076c
 8002ea4:	00000833 	.word	0x00000833

08002ea8 <WeekDay>:
 * @param month Month value.
 * @param year Year value.
 * @return Day of the week (e.g., 0 for Sunday, 1 for Monday, ...).
 */
uint8_t WeekDay(uint8_t day, uint8_t month, uint16_t year)
{
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	b08c      	sub	sp, #48	@ 0x30
 8002eac:	0004      	movs	r4, r0
 8002eae:	0008      	movs	r0, r1
 8002eb0:	0011      	movs	r1, r2
 8002eb2:	466b      	mov	r3, sp
 8002eb4:	3307      	adds	r3, #7
 8002eb6:	1c22      	adds	r2, r4, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	466b      	mov	r3, sp
 8002ebc:	3306      	adds	r3, #6
 8002ebe:	1c02      	adds	r2, r0, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
 8002ec2:	ab01      	add	r3, sp, #4
 8002ec4:	1c0a      	adds	r2, r1, #0
 8002ec6:	801a      	strh	r2, [r3, #0]
    /* Array representing the number of days in each month (non-leap year) */ 
    uint8_t daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8002ec8:	ab05      	add	r3, sp, #20
 8002eca:	4a44      	ldr	r2, [pc, #272]	@ (8002fdc <WeekDay+0x134>)
 8002ecc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ece:	c313      	stmia	r3!, {r0, r1, r4}

    /* Array representing the days of the week */ 
    uint8_t weekdays[] = {0, 1, 2, 3, 4, 5, 6};
 8002ed0:	ab03      	add	r3, sp, #12
 8002ed2:	4a43      	ldr	r2, [pc, #268]	@ (8002fe0 <WeekDay+0x138>)
 8002ed4:	6811      	ldr	r1, [r2, #0]
 8002ed6:	6019      	str	r1, [r3, #0]
 8002ed8:	8891      	ldrh	r1, [r2, #4]
 8002eda:	8099      	strh	r1, [r3, #4]
 8002edc:	7992      	ldrb	r2, [r2, #6]
 8002ede:	719a      	strb	r2, [r3, #6]

    /* Checks if the year is a leap year. A leap year is divisible by 4 but not divisible by 100, unless it's divisible by 400 */
    int leap_year = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);
 8002ee0:	ab01      	add	r3, sp, #4
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <WeekDay+0x5a>
 8002eee:	ab01      	add	r3, sp, #4
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	2164      	movs	r1, #100	@ 0x64
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7fd f91d 	bl	8000134 <__aeabi_uidivmod>
 8002efa:	000b      	movs	r3, r1
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <WeekDay+0x70>
 8002f02:	ab01      	add	r3, sp, #4
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	22c8      	movs	r2, #200	@ 0xc8
 8002f08:	0051      	lsls	r1, r2, #1
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7fd f912 	bl	8000134 <__aeabi_uidivmod>
 8002f10:	000b      	movs	r3, r1
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <WeekDay+0x74>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <WeekDay+0x76>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	9309      	str	r3, [sp, #36]	@ 0x24

    /* If the year is a leap year, update February's days to 29 */
    if (leap_year)
 8002f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <WeekDay+0x84>
    {
        daysInMonth[1] = 29;
 8002f26:	ab05      	add	r3, sp, #20
 8002f28:	221d      	movs	r2, #29
 8002f2a:	705a      	strb	r2, [r3, #1]
    }

    /* Variable to calculate the total number of days since January 1st, 0000 until the given date */
    uint32_t totalDays = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	930b      	str	r3, [sp, #44]	@ 0x2c

    /* Adds the number of days for each year from year 0 until the specified year */
    for (uint16_t y = 0; y < year; y++)
 8002f30:	232a      	movs	r3, #42	@ 0x2a
 8002f32:	446b      	add	r3, sp
 8002f34:	2200      	movs	r2, #0
 8002f36:	801a      	strh	r2, [r3, #0]
 8002f38:	e011      	b.n	8002f5e <WeekDay+0xb6>
    {
        totalDays += leap_year ? 366 : 365;
 8002f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <WeekDay+0x9e>
 8002f40:	23b7      	movs	r3, #183	@ 0xb7
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	e001      	b.n	8002f4a <WeekDay+0xa2>
 8002f46:	236e      	movs	r3, #110	@ 0x6e
 8002f48:	33ff      	adds	r3, #255	@ 0xff
 8002f4a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002f4c:	18d3      	adds	r3, r2, r3
 8002f4e:	930b      	str	r3, [sp, #44]	@ 0x2c
    for (uint16_t y = 0; y < year; y++)
 8002f50:	232a      	movs	r3, #42	@ 0x2a
 8002f52:	446b      	add	r3, sp
 8002f54:	881a      	ldrh	r2, [r3, #0]
 8002f56:	232a      	movs	r3, #42	@ 0x2a
 8002f58:	446b      	add	r3, sp
 8002f5a:	3201      	adds	r2, #1
 8002f5c:	801a      	strh	r2, [r3, #0]
 8002f5e:	222a      	movs	r2, #42	@ 0x2a
 8002f60:	446a      	add	r2, sp
 8002f62:	ab01      	add	r3, sp, #4
 8002f64:	8812      	ldrh	r2, [r2, #0]
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d3e6      	bcc.n	8002f3a <WeekDay+0x92>
    }

    /* Adds the number of days for each month from January until the specified month */
    for (uint8_t m = 1; m < month; m++)
 8002f6c:	2329      	movs	r3, #41	@ 0x29
 8002f6e:	446b      	add	r3, sp
 8002f70:	2201      	movs	r2, #1
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	e010      	b.n	8002f98 <WeekDay+0xf0>
    {
        totalDays += daysInMonth[m - 1];
 8002f76:	2329      	movs	r3, #41	@ 0x29
 8002f78:	446b      	add	r3, sp
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	aa05      	add	r2, sp, #20
 8002f80:	5cd3      	ldrb	r3, [r2, r3]
 8002f82:	001a      	movs	r2, r3
 8002f84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002f86:	189b      	adds	r3, r3, r2
 8002f88:	930b      	str	r3, [sp, #44]	@ 0x2c
    for (uint8_t m = 1; m < month; m++)
 8002f8a:	2329      	movs	r3, #41	@ 0x29
 8002f8c:	446b      	add	r3, sp
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	2329      	movs	r3, #41	@ 0x29
 8002f92:	446b      	add	r3, sp
 8002f94:	3201      	adds	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	2229      	movs	r2, #41	@ 0x29
 8002f9a:	446a      	add	r2, sp
 8002f9c:	466b      	mov	r3, sp
 8002f9e:	3306      	adds	r3, #6
 8002fa0:	7812      	ldrb	r2, [r2, #0]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d3e6      	bcc.n	8002f76 <WeekDay+0xce>
    }

    /* Adds the remaining days in the current month */
    totalDays += day - 1;
 8002fa8:	466b      	mov	r3, sp
 8002faa:	3307      	adds	r3, #7
 8002fac:	781a      	ldrb	r2, [r3, #0]
 8002fae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002fb0:	18d3      	adds	r3, r2, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	930b      	str	r3, [sp, #44]	@ 0x2c

    /* Calculates the day of the week */
    uint8_t weekday = (totalDays % 7);
 8002fb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002fb8:	2107      	movs	r1, #7
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f7fd f8ba 	bl	8000134 <__aeabi_uidivmod>
 8002fc0:	000b      	movs	r3, r1
 8002fc2:	001a      	movs	r2, r3
 8002fc4:	2323      	movs	r3, #35	@ 0x23
 8002fc6:	446b      	add	r3, sp
 8002fc8:	701a      	strb	r2, [r3, #0]

    return weekdays[weekday];
 8002fca:	2323      	movs	r3, #35	@ 0x23
 8002fcc:	446b      	add	r3, sp
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	aa03      	add	r2, sp, #12
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
}
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	b00c      	add	sp, #48	@ 0x30
 8002fd8:	bd10      	pop	{r4, pc}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	08003404 	.word	0x08003404
 8002fe0:	08003410 	.word	0x08003410

08002fe4 <Validate_Alarm>:
 * @param hour Hour value for the alarm.
 * @param minutes Minute value for the alarm.
 * @return 1 if the alarm time is valid, 0 otherwise.
 */
uint8_t Validate_Alarm(uint8_t hour, uint8_t minutes)
{
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	466b      	mov	r3, sp
 8002fea:	3307      	adds	r3, #7
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	466b      	mov	r3, sp
 8002ff0:	3306      	adds	r3, #6
 8002ff2:	1c0a      	adds	r2, r1, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
    uint8_t status = 1;
 8002ff6:	230f      	movs	r3, #15
 8002ff8:	446b      	add	r3, sp
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]

    if (hour < 0 || hour > 23 || minutes < 0 || minutes > 59)
 8002ffe:	466b      	mov	r3, sp
 8003000:	3307      	adds	r3, #7
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b17      	cmp	r3, #23
 8003006:	d804      	bhi.n	8003012 <Validate_Alarm+0x2e>
 8003008:	466b      	mov	r3, sp
 800300a:	3306      	adds	r3, #6
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b3b      	cmp	r3, #59	@ 0x3b
 8003010:	d903      	bls.n	800301a <Validate_Alarm+0x36>
    {
        status = 0;
 8003012:	230f      	movs	r3, #15
 8003014:	446b      	add	r3, sp
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
    }
    
    return status;
 800301a:	230f      	movs	r3, #15
 800301c:	446b      	add	r3, sp
 800301e:	781b      	ldrb	r3, [r3, #0]
}
 8003020:	0018      	movs	r0, r3
 8003022:	b004      	add	sp, #16
 8003024:	4770      	bx	lr
	...

08003028 <Clock_Init>:
/* Functions */
/**
 * @brief Initialize the RTC clock
 */
void Clock_Init(void)
{
 8003028:	b510      	push	{r4, lr}
   hrtc.Instance = RTC; /* Specify the RTC instance */
 800302a:	4b1b      	ldr	r3, [pc, #108]	@ (8003098 <Clock_Init+0x70>)
 800302c:	4a1b      	ldr	r2, [pc, #108]	@ (800309c <Clock_Init+0x74>)
 800302e:	601a      	str	r2, [r3, #0]
   hrtc.Init.HourFormat = RTC_HOURFORMAT_24; /* Use 24-hour format */
 8003030:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <Clock_Init+0x70>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
   hrtc.Init.AsynchPrediv = PRESCALER_1; /* Asynchronous prescaler value - for LSE: 127 */
 8003036:	4b18      	ldr	r3, [pc, #96]	@ (8003098 <Clock_Init+0x70>)
 8003038:	227f      	movs	r2, #127	@ 0x7f
 800303a:	60da      	str	r2, [r3, #12]
   hrtc.Init.SynchPrediv = PRESCALER_2; /* Synchronous prescaler value - for LSE: 255 */
 800303c:	4b16      	ldr	r3, [pc, #88]	@ (8003098 <Clock_Init+0x70>)
 800303e:	22ff      	movs	r2, #255	@ 0xff
 8003040:	611a      	str	r2, [r3, #16]
   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE; /* RTC output setting */
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <Clock_Init+0x70>)
 8003044:	2200      	movs	r2, #0
 8003046:	615a      	str	r2, [r3, #20]
   HAL_RTC_Init(&hrtc); /* Initialize the RTC */
 8003048:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <Clock_Init+0x70>)
 800304a:	0018      	movs	r0, r3
 800304c:	f7ff f804 	bl	8002058 <HAL_RTC_Init>

   /* Set the time: 21:30:00 */
   sTime.Hours = 0x21;
 8003050:	4b13      	ldr	r3, [pc, #76]	@ (80030a0 <Clock_Init+0x78>)
 8003052:	2221      	movs	r2, #33	@ 0x21
 8003054:	701a      	strb	r2, [r3, #0]
   sTime.Minutes = 0x30;
 8003056:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <Clock_Init+0x78>)
 8003058:	2230      	movs	r2, #48	@ 0x30
 800305a:	705a      	strb	r2, [r3, #1]
   sTime.Seconds = 0x00;
 800305c:	4b10      	ldr	r3, [pc, #64]	@ (80030a0 <Clock_Init+0x78>)
 800305e:	2200      	movs	r2, #0
 8003060:	709a      	strb	r2, [r3, #2]
   HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8003062:	490f      	ldr	r1, [pc, #60]	@ (80030a0 <Clock_Init+0x78>)
 8003064:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <Clock_Init+0x70>)
 8003066:	2201      	movs	r2, #1
 8003068:	0018      	movs	r0, r3
 800306a:	f7ff f897 	bl	800219c <HAL_RTC_SetTime>
   
   /* Set the date: Wednesday, August 16, 2023 */
   sDate.Date = 0x16;
 800306e:	4b0d      	ldr	r3, [pc, #52]	@ (80030a4 <Clock_Init+0x7c>)
 8003070:	2216      	movs	r2, #22
 8003072:	709a      	strb	r2, [r3, #2]
   sDate.Month = RTC_MONTH_AUGUST;
 8003074:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <Clock_Init+0x7c>)
 8003076:	2208      	movs	r2, #8
 8003078:	705a      	strb	r2, [r3, #1]
   sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800307a:	4b0a      	ldr	r3, [pc, #40]	@ (80030a4 <Clock_Init+0x7c>)
 800307c:	2203      	movs	r2, #3
 800307e:	701a      	strb	r2, [r3, #0]
   sDate.Year = 0x23;
 8003080:	4b08      	ldr	r3, [pc, #32]	@ (80030a4 <Clock_Init+0x7c>)
 8003082:	2223      	movs	r2, #35	@ 0x23
 8003084:	70da      	strb	r2, [r3, #3]
   HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8003086:	4907      	ldr	r1, [pc, #28]	@ (80030a4 <Clock_Init+0x7c>)
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <Clock_Init+0x70>)
 800308a:	2201      	movs	r2, #1
 800308c:	0018      	movs	r0, r3
 800308e:	f7ff f92d 	bl	80022ec <HAL_RTC_SetDate>
}
 8003092:	46c0      	nop			@ (mov r8, r8)
 8003094:	bd10      	pop	{r4, pc}
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	20000110 	.word	0x20000110
 800309c:	40002800 	.word	0x40002800
 80030a0:	2000013c 	.word	0x2000013c
 80030a4:	20000150 	.word	0x20000150

080030a8 <Clock_Task>:

/**
 * @brief Handle clock-related state transitions and tasks
 */
void Clock_Task(void)
{
 80030a8:	b510      	push	{r4, lr}
    static Clock_States currentClockState = CLOCK_IDLE_STATE; /* Initialize the clock states variable */
    static uint32_t ticker; /* Variable to handle the ticks */

    ticker = HAL_GetTick(); /* Get the first lecture of transcurred time */
 80030aa:	f7fd fa0d 	bl	80004c8 <HAL_GetTick>
 80030ae:	0002      	movs	r2, r0
 80030b0:	4b5d      	ldr	r3, [pc, #372]	@ (8003228 <Clock_Task+0x180>)
 80030b2:	601a      	str	r2, [r3, #0]

    switch (currentClockState)
 80030b4:	4b5d      	ldr	r3, [pc, #372]	@ (800322c <Clock_Task+0x184>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b05      	cmp	r3, #5
 80030ba:	d900      	bls.n	80030be <Clock_Task+0x16>
 80030bc:	e0ad      	b.n	800321a <Clock_Task+0x172>
 80030be:	009a      	lsls	r2, r3, #2
 80030c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003230 <Clock_Task+0x188>)
 80030c2:	18d3      	adds	r3, r2, r3
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	469f      	mov	pc, r3
    {
        case CLOCK_IDLE_STATE:
            /* Check if there's a message */
            if (Msg.msg != SERIAL_MSG_NONE)
 80030c8:	4b5a      	ldr	r3, [pc, #360]	@ (8003234 <Clock_Task+0x18c>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <Clock_Task+0x2e>
            {
                currentClockState = CLOCK_VALID_DATA_STATE; /* Move to VALID_DATA_STATE */
 80030d0:	4b56      	ldr	r3, [pc, #344]	@ (800322c <Clock_Task+0x184>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
            }
            if ((HAL_GetTick() - ticker) >= 1000)
 80030d6:	f7fd f9f7 	bl	80004c8 <HAL_GetTick>
 80030da:	0002      	movs	r2, r0
 80030dc:	4b52      	ldr	r3, [pc, #328]	@ (8003228 <Clock_Task+0x180>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	1ad2      	subs	r2, r2, r3
 80030e2:	23fa      	movs	r3, #250	@ 0xfa
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d200      	bcs.n	80030ec <Clock_Task+0x44>
 80030ea:	e09a      	b.n	8003222 <Clock_Task+0x17a>
            {
                ticker = HAL_GetTick(); /* Update the variable ticker */
 80030ec:	f7fd f9ec 	bl	80004c8 <HAL_GetTick>
 80030f0:	0002      	movs	r2, r0
 80030f2:	4b4d      	ldr	r3, [pc, #308]	@ (8003228 <Clock_Task+0x180>)
 80030f4:	601a      	str	r2, [r3, #0]
                currentClockState = CLOCK_DISPLAY_DATA_STATE; /* Move to DISPLAY_DATA_STATE */
 80030f6:	4b4d      	ldr	r3, [pc, #308]	@ (800322c <Clock_Task+0x184>)
 80030f8:	2205      	movs	r2, #5
 80030fa:	701a      	strb	r2, [r3, #0]
            }
            break;
 80030fc:	e091      	b.n	8003222 <Clock_Task+0x17a>

        case CLOCK_VALID_DATA_STATE:
            if (Msg.msg == SERIAL_MSG_TIME)
 80030fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003234 <Clock_Task+0x18c>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d103      	bne.n	800310e <Clock_Task+0x66>
            {
                currentClockState = CLOCK_UPDATE_TIME_STATE; /* Move to UPDATE_TIME_STATE */
 8003106:	4b49      	ldr	r3, [pc, #292]	@ (800322c <Clock_Task+0x184>)
 8003108:	2202      	movs	r2, #2
 800310a:	701a      	strb	r2, [r3, #0]
            else
            {
                currentClockState = CLOCK_IDLE_STATE; /* Move to IDLE_CLOCK_STATE */
            }

            break;
 800310c:	e08a      	b.n	8003224 <Clock_Task+0x17c>
            else if (Msg.msg == SERIAL_MSG_DATE)
 800310e:	4b49      	ldr	r3, [pc, #292]	@ (8003234 <Clock_Task+0x18c>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d103      	bne.n	800311e <Clock_Task+0x76>
                currentClockState = CLOCK_UPDATE_DATE_STATE; /* Move to UPDATE_DATE_STATE */
 8003116:	4b45      	ldr	r3, [pc, #276]	@ (800322c <Clock_Task+0x184>)
 8003118:	2203      	movs	r2, #3
 800311a:	701a      	strb	r2, [r3, #0]
            break;
 800311c:	e082      	b.n	8003224 <Clock_Task+0x17c>
            else if (Msg.msg == SERIAL_MSG_ALARM)
 800311e:	4b45      	ldr	r3, [pc, #276]	@ (8003234 <Clock_Task+0x18c>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d103      	bne.n	800312e <Clock_Task+0x86>
                currentClockState = CLOCK_UPDATE_ALARM_STATE; /* Move to UPDATE_ALARM_STATE */
 8003126:	4b41      	ldr	r3, [pc, #260]	@ (800322c <Clock_Task+0x184>)
 8003128:	2204      	movs	r2, #4
 800312a:	701a      	strb	r2, [r3, #0]
            break;
 800312c:	e07a      	b.n	8003224 <Clock_Task+0x17c>
                currentClockState = CLOCK_IDLE_STATE; /* Move to IDLE_CLOCK_STATE */
 800312e:	4b3f      	ldr	r3, [pc, #252]	@ (800322c <Clock_Task+0x184>)
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
            break;
 8003134:	e076      	b.n	8003224 <Clock_Task+0x17c>
        
        case CLOCK_UPDATE_TIME_STATE:
            sTime.Hours = Msg.tm.tm_hour;
 8003136:	4b3f      	ldr	r3, [pc, #252]	@ (8003234 <Clock_Task+0x18c>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b3e      	ldr	r3, [pc, #248]	@ (8003238 <Clock_Task+0x190>)
 800313e:	701a      	strb	r2, [r3, #0]
            sTime.Minutes = Msg.tm.tm_min;
 8003140:	4b3c      	ldr	r3, [pc, #240]	@ (8003234 <Clock_Task+0x18c>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	4b3c      	ldr	r3, [pc, #240]	@ (8003238 <Clock_Task+0x190>)
 8003148:	705a      	strb	r2, [r3, #1]
            sTime.Seconds = Msg.tm.tm_sec;
 800314a:	4b3a      	ldr	r3, [pc, #232]	@ (8003234 <Clock_Task+0x18c>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	4b39      	ldr	r3, [pc, #228]	@ (8003238 <Clock_Task+0x190>)
 8003152:	709a      	strb	r2, [r3, #2]
            HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003154:	4938      	ldr	r1, [pc, #224]	@ (8003238 <Clock_Task+0x190>)
 8003156:	4b39      	ldr	r3, [pc, #228]	@ (800323c <Clock_Task+0x194>)
 8003158:	2200      	movs	r2, #0
 800315a:	0018      	movs	r0, r3
 800315c:	f7ff f81e 	bl	800219c <HAL_RTC_SetTime>

            currentClockState = CLOCK_DISPLAY_DATA_STATE; /* Move to DISPLAY_DATA_STATE */
 8003160:	4b32      	ldr	r3, [pc, #200]	@ (800322c <Clock_Task+0x184>)
 8003162:	2205      	movs	r2, #5
 8003164:	701a      	strb	r2, [r3, #0]
            break;
 8003166:	e05d      	b.n	8003224 <Clock_Task+0x17c>

        case CLOCK_UPDATE_DATE_STATE:
            sDate.Date = Msg.tm.tm_mday;
 8003168:	4b32      	ldr	r3, [pc, #200]	@ (8003234 <Clock_Task+0x18c>)
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4b34      	ldr	r3, [pc, #208]	@ (8003240 <Clock_Task+0x198>)
 8003170:	709a      	strb	r2, [r3, #2]
            sDate.Month = Msg.tm.tm_mon;
 8003172:	4b30      	ldr	r3, [pc, #192]	@ (8003234 <Clock_Task+0x18c>)
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	b2da      	uxtb	r2, r3
 8003178:	4b31      	ldr	r3, [pc, #196]	@ (8003240 <Clock_Task+0x198>)
 800317a:	705a      	strb	r2, [r3, #1]
            sDate.WeekDay = Msg.tm.tm_wday;
 800317c:	4b2d      	ldr	r3, [pc, #180]	@ (8003234 <Clock_Task+0x18c>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	4b2f      	ldr	r3, [pc, #188]	@ (8003240 <Clock_Task+0x198>)
 8003184:	701a      	strb	r2, [r3, #0]
            sDate.Year = Msg.tm.tm_year;
 8003186:	4b2b      	ldr	r3, [pc, #172]	@ (8003234 <Clock_Task+0x18c>)
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	4b2c      	ldr	r3, [pc, #176]	@ (8003240 <Clock_Task+0x198>)
 800318e:	70da      	strb	r2, [r3, #3]
            HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003190:	492b      	ldr	r1, [pc, #172]	@ (8003240 <Clock_Task+0x198>)
 8003192:	4b2a      	ldr	r3, [pc, #168]	@ (800323c <Clock_Task+0x194>)
 8003194:	2200      	movs	r2, #0
 8003196:	0018      	movs	r0, r3
 8003198:	f7ff f8a8 	bl	80022ec <HAL_RTC_SetDate>

            currentClockState = CLOCK_DISPLAY_DATA_STATE; /* Move to DISPLAY_DATA_STATE */
 800319c:	4b23      	ldr	r3, [pc, #140]	@ (800322c <Clock_Task+0x184>)
 800319e:	2205      	movs	r2, #5
 80031a0:	701a      	strb	r2, [r3, #0]
            break;
 80031a2:	e03f      	b.n	8003224 <Clock_Task+0x17c>

        case CLOCK_UPDATE_ALARM_STATE:
            sAlarm.AlarmTime.Hours = Msg.tm.tm_hour;
 80031a4:	4b23      	ldr	r3, [pc, #140]	@ (8003234 <Clock_Task+0x18c>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	4b26      	ldr	r3, [pc, #152]	@ (8003244 <Clock_Task+0x19c>)
 80031ac:	701a      	strb	r2, [r3, #0]
            sAlarm.AlarmTime.Minutes = Msg.tm.tm_min;
 80031ae:	4b21      	ldr	r3, [pc, #132]	@ (8003234 <Clock_Task+0x18c>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	4b23      	ldr	r3, [pc, #140]	@ (8003244 <Clock_Task+0x19c>)
 80031b6:	705a      	strb	r2, [r3, #1]
            HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 80031b8:	4922      	ldr	r1, [pc, #136]	@ (8003244 <Clock_Task+0x19c>)
 80031ba:	4b20      	ldr	r3, [pc, #128]	@ (800323c <Clock_Task+0x194>)
 80031bc:	2200      	movs	r2, #0
 80031be:	0018      	movs	r0, r3
 80031c0:	f7ff f926 	bl	8002410 <HAL_RTC_SetAlarm>

            currentClockState = CLOCK_DISPLAY_DATA_STATE;
 80031c4:	4b19      	ldr	r3, [pc, #100]	@ (800322c <Clock_Task+0x184>)
 80031c6:	2205      	movs	r2, #5
 80031c8:	701a      	strb	r2, [r3, #0]
            break;
 80031ca:	e02b      	b.n	8003224 <Clock_Task+0x17c>

        case CLOCK_DISPLAY_DATA_STATE:
            CANMsg.msg = Msg.msg; /* Enabler for displaying the clock message */
 80031cc:	4b19      	ldr	r3, [pc, #100]	@ (8003234 <Clock_Task+0x18c>)
 80031ce:	781a      	ldrb	r2, [r3, #0]
 80031d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003248 <Clock_Task+0x1a0>)
 80031d2:	701a      	strb	r2, [r3, #0]

            CANMsg.tm.tm_hour = Msg.tm.tm_hour;
 80031d4:	4b17      	ldr	r3, [pc, #92]	@ (8003234 <Clock_Task+0x18c>)
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <Clock_Task+0x1a0>)
 80031da:	60da      	str	r2, [r3, #12]
            CANMsg.tm.tm_min = Msg.tm.tm_min;
 80031dc:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <Clock_Task+0x18c>)
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	4b19      	ldr	r3, [pc, #100]	@ (8003248 <Clock_Task+0x1a0>)
 80031e2:	609a      	str	r2, [r3, #8]
            CANMsg.tm.tm_sec = Msg.tm.tm_sec;
 80031e4:	4b13      	ldr	r3, [pc, #76]	@ (8003234 <Clock_Task+0x18c>)
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4b17      	ldr	r3, [pc, #92]	@ (8003248 <Clock_Task+0x1a0>)
 80031ea:	605a      	str	r2, [r3, #4]
            CANMsg.tm.tm_mday = Msg.tm.tm_mday;
 80031ec:	4b11      	ldr	r3, [pc, #68]	@ (8003234 <Clock_Task+0x18c>)
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <Clock_Task+0x1a0>)
 80031f2:	611a      	str	r2, [r3, #16]
            CANMsg.tm.tm_mon = Msg.tm.tm_mon;
 80031f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <Clock_Task+0x18c>)
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <Clock_Task+0x1a0>)
 80031fa:	615a      	str	r2, [r3, #20]
            CANMsg.tm.tm_wday = Msg.tm.tm_wday;
 80031fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003234 <Clock_Task+0x18c>)
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <Clock_Task+0x1a0>)
 8003202:	61da      	str	r2, [r3, #28]
            CANMsg.tm.tm_year = Msg.tm.tm_year;
 8003204:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <Clock_Task+0x18c>)
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	4b0f      	ldr	r3, [pc, #60]	@ (8003248 <Clock_Task+0x1a0>)
 800320a:	619a      	str	r2, [r3, #24]

            Msg.msg = SERIAL_MSG_NONE; /* Reset message indicator */
 800320c:	4b09      	ldr	r3, [pc, #36]	@ (8003234 <Clock_Task+0x18c>)
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
            
            currentClockState = CLOCK_IDLE_STATE; /* Move to IDLE_CLOCK_STATE */
 8003212:	4b06      	ldr	r3, [pc, #24]	@ (800322c <Clock_Task+0x184>)
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
            break;
 8003218:	e004      	b.n	8003224 <Clock_Task+0x17c>
        
        default:
            currentClockState = CLOCK_IDLE_STATE; /* Invalid state, return to IDLE_STATE */
 800321a:	4b04      	ldr	r3, [pc, #16]	@ (800322c <Clock_Task+0x184>)
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
            break;
 8003220:	e000      	b.n	8003224 <Clock_Task+0x17c>
            break;
 8003222:	46c0      	nop			@ (mov r8, r8)
    }
}
 8003224:	46c0      	nop			@ (mov r8, r8)
 8003226:	bd10      	pop	{r4, pc}
 8003228:	200001cc 	.word	0x200001cc
 800322c:	200001d0 	.word	0x200001d0
 8003230:	08003444 	.word	0x08003444
 8003234:	2000017c 	.word	0x2000017c
 8003238:	2000013c 	.word	0x2000013c
 800323c:	20000110 	.word	0x20000110
 8003240:	20000150 	.word	0x20000150
 8003244:	20000154 	.word	0x20000154
 8003248:	200001a4 	.word	0x200001a4

0800324c <CAN_Task>:
 * The function processes any pending CAN tasks by switching through different
 * CAN states. Depending on the current state, it prepares data for transmission,
 * updates the message identifier, and sends CAN messages.
 */
void CAN_Task(void)
{
 800324c:	b510      	push	{r4, lr}
    static uint8_t TxData[8] = {0};      

    /* Static variable to hold the current state of CAN operations */
    static CAN_StateTypeDef currentCanState = CAN_IDLE_STATE;

    switch(currentCanState)
 800324e:	4b4c      	ldr	r3, [pc, #304]	@ (8003380 <CAN_Task+0x134>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d100      	bne.n	8003258 <CAN_Task+0xc>
 8003256:	e071      	b.n	800333c <CAN_Task+0xf0>
 8003258:	dd00      	ble.n	800325c <CAN_Task+0x10>
 800325a:	e08a      	b.n	8003372 <CAN_Task+0x126>
 800325c:	2b02      	cmp	r3, #2
 800325e:	d03e      	beq.n	80032de <CAN_Task+0x92>
 8003260:	dd00      	ble.n	8003264 <CAN_Task+0x18>
 8003262:	e086      	b.n	8003372 <CAN_Task+0x126>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <CAN_Task+0x22>
 8003268:	2b01      	cmp	r3, #1
 800326a:	d018      	beq.n	800329e <CAN_Task+0x52>
 800326c:	e081      	b.n	8003372 <CAN_Task+0x126>
    {
        /* Check the state and process accordingly */
        
        case CAN_IDLE_STATE:
            /* If a message is pending, update the state to prepare for transmission */
            if(CANMsg.msg == 1)
 800326e:	4b45      	ldr	r3, [pc, #276]	@ (8003384 <CAN_Task+0x138>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d103      	bne.n	800327e <CAN_Task+0x32>
            {
                currentCanState = CAN_SEND_TIME_STATE;
 8003276:	4b42      	ldr	r3, [pc, #264]	@ (8003380 <CAN_Task+0x134>)
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
            }
            else if(CANMsg.msg == 3)
            {
                currentCanState = CAN_SEND_ALARM_STATE;
            }
            break;
 800327c:	e07d      	b.n	800337a <CAN_Task+0x12e>
            else if(CANMsg.msg == 2)
 800327e:	4b41      	ldr	r3, [pc, #260]	@ (8003384 <CAN_Task+0x138>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d103      	bne.n	800328e <CAN_Task+0x42>
                currentCanState = CAN_SEND_DATE_STATE;
 8003286:	4b3e      	ldr	r3, [pc, #248]	@ (8003380 <CAN_Task+0x134>)
 8003288:	2202      	movs	r2, #2
 800328a:	701a      	strb	r2, [r3, #0]
            break;
 800328c:	e075      	b.n	800337a <CAN_Task+0x12e>
            else if(CANMsg.msg == 3)
 800328e:	4b3d      	ldr	r3, [pc, #244]	@ (8003384 <CAN_Task+0x138>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d171      	bne.n	800337a <CAN_Task+0x12e>
                currentCanState = CAN_SEND_ALARM_STATE;
 8003296:	4b3a      	ldr	r3, [pc, #232]	@ (8003380 <CAN_Task+0x134>)
 8003298:	2203      	movs	r2, #3
 800329a:	701a      	strb	r2, [r3, #0]
            break;
 800329c:	e06d      	b.n	800337a <CAN_Task+0x12e>

        case CAN_SEND_TIME_STATE:
            /* Prepare time data for transmission */
            TxData[0] = (uint8_t) CANMsg.tm.tm_hour;
 800329e:	4b39      	ldr	r3, [pc, #228]	@ (8003384 <CAN_Task+0x138>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b38      	ldr	r3, [pc, #224]	@ (8003388 <CAN_Task+0x13c>)
 80032a6:	701a      	strb	r2, [r3, #0]
            TxData[1] = (uint8_t) CANMsg.tm.tm_min;
 80032a8:	4b36      	ldr	r3, [pc, #216]	@ (8003384 <CAN_Task+0x138>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4b36      	ldr	r3, [pc, #216]	@ (8003388 <CAN_Task+0x13c>)
 80032b0:	705a      	strb	r2, [r3, #1]
            TxData[2] = (uint8_t) CANMsg.tm.tm_sec;
 80032b2:	4b34      	ldr	r3, [pc, #208]	@ (8003384 <CAN_Task+0x138>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	4b33      	ldr	r3, [pc, #204]	@ (8003388 <CAN_Task+0x13c>)
 80032ba:	709a      	strb	r2, [r3, #2]

            /* Set message identifier and transmit time data using FDCAN */
            CANTxHeader.Identifier = CAN_TIME_MESSAGE_ID; /* CAN time message ID */
 80032bc:	4b33      	ldr	r3, [pc, #204]	@ (800338c <CAN_Task+0x140>)
 80032be:	2298      	movs	r2, #152	@ 0x98
 80032c0:	0052      	lsls	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
            HAL_FDCAN_AddMessageToTxFifoQ(&CANHandler, &CANTxHeader, TxData);
 80032c4:	4a30      	ldr	r2, [pc, #192]	@ (8003388 <CAN_Task+0x13c>)
 80032c6:	4931      	ldr	r1, [pc, #196]	@ (800338c <CAN_Task+0x140>)
 80032c8:	4b31      	ldr	r3, [pc, #196]	@ (8003390 <CAN_Task+0x144>)
 80032ca:	0018      	movs	r0, r3
 80032cc:	f7fe f833 	bl	8001336 <HAL_FDCAN_AddMessageToTxFifoQ>

            /* Reset message indicator and revert to idle state */
            CANMsg.msg = 0;
 80032d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003384 <CAN_Task+0x138>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
            currentCanState = CAN_IDLE_STATE;
 80032d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003380 <CAN_Task+0x134>)
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
            break;
 80032dc:	e04e      	b.n	800337c <CAN_Task+0x130>

        case CAN_SEND_DATE_STATE:
            /* Prepare date data for transmission */
            TxData[0] = (uint8_t) CANMsg.tm.tm_mday;
 80032de:	4b29      	ldr	r3, [pc, #164]	@ (8003384 <CAN_Task+0x138>)
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	4b28      	ldr	r3, [pc, #160]	@ (8003388 <CAN_Task+0x13c>)
 80032e6:	701a      	strb	r2, [r3, #0]
            TxData[1] = (uint8_t) CANMsg.tm.tm_mon;
 80032e8:	4b26      	ldr	r3, [pc, #152]	@ (8003384 <CAN_Task+0x138>)
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4b26      	ldr	r3, [pc, #152]	@ (8003388 <CAN_Task+0x13c>)
 80032f0:	705a      	strb	r2, [r3, #1]
            TxData[2] = (uint8_t) (CANMsg.tm.tm_year / 100); /* Most significant 2 digits of year */
 80032f2:	4b24      	ldr	r3, [pc, #144]	@ (8003384 <CAN_Task+0x138>)
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2164      	movs	r1, #100	@ 0x64
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7fc fedf 	bl	80000bc <__udivsi3>
 80032fe:	0003      	movs	r3, r0
 8003300:	b2da      	uxtb	r2, r3
 8003302:	4b21      	ldr	r3, [pc, #132]	@ (8003388 <CAN_Task+0x13c>)
 8003304:	709a      	strb	r2, [r3, #2]
            TxData[3] = (uint8_t) (CANMsg.tm.tm_year % 100); /* Least significant 2 digits of year */
 8003306:	4b1f      	ldr	r3, [pc, #124]	@ (8003384 <CAN_Task+0x138>)
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2164      	movs	r1, #100	@ 0x64
 800330c:	0018      	movs	r0, r3
 800330e:	f7fc ff11 	bl	8000134 <__aeabi_uidivmod>
 8003312:	000b      	movs	r3, r1
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4b1c      	ldr	r3, [pc, #112]	@ (8003388 <CAN_Task+0x13c>)
 8003318:	70da      	strb	r2, [r3, #3]
            
            /* Set message identifier and transmit date data using FDCAN */
            CANTxHeader.Identifier = CAN_DATE_MESSAGE_ID; /* CAN date message ID */
 800331a:	4b1c      	ldr	r3, [pc, #112]	@ (800338c <CAN_Task+0x140>)
 800331c:	2232      	movs	r2, #50	@ 0x32
 800331e:	32ff      	adds	r2, #255	@ 0xff
 8003320:	601a      	str	r2, [r3, #0]
            HAL_FDCAN_AddMessageToTxFifoQ(&CANHandler, &CANTxHeader, TxData);
 8003322:	4a19      	ldr	r2, [pc, #100]	@ (8003388 <CAN_Task+0x13c>)
 8003324:	4919      	ldr	r1, [pc, #100]	@ (800338c <CAN_Task+0x140>)
 8003326:	4b1a      	ldr	r3, [pc, #104]	@ (8003390 <CAN_Task+0x144>)
 8003328:	0018      	movs	r0, r3
 800332a:	f7fe f804 	bl	8001336 <HAL_FDCAN_AddMessageToTxFifoQ>
            
            /* Reset message indicator and revert to idle state */
            CANMsg.msg = 0;
 800332e:	4b15      	ldr	r3, [pc, #84]	@ (8003384 <CAN_Task+0x138>)
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
            currentCanState = CAN_IDLE_STATE;
 8003334:	4b12      	ldr	r3, [pc, #72]	@ (8003380 <CAN_Task+0x134>)
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
            break;
 800333a:	e01f      	b.n	800337c <CAN_Task+0x130>

        case CAN_SEND_ALARM_STATE:
            /* Prepare alarm data for transmission */
            TxData[0] = (uint8_t) CANMsg.tm.tm_hour;
 800333c:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <CAN_Task+0x138>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <CAN_Task+0x13c>)
 8003344:	701a      	strb	r2, [r3, #0]
            TxData[1] = (uint8_t) CANMsg.tm.tm_min;
 8003346:	4b0f      	ldr	r3, [pc, #60]	@ (8003384 <CAN_Task+0x138>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	4b0e      	ldr	r3, [pc, #56]	@ (8003388 <CAN_Task+0x13c>)
 800334e:	705a      	strb	r2, [r3, #1]

            /* Set message identifier and transmit alarm data using FDCAN */
            CANTxHeader.Identifier = CAN_ALARM_MESSAGE_ID; /* CAN alarm message ID */
 8003350:	4b0e      	ldr	r3, [pc, #56]	@ (800338c <CAN_Task+0x140>)
 8003352:	2299      	movs	r2, #153	@ 0x99
 8003354:	0052      	lsls	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
            HAL_FDCAN_AddMessageToTxFifoQ(&CANHandler, &CANTxHeader, TxData);
 8003358:	4a0b      	ldr	r2, [pc, #44]	@ (8003388 <CAN_Task+0x13c>)
 800335a:	490c      	ldr	r1, [pc, #48]	@ (800338c <CAN_Task+0x140>)
 800335c:	4b0c      	ldr	r3, [pc, #48]	@ (8003390 <CAN_Task+0x144>)
 800335e:	0018      	movs	r0, r3
 8003360:	f7fd ffe9 	bl	8001336 <HAL_FDCAN_AddMessageToTxFifoQ>
            
            /* Reset message indicator and revert to idle state */
            CANMsg.msg = 0;
 8003364:	4b07      	ldr	r3, [pc, #28]	@ (8003384 <CAN_Task+0x138>)
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
            currentCanState = CAN_IDLE_STATE;
 800336a:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <CAN_Task+0x134>)
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]
            break;
 8003370:	e004      	b.n	800337c <CAN_Task+0x130>

        default:
            /* In case of an unknown state, revert to idle state */
            currentCanState = CAN_IDLE_STATE;
 8003372:	4b03      	ldr	r3, [pc, #12]	@ (8003380 <CAN_Task+0x134>)
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
        break;
 8003378:	e000      	b.n	800337c <CAN_Task+0x130>
            break;
 800337a:	46c0      	nop			@ (mov r8, r8)
    }
 800337c:	46c0      	nop			@ (mov r8, r8)
 800337e:	bd10      	pop	{r4, pc}
 8003380:	200001d1 	.word	0x200001d1
 8003384:	200001a4 	.word	0x200001a4
 8003388:	200001d4 	.word	0x200001d4
 800338c:	200000c8 	.word	0x200000c8
 8003390:	2000003c 	.word	0x2000003c

08003394 <memset>:
 8003394:	0003      	movs	r3, r0
 8003396:	1882      	adds	r2, r0, r2
 8003398:	4293      	cmp	r3, r2
 800339a:	d100      	bne.n	800339e <memset+0xa>
 800339c:	4770      	bx	lr
 800339e:	7019      	strb	r1, [r3, #0]
 80033a0:	3301      	adds	r3, #1
 80033a2:	e7f9      	b.n	8003398 <memset+0x4>

080033a4 <__libc_init_array>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	2600      	movs	r6, #0
 80033a8:	4c0c      	ldr	r4, [pc, #48]	@ (80033dc <__libc_init_array+0x38>)
 80033aa:	4d0d      	ldr	r5, [pc, #52]	@ (80033e0 <__libc_init_array+0x3c>)
 80033ac:	1b64      	subs	r4, r4, r5
 80033ae:	10a4      	asrs	r4, r4, #2
 80033b0:	42a6      	cmp	r6, r4
 80033b2:	d109      	bne.n	80033c8 <__libc_init_array+0x24>
 80033b4:	2600      	movs	r6, #0
 80033b6:	f000 f819 	bl	80033ec <_init>
 80033ba:	4c0a      	ldr	r4, [pc, #40]	@ (80033e4 <__libc_init_array+0x40>)
 80033bc:	4d0a      	ldr	r5, [pc, #40]	@ (80033e8 <__libc_init_array+0x44>)
 80033be:	1b64      	subs	r4, r4, r5
 80033c0:	10a4      	asrs	r4, r4, #2
 80033c2:	42a6      	cmp	r6, r4
 80033c4:	d105      	bne.n	80033d2 <__libc_init_array+0x2e>
 80033c6:	bd70      	pop	{r4, r5, r6, pc}
 80033c8:	00b3      	lsls	r3, r6, #2
 80033ca:	58eb      	ldr	r3, [r5, r3]
 80033cc:	4798      	blx	r3
 80033ce:	3601      	adds	r6, #1
 80033d0:	e7ee      	b.n	80033b0 <__libc_init_array+0xc>
 80033d2:	00b3      	lsls	r3, r6, #2
 80033d4:	58eb      	ldr	r3, [r5, r3]
 80033d6:	4798      	blx	r3
 80033d8:	3601      	adds	r6, #1
 80033da:	e7f2      	b.n	80033c2 <__libc_init_array+0x1e>
 80033dc:	0800345c 	.word	0x0800345c
 80033e0:	0800345c 	.word	0x0800345c
 80033e4:	08003460 	.word	0x08003460
 80033e8:	0800345c 	.word	0x0800345c

080033ec <_init>:
 80033ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ee:	46c0      	nop			@ (mov r8, r8)
 80033f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f2:	bc08      	pop	{r3}
 80033f4:	469e      	mov	lr, r3
 80033f6:	4770      	bx	lr

080033f8 <_fini>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	46c0      	nop			@ (mov r8, r8)
 80033fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fe:	bc08      	pop	{r3}
 8003400:	469e      	mov	lr, r3
 8003402:	4770      	bx	lr
